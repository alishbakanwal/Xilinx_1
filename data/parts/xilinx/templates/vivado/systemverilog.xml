<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="template.xsl"?>
<RootFolder label="SystemVerilog" treetype="folder" language="SystemVerilog">
	<Folder label="Synthesis Constructs" treetype="folder">
		<SubFolder label="Coding Examples" treetype="folder">
			<SubFolder label="Arithmetic" treetype="folder">
				<SubFolder label="Add/Sub" treetype="folder">
					<Template label="Simple Adder/Subtractor" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard
   parameter ADDSUB_WIDTH = &lt;addsub_bit_width&gt;;

   wire [ADDSUB_WIDTH-1:0] &lt;a_input&gt;;
   wire [ADDSUB_WIDTH-1:0] &lt;b_input&gt;;
   logic [ADDSUB_WIDTH-1:0] &lt;addsub_output&gt;;

   always @*
      if (&lt;add_sub&gt;)
         &lt;addsub_output&gt; = &lt;a_input&gt; + &lt;b_input&gt;;
      else
         &lt;addsub_output&gt; = &lt;a_input&gt; - &lt;b_input&gt;;
					</Template>
				</SubFolder>
			</SubFolder>
			<SubFolder label="State-Machines" treetype="folder">
				<SubFolder label="Mealy" treetype="folder">
					<SubFolder label="Binary (enum)" treetype="folder">
						<SubFolder label="Fast" treetype="folder">
							<Template label="4 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [1:0] {&lt;state1&gt; = 2'b00,
                     &lt;state2&gt; = 2'b01,
                     &lt;state3&gt; = 2'b10,
                     &lt;state4&gt; = 2'b11} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
							<Template label="8 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [2:0] {&lt;state1&gt; = 3'b000,
                     &lt;state2&gt; = 3'b001,
                     &lt;state3&gt; = 3'b010,
                     &lt;state4&gt; = 3'b011,
                     &lt;state5&gt; = 3'b100,
                     &lt;state6&gt; = 3'b101,
                     &lt;state7&gt; = 3'b110,
                     &lt;state8&gt; = 3'b111} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
							<Template label="16 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [3:0] {&lt;state1&gt;  = 4'b0000,
                     &lt;state2&gt;  = 4'b0001,
                     &lt;state3&gt;  = 4'b0010,
                     &lt;state4&gt;  = 4'b0011,
                     &lt;state5&gt;  = 4'b0100,
                     &lt;state6&gt;  = 4'b0101,
                     &lt;state7&gt;  = 4'b0110,
                     &lt;state8&gt;  = 4'b0111,
                     &lt;state9&gt;  = 4'b1000,
                     &lt;state10&gt; = 4'b1001,
                     &lt;state11&gt; = 4'b1010,
                     &lt;state12&gt; = 4'b1011,
                     &lt;state13&gt; = 4'b1100,
                     &lt;state14&gt; = 4'b1101,
                     &lt;state15&gt; = 4'b1110,
                     &lt;state16&gt; = 4'b1111} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state9&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state10&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state11&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state12&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state13&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state14&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state15&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state16&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
						</SubFolder>
						<SubFolder label="Safe" treetype="folder">
							<Template label="4 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [1:0] {&lt;state1&gt; = 2'b00;
                     &lt;state2&gt; = 2'b01;
                     &lt;state3&gt; = 2'b10;
                     &lt;state4&gt; = 2'b11} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;)
         &lt;state&gt; &lt;= &lt;state1&gt;;
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            default : begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
							<Template label="8 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [2:0] {&lt;state1&gt; = 3'b000,
                     &lt;state2&gt; = 3'b001,
                     &lt;state3&gt; = 3'b010,
                     &lt;state4&gt; = 3'b011,
                     &lt;state5&gt; = 3'b100,
                     &lt;state6&gt; = 3'b101,
                     &lt;state7&gt; = 3'b110,
                     &lt;state8&gt; = 3'b111} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;)
         &lt;state&gt; &lt;= &lt;state1&gt;;
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            default : begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
							<Template label="16 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [3:0] {&lt;state1&gt;  = 4'b0000,
                     &lt;state2&gt;  = 4'b0001,
                     &lt;state3&gt;  = 4'b0010,
                     &lt;state4&gt;  = 4'b0011,
                     &lt;state5&gt;  = 4'b0100,
                     &lt;state6&gt;  = 4'b0101,
                     &lt;state7&gt;  = 4'b0110,
                     &lt;state8&gt;  = 4'b0111,
                     &lt;state9&gt;  = 4'b1000,
                     &lt;state10&gt; = 4'b1001,
                     &lt;state11&gt; = 4'b1010,
                     &lt;state12&gt; = 4'b1011,
                     &lt;state13&gt; = 4'b1100,
                     &lt;state14&gt; = 4'b1101,
                     &lt;state15&gt; = 4'b1110,
                     &lt;state16&gt; = 4'b1111} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;)
         &lt;state&gt; &lt;= &lt;state1&gt;;
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state9&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state10&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state11&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state12&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state13&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state14&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state15&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state16&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            default : begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
						</SubFolder>
					</SubFolder>
					<SubFolder label="One-Hot (enum)" treetype="folder">
						<SubFolder label="Fast" treetype="folder">
							<Template label="4 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [3:0] {&lt;state1&gt; = 4'b0001,
                     &lt;state2&gt; = 4'b0010,
                     &lt;state3&gt; = 4'b0100,
                     &lt;state4&gt; = 4'b1000} &lt;state&gt;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
							<Template label="8 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [7:0] {&lt;state1&gt; = 8'b00000001,
                     &lt;state2&gt; = 8'b00000010,
                     &lt;state3&gt; = 8'b00000100,
                     &lt;state4&gt; = 8'b00001000,
                     &lt;state5&gt; = 8'b00010000,
                     &lt;state6&gt; = 8'b00100000,
                     &lt;state7&gt; = 8'b01000000,
                     &lt;state8&gt; = 8'b10000000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;)
         &lt;state&gt; &lt;= &lt;state1&gt;;
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
							<Template label="16 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [15:0] {&lt;state1&gt;  = 16'b0000000000000001,
                      &lt;state2&gt;  = 16'b0000000000000010,
                      &lt;state3&gt;  = 16'b0000000000000100,
                      &lt;state4&gt;  = 16'b0000000000001000,
                      &lt;state5&gt;  = 16'b0000000000010000,
                      &lt;state6&gt;  = 16'b0000000000100000,
                      &lt;state7&gt;  = 16'b0000000001000000,
                      &lt;state8&gt;  = 16'b0000000010000000,
                      &lt;state9&gt;  = 16'b0000000100000000,
                      &lt;state10&gt; = 16'b0000001000000000,
                      &lt;state11&gt; = 16'b0000010000000000,
                      &lt;state12&gt; = 16'b0000100000000000,
                      &lt;state13&gt; = 16'b0001000000000000,
                      &lt;state14&gt; = 16'b0010000000000000,
                      &lt;state15&gt; = 16'b0100000000000000,
                      &lt;state16&gt; = 16'b1000000000000000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;)
         &lt;state&gt; &lt;= &lt;state1&gt;;
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state9&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state10&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state11&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state12&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state13&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state14&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state15&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state16&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
						</SubFolder>
						<SubFolder label="Safe" treetype="folder">
							<Template label="4 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [3:0] {&lt;state1&gt; = 4'b0001,
                     &lt;state2&gt; = 4'b0010,
                     &lt;state3&gt; = 4'b0100,
                     &lt;state4&gt; = 4'b1000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;)
         &lt;state&gt; &lt;= &lt;state1&gt;;
      else
         case (&lt;state&gt;)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            default : begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
							<Template label="8 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [7:0] {&lt;state1&gt; = 8'b00000001,
                     &lt;state2&gt; = 8'b00000010,
                     &lt;state3&gt; = 8'b00000100,
                     &lt;state4&gt; = 8'b00001000,
                     &lt;state5&gt; = 8'b00010000,
                     &lt;state6&gt; = 8'b00100000,
                     &lt;state7&gt; = 8'b01000000,
                     &lt;state8&gt; = 8'b10000000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;)
         &lt;state&gt; &lt;= &lt;state1&gt;;
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            default : begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
							<Template label="16 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [15:0] {&lt;state1&gt;  = 16'b0000000000000001,
                      &lt;state2&gt;  = 16'b0000000000000010,
                      &lt;state3&gt;  = 16'b0000000000000100,
                      &lt;state4&gt;  = 16'b0000000000001000,
                      &lt;state5&gt;  = 16'b0000000000010000,
                      &lt;state6&gt;  = 16'b0000000000100000,
                      &lt;state7&gt;  = 16'b0000000001000000,
                      &lt;state8&gt;  = 16'b0000000010000000,
                      &lt;state9&gt;  = 16'b0000000100000000,
                      &lt;state10&gt; = 16'b0000001000000000,
                      &lt;state11&gt; = 16'b0000010000000000,
                      &lt;state12&gt; = 16'b0000100000000000,
                      &lt;state13&gt; = 16'b0001000000000000,
                      &lt;state14&gt; = 16'b0010000000000000,
                      &lt;state15&gt; = 16'b0100000000000000,
                      &lt;state16&gt; = 16'b1000000000000000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;)
         &lt;state&gt; &lt;= &lt;state1&gt;;
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state9&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state10&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state11&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state12&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state13&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state14&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state15&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            &lt;state16&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
            end
            default : begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
            end
         endcase

   assign &lt;output1&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   assign &lt;output2&gt; = &lt;logic_equation_based_on_states_and_inputs&gt;;
   // Add other output equations as necessary
							</Template>
						</SubFolder>
					</SubFolder>
				</SubFolder>
				<SubFolder label="Moore" treetype="folder">
					<SubFolder label="Binary (enum)" treetype="folder">
						<SubFolder label="Fast" treetype="folder">
							<Template label="4 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [1:0] {&lt;state1&gt; = 2'b00,
                     &lt;state2&gt; = 2'b01,
                     &lt;state3&gt; = 2'b10,
                     &lt;state4&gt; = 2'b11} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
         endcase
							</Template>
							<Template label="8 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [2:0] {&lt;state1&gt; = 3'b000,
                     &lt;state2&gt; = 3'b001,
                     &lt;state3&gt; = 3'b010,
                     &lt;state4&gt; = 3'b011,
                     &lt;state5&gt; = 3'b100,
                     &lt;state6&gt; = 3'b101,
                     &lt;state7&gt; = 3'b110,
                     &lt;state8&gt; = 3'b111} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
         endcase
							</Template>
							<Template label="16 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [2:0] {&lt;state1&gt;  = 4'b0000,
                     &lt;state2&gt;  = 4'b0001,
                     &lt;state3&gt;  = 4'b0010,
                     &lt;state4&gt;  = 4'b0011,
                     &lt;state5&gt;  = 4'b0100,
                     &lt;state6&gt;  = 4'b0101,
                     &lt;state7&gt;  = 4'b0110,
                     &lt;state8&gt;  = 4'b0111,
                     &lt;state9&gt;  = 4'b1000,
                     &lt;state10&gt; = 4'b1001,
                     &lt;state11&gt; = 4'b1010,
                     &lt;state12&gt; = 4'b1011,
                     &lt;state13&gt; = 4'b1100,
                     &lt;state14&gt; = 4'b1101,
                     &lt;state15&gt; = 4'b1110,
                     &lt;state16&gt; = 4'b1111} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state9&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state10&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state11&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state12&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state13&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state14&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state15&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state16&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
         endcase
							</Template>
						</SubFolder>
						<SubFolder label="Safe" treetype="folder">
							<Template label="4 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [1:0] {&lt;state1&gt; = 2'b00,
                     &lt;state2&gt; = 2'b01,
                     &lt;state3&gt; = 2'b10,
                     &lt;state4&gt; = 2'b11} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            default : begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
         endcase
							</Template>
							<Template label="8 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [2:0] {&lt;state1&gt; = 3'b000,
                     &lt;state2&gt; = 3'b001,
                     &lt;state3&gt; = 3'b010,
                     &lt;state4&gt; = 3'b011,
                     &lt;state5&gt; = 3'b100,
                     &lt;state6&gt; = 3'b101,
                     &lt;state7&gt; = 3'b110,
                     &lt;state8&gt; = 3'b111} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            default : begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
         endcase
							</Template>
							<Template label="16 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [3:0] {&lt;state1&gt;  = 4'b0000,
                     &lt;state2&gt;  = 4'b0001,
                     &lt;state3&gt;  = 4'b0010,
                     &lt;state4&gt;  = 4'b0011,
                     &lt;state5&gt;  = 4'b0100,
                     &lt;state6&gt;  = 4'b0101,
                     &lt;state7&gt;  = 4'b0110,
                     &lt;state8&gt;  = 4'b0111,
                     &lt;state9&gt;  = 4'b1000,
                     &lt;state10&gt; = 4'b1001,
                     &lt;state11&gt; = 4'b1010,
                     &lt;state12&gt; = 4'b1011,
                     &lt;state13&gt; = 4'b1100,
                     &lt;state14&gt; = 4'b1101,
                     &lt;state15&gt; = 4'b1110,
                     &lt;state16&gt; = 4'b1111} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state9&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state10&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state11&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state12&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state13&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state14&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state15&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state16&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            default : begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
         endcase
							</Template>
						</SubFolder>
					</SubFolder>
					<SubFolder label="One-Hot (enum)" treetype="folder">
						<SubFolder label="Fast" treetype="folder">
							<Template label="4 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [3:0] {&lt;state1&gt; = 4'b0001,
                     &lt;state2&gt; = 4'b0010,
                     &lt;state3&gt; = 4'b0100,
                     &lt;state4&gt; = 4'b1000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
         endcase
							</Template>
							<Template label="8 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [7:0] {&lt;state1&gt; = 8'b00000001,
                     &lt;state2&gt; = 8'b00000010,
                     &lt;state3&gt; = 8'b00000100,
                     &lt;state4&gt; = 8'b00001000,
                     &lt;state5&gt; = 8'b00010000,
                     &lt;state6&gt; = 8'b00100000,
                     &lt;state7&gt; = 8'b01000000,
                     &lt;state8&gt; = 8'b10000000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
         endcase
							</Template>
							<Template label="16 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [15:0] {&lt;state1&gt;  = 16'b0000000000000001,
                      &lt;state2&gt;  = 16'b0000000000000010,
                      &lt;state3&gt;  = 16'b0000000000000100,
                      &lt;state4&gt;  = 16'b0000000000001000,
                      &lt;state5&gt;  = 16'b0000000000010000,
                      &lt;state6&gt;  = 16'b0000000000100000,
                      &lt;state7&gt;  = 16'b0000000001000000,
                      &lt;state8&gt;  = 16'b0000000010000000,
                      &lt;state9&gt;  = 16'b0000000100000000,
                      &lt;state10&gt; = 16'b0000001000000000,
                      &lt;state11&gt; = 16'b0000010000000000,
                      &lt;state12&gt; = 16'b0000100000000000,
                      &lt;state13&gt; = 16'b0001000000000000,
                      &lt;state14&gt; = 16'b0010000000000000,
                      &lt;state15&gt; = 16'b0100000000000000,
                      &lt;state16&gt; = 16'b1000000000000000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state9&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state10&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state11&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state12&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state13&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state14&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state15&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state16&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
         endcase
							</Template>
						</SubFolder>
						<SubFolder label="Safe" treetype="folder">
							<Template label="4 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [3:0] {&lt;state1&gt; = 4'b0001,
                     &lt;state2&gt; = 4'b0010,
                     &lt;state3&gt; = 4'b0100,
                     &lt;state4&gt; = 4'b1000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            default: begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
	    end
         endcase
							</Template>
							<Template label="8 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [7:0] {&lt;state1&gt; = 8'b00000001,
                     &lt;state2&gt; = 8'b00000010,
                     &lt;state3&gt; = 8'b00000100,
                     &lt;state4&gt; = 8'b00001000,
                     &lt;state5&gt; = 8'b00010000,
                     &lt;state6&gt; = 8'b00100000,
                     &lt;state7&gt; = 8'b01000000,
                     &lt;state8&gt; = 8'b10000000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            default: begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
	    end
         endcase
							</Template>
							<Template label="16 States" treetype="template">
// The following contains SystemVerilog constructs and should not be used if using a tool that does not support this standard

   enum logic [15:0] {&lt;state1&gt;  = 16'b0000000000000001,
                      &lt;state2&gt;  = 16'b0000000000000010,
                      &lt;state3&gt;  = 16'b0000000000000100,
                      &lt;state4&gt;  = 16'b0000000000001000,
                      &lt;state5&gt;  = 16'b0000000000010000,
                      &lt;state6&gt;  = 16'b0000000000100000,
                      &lt;state7&gt;  = 16'b0000000001000000,
                      &lt;state8&gt;  = 16'b0000000010000000,
                      &lt;state9&gt;  = 16'b0000000100000000,
                      &lt;state10&gt; = 16'b0000001000000000,
                      &lt;state11&gt; = 16'b0000010000000000,
                      &lt;state12&gt; = 16'b0000100000000000,
                      &lt;state13&gt; = 16'b0001000000000000,
                      &lt;state14&gt; = 16'b0010000000000000,
                      &lt;state15&gt; = 16'b0100000000000000,
                      &lt;state16&gt; = 16'b1000000000000000} &lt;state&gt;;

   always @(posedge &lt;clock&gt;)
      if (&lt;reset&gt;) begin
         &lt;state&gt; &lt;= &lt;state1&gt;;
         &lt;outputs&gt; &lt;= &lt;initial_values&gt;;
      end
      else
         case (state)
            &lt;state1&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state2&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state3&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state4&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state5&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state6&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state7&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state8&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state9&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state10&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state11&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state12&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state13&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state14&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state15&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            &lt;state16&gt; : begin
               if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else if (&lt;condition&gt;)
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               else
                  &lt;state&gt; &lt;= &lt;next_state&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
            end
            default: begin  // Fault Recovery
               &lt;state&gt; &lt;= &lt;state1&gt;;
               &lt;outputs&gt; &lt;= &lt;values&gt;;
	    end
         endcase
							</Template>
						</SubFolder>
					</SubFolder>
				</SubFolder>
			</SubFolder>
		</SubFolder>
		<SubFolder label="Signal, Constant &amp; Variable Declarations" treetype="folder">
			<Template label="Enum" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
enum {&lt;name1&gt;, &lt;name2&gt;, &lt;ename3&gt;, ... &lt;namex&gt;} &lt;enum_name&gt;;
			</Template>
			<Template label="Info (Choosing the correct data type)" treetype="template">
//  Choosing the correct data type

//  The following provides some guidance in choosing the proper data type. The first thing to understand is
//  if all tools that will use this code (synthesis, simulator, linters, etc.) is SystemVerilog
//  compliant or needs Verilog-2001 constructs.  If SystemVerilog is available, it is suggested to move to
//  the newer constructs when possible.  Also it should be early established if using signed or unsigned
//  types.  If the desired code is using signed arithmetic, particularly when targeting the DSP48 multiplication,
//  signed data types are generally preferred where in most all other cases, unsigned is easier and preferred.

//  If declaring a signal in which will connect to an output of an instantiated component, use the wire type:

//  Signed:
wire signed [31:0] data_bus;
// Unsigned:
wire [31:0] data_bus;

//  If declaring a signal that will infer a register, latch, SRL or memory using an always block, use an
//  initialized reg type:

//  Signed:
reg signed [15:0] my_reg = 16'shffff;
// Unsigned:
reg [15:0] my_reg = 16'hffff;

//  Xilinx highly suggests to initialize all inferred registers and memories as it is fully synthesizable
//  and makes RTL simulation results more closely match hardware programming.

//  If declaring a signal that is used in a combinatorial always block, for SystemVerilog it is suggested
//  to use the logic data type:

logic unregistered_logic_sig;

//  If using Verilog-2001, select an uninitialized reg data type:

reg unregistered_logic_sig;

//  It is not suggested to initialize signals that will not become a register or memory as that is generally
//  not synthesizable.  In terms of the SystemVerilog logic type vs. the Verilog-2001 reg type, the two are
//  equivalent in terms of behavior however the logic type better communicates the intent it will later become
//  logic rather than a register.

//  If declaring a variable like an integer for a for loop, for SystemVerilog, the int type can be used:

int i;

//  or for Verilog-2001, the integer type:

integer i;

//  The SystemVerilog int type is equivalent to the Verilog-2001 integer type.

//  SystemVerilog allows the declaration of enumerated types.  These are useful in defining state-machines or
//  other processing code without implicitly defining regster encoding.  This also makes such code more readable
//  and easier to debug.  An example of this is as follows:

enum {RESET, FIND_FIRST_PATTERN, FIND_SECOND_PATTERN, REACT, START_OVER} state_machine;

//  In order to define a constant in the code that is intended to be overridden by the module that instantiates it, use a parameter:

parameter WIDTH = 8;

//  To define a constant that will not be overridden, use localparam:

localparam Pi = 3.14159265;

//  For more information on parameters, refer to the Info section of the Parameter folder.
			</Template>
			<SubFolder label="integer" treetype="folder">
				<Template label="32-bit signed integer (int)" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
int &lt;name&gt;;
				</Template>
			</SubFolder>
			<SubFolder label="logic" treetype="folder">
				<SubFolder label="Uninitialized" treetype="folder">
					<Template label="1-bit" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
logic &lt;name&gt;;
					</Template>
					<Template label="2-bit" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
logic [1:0] &lt;name&gt;;
					</Template>
					<Template label="3-bit" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
logic [2:0] &lt;name&gt;;
					</Template>
					<Template label="4-bit" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
logic [3:0] &lt;name&gt;;
					</Template>
					<Template label="8-bit" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
logic [7:0] &lt;name&gt;;
					</Template>
					<Template label="16-bit" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
logic [15:0] &lt;name&gt;;
					</Template>
					<Template label="32-bit" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
logic [31:0] &lt;name&gt;;
					</Template>
					<Template label="64-bit" treetype="template">
// The following is a SystemVerilog construct and should not be used if using a tool that does not support this standard
logic [63:0] &lt;name&gt;;
					</Template>
				</SubFolder>
			</SubFolder>
		</SubFolder>
		<SubFolder label="System Tasks &amp; Functions" treetype="folder">
			<Template label="Log base 2 ($clog2)" treetype="template">
// The following is a SystemVerilog function and should not be used if using a tool that does not support this standard
   $clog2(&lt;integer&gt;);
			</Template>
		</SubFolder>
	</Folder>
</RootFolder>
