###############################################################################
# impact.acd, iMPACT base level data file.
#
# $Header: /devl/xcs/repo/env/Jobs/iMPACT/data/impact.acd,v 1.355 2012/11/01 10:09:58 kkorath Exp $
#
###############################################################################

###############################
# Bitreader                   #
###############################
VENTRY_CREATE_BIT_READER  =   ("create_bit_reader(const char *name)","ImpactBitReader"); 
VENTRY_CREATE_BIT_WRITER  =   ("create_bit_writer(const char *name","const char *part","ConfigDataReader *)","ImpactBitReader"); 

###############################
# Bitreader                   #
###############################
VENTRY_CREATE_KEY_READER  =   ("create_key_reader(const char *name)","ImpactBitReader"); 

###############################
# Jedecreader                 #
###############################
VENTRY_CREATE_JEDEC_READER  =   ("create_jedec_reader(const char *name)","ImpactJedecReader"); 
VENTRY_CREATE_JEDEC_WRITER  =   ("create_jedec_writer(const char *name","const char *part)","ImpactJedecReader"); 

###############################
# IscReader                   #
###############################
VENTRY_CREATE_ISC_READER  =   ("create_isc_reader(const char *name)","ImpactIscReader"); 

###############################
# Promreader                  #
###############################
VENTRY_CREATE_PROM_READER  =   ("create_prom_reader(const char *name)","ImpactPromReader"); 
VENTRY_CREATE_PROM_WRITER  =   ("create_prom_writer(const char *name)","ImpactPromReader"); 

###############################
# ComboReader                 #
###############################
VENTRY_CREATE_COMBO_READER  =   ("create_combo_reader(const char *name","const char *bmm)","ImpactComboReader"); 

###############################
#  GenericReader	      #
##############################
VENTRY_CREATE_GENERIC_READER  =   ("create_generic_reader(const char *name)","ImpactGenericReader"); 

###############################
# Generic Devices             #
###############################
VENTRY_CREATE_SS_DEVICE  =   ("create_ss_device(const char *part)","ImpactDevice"); 
VENTRY_CREATE_BS_DEVICE  =   ("create_bs_device(const char* part)","ImpactDevice"); 
VENTRY_CREATE_BSFILE_DEVICE  =   ("create_bs_device(const char* part)","ImpactDevice"); 
VENTRY_CREATE_HW140_DEVICE  =   ("create_bs_device(const char* part)","ImpactDevice"); 
VENTRY_CREATE_ISC_BS_DEVICE  =   ("create_isc_bs_device(const char* part)","Impact1532Device"); 
VENTRY_CREATE_CF_DEVICE  =   ("create_bs_device(const char* part)","ImpactDevice"); 
VENTRY_CREATE_MPM_DEVICE  =   ("create_generic_device(const char* part)","ImpactDevice"); 
VENTRY_CREATE_PFF_DEVICE  =   ("create_generic_device(const char* part)","ImpactDevice"); 
VENTRY_CREATE_FILE_DEVICE  =   ("create_file_device(const char* part)","ImpactDevice"); 
VENTRY_CREATE_BPI_DEVICE  =   ("create_microblaze_bpi_device(const char* part)","ImpactDevice"); 
VENTRY_CREATE_SPI_TYPE1_DEVICE  =   ("create_type1_spi_device(const char* part)","ImpactType1SPIDevice"); 
VENTRY_CREATE_SPI_TYPE2_DEVICE  =   ("create_type2_spi_device(const char* part)","ImpactType2SPIDevice"); 
VENTRY_CREATE_SPI_TYPE3_DEVICE  =   ("create_type3_spi_device(const char* part)","ImpactType3SPIDevice"); 
VENTRY_CREATE_JTAGBPI_TYPE1_DEVICE  =   ("create_type1_bpi_device(const char* part)","ImpactType1BPIDevice"); 
VENTRY_CREATE_JTAGBPI_TYPE2_DEVICE  =   ("create_type2_bpi_device(const char* part)","ImpactType2BPIDevice"); 
VENTRY_CREATE_JTAGBPI_TYPE3_DEVICE  =   ("create_type3_bpi_device(const char* part)","ImpactType3BPIDevice"); 

###############################
# ConcurrentChains            #
###############################
VENTRY_CREATE_CCPromChain    =   ("create_ccpromchain (const char *chain)","ImpactCCPromChain"); 
VENTRY_CREATE_CCSTPromChain  =   ("create_ccstpromchain(const char*chain)","ImpactCCPromChain"); 
VENTRY_CREATE_CC9500Chain    =   ("create_cc9500chain (const char *chain)","ImpactCC9500Chain"); 
VENTRY_CREATE_CC9500XLChain  =   ("create_cc9500xlchain (const char *chain)","ImpactCC9500XLChain"); 
VENTRY_CREATE_CCXpla3Chain   =   ("create_ccxpla3chain (const char *chain)","ImpactCCXpla3Chain"); 
VENTRY_CREATE_CC9500XVChain  =   ("create_cc9500xvchain (const char *chain)","ImpactCC9500XLChain"); 
VENTRY_CREATE_CCXbrChain     =   ("create_ccxbrchain (const char *chain)","ImpactCCXpla3Chain"); 
VENTRY_CREATE_CCIscChain     =   ("create_cciscchain (const char *chain)","ImpactCCIscChain"); 
VENTRY_CREATE_CCChain        =   ("create_ccchain (const char *chain)","ImpactDeviceChain"); 

###############################
# ConfigDevice                #
###############################
VENTRY_CREATE_ACECF_CONFIG_DEVICE   =   ("create_AceCF_config_device(const char *","const char *","unsigned int)","ImpactAceCF"); 
VENTRY_CREATE_PFF_CONFIG_DEVICE  =   ("create_PFF_config_device(const char *","const char *","unsigned int)","ImpactPFF"); 
VENTRY_CREATE_ACEMPM_CONFIG_DEVICE  =   ("create_AceMPM_config_device(const char *","const char *","unsigned int)","ImpactAceMPM"); 

###############################
# ModeInterface               #
###############################
VENTRY_CREATE_CONFIG_BS_MODE_INTERFACE   =   ("create_devicechain_interface(enum","const char *","const char *","unsigned int)","ImpactDeviceChainInterface"); 
VENTRY_CREATE_CONFIG_SS_MODE_INTERFACE   =   ("create_devicechain_interface(enum","const char *","const char *","unsigned int)","ImpactDeviceChainInterface"); 
VENTRY_CREATE_CONFIG_SM_MODE_INTERFACE   =   ("create_devicechain_interface(enum","const char *","const char *","unsigned int)","ImpactDeviceChainInterface"); 
VENTRY_CREATE_CONFIG_BSFILE_MODE_INTERFACE   =   ("create_devicechain_interface(enum","const char *","const char *","unsigned int)","ImpactDeviceChainInterface"); 
VENTRY_CREATE_CONFIG_HW140_MODE_INTERFACE   =   ("create_devicechain_interface(enum","const char *","const char *","unsigned int)","ImpactDeviceChainInterface"); 
VENTRY_CREATE_CONFIG_SPI_MODE_INTERFACE   =   ("create_devicechain_interface(enum","const char *","const char *","unsigned int)","ImpactDeviceChainInterface"); 
VENTRY_CREATE_CONFIG_ACECF_MODE_INTERFACE   =   ("create_cf_mode_interface(enum","const char *","const char *","unsigned int)","ImpactAceCFInterface"); 
VENTRY_CREATE_CONFIG_ACEMPM_MODE_INTERFACE   =   ("create_mpm_mode_interface(enum","const char *","const char *","unsigned int)","ImpactAceMPMInterface"); 
VENTRY_CREATE_CONFIG_PFF_MODE_INTERFACE   =   ("create_pff_mode_interface(enum","const char *","const char *","unsigned int)","ImpactPFFModeInterface"); 

###############################
# Processor                   #
###############################
VENTRY_CREATE_POWERPC_PROCESSOR   =   ("create_powerpc_processor(unsigned int","unsigned int","BSOperation *)","ImpactProcessor"); 
VENTRY_CREATE_PPC440_PROCESSOR   =   ("create_ppc440_processor(unsigned int","unsigned int","BSOperation *)","ImpactProcessor"); 

###############################################################################
#    Constraints Related                                                      #
###############################################################################

############################################
# Full list of devices supported by iMPACT #
############################################
DEVICE_SUPPORTED =   ("base","xc18v00","acecf","xcf","xcfp","xc9500","xc9500xl","xc9500xv","xpla3","xbr","xa9500xl","acr2","spartan","spartan2","spartan3","spartanxl","spartan2e","spartan3e","aspartan3a","spartan3a","spartan3adsp","aspartan3adsp","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","xc4000e","xc4000ex","xc4000l","xc4000xl","xc4000xla","xc4000xv","xc5200","acempm","fpgacore","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","qvirtex4","qrvirtex4","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","virtex6","virtex6l","qvirtex2","qrvirtex2","qvirtexe","spi","bpi","xc3s50an","xc3s200an","xc3s400an","xc3s700an","xc3s1400an","xc3s1800an","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 

PROGRAM_OPTION_PACKAGE =   ("base","xc18v00","acecf","xcf","xcfp","xc9500","xc9500xl","xc9500xv","xpla3","xbr","xa9500xl","acr2","spartan","spartan2","spartan3","spartanxl","spartan2e","spartan3e","spartan3a","aspartan3a","spartan3adsp","aspartan3adsp","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","xc4000e","xc4000ex","xc4000l","xc4000xl","xc4000xla","xc4000xv","xc5200","fpgacore","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","virtex6","virtex6l","xc18v01pc20","xc18v01so20","xc18v512pc20","xc18v512so20","xc18v128pc20","xc18v128so20","acempm","qvirtex2","qrvirtex2","qvirtex4","qrvirtex4","qvirtexe","spi","bpi","xc3s50an","xc3s200an","xc3s400an","xc3s700an","xc3s1400an","xc3s1800an","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); ###
## This list is a super set of DEVICE_SUPPORTED list. anything is there, has to be here.

IDCODE = {
  xxxxxxxxxxxxxxxxxxxx000010010011 = "xilinx"; 
  xxxxxxxxxxxxxxxxxxxx000000101011 = "coolrunner"; 
  xxxx1010000000000001000010010011 = "xccace"; 
  xxxx10010101xxxxxxxx000010010011 = "xc9500"; 
#  00101001010100000010000010010011 = "xc9536"; 
  xxxx1001010100000010000010010011 = "xc9536_unsupported"; 
#  00101001010100000100000010010011 = "xc9572"; 
  xxxx1001010100000100000010010011 = "xc9572_unsupported"; 
#  00101001010100000110000010010011 = "xc95108"; 
  xxxx1001010100000110000010010011 = "xc95108_unsupported"; 
#  00101001010100001000000010010011 = "xc95144"; 
  xxxx1001010100001000000010010011 = "xc95144_unsupported"; 
#  00101001010100010010000010010011 = "xc95216"; 
  xxxx1001010100001100000010010011 = "xc95216_unsupported"; 
#  00101001010100010110000010010011 = "xc95288"; 
  xxxx1001010100010000000010010011 = "xc95288_unsupported"; 
  xxxx10010110xxxxxxxx000010010011 = "xc9500xl"; 
  xxxx1001011000000010000010010011 = "xc9536xl"; 
  xxxx1001011100000010000010010011 = "xc9536xv"; 
  xxxx1001011000000100000010010011 = "xc9572xl"; 
  xxxx1001011100000100000010010011 = "xc9572xv"; 
  xxxx1001011000000110000010010011 = "xc95108xl"; 
  xxxx1001011000001000000010010011 = "xc95144xl"; 
  xxxx1001011100001000000010010011 = "xc95144xv"; 
  xxxx1001011000001100000010010011 = "xc95216xl"; 
  xxxx1001011000010110000010010011 = "xc95288xl"; 
  xxxx1001011100010110000010010011 = "xc95288xv"; 
  xxxx0101000001000110000010010011 = "xcf04s"; 
  xxxx0101000001000101000010010011 = "xcf02s"; 
  xxxx0101000001000100000010010011 = "xcf01s"; 
  xxxx0101000001011001000010010011 = "xcf32p"; 
  xxxx0101000001011000000010010011 = "xcf16p"; 
  xxxx0101000001010111000010010011 = "xcf08p"; 
  xxxx0101000000100110000010010011 = "xc18v04"; 
  xxxx0101000000110110000010010011 = "xc18v04"; 
  xxxx0101000000000110000010010011 = "xc1804"; 
  xxxx0101000000100101000010010011 = "xc18v02"; 
  xxxx0101000000110101000010010011 = "xc18v02"; 
  xxxx0101000000000101000010010011 = "xc1802"; 
  xxxx0101000000100100000010010011 = "xc18v01"; 
  xxxx0101000000110100000010010011 = "xc18v01"; 
  xxxx0101000000000100000010010011 = "xc1801"; 
  xxxx0101000000100011000010010011 = "xc18v512"; 
  xxxx0101000000110011000010010011 = "xc18v512"; 
  xxxx0101000000000011000010010011 = "xc18512"; 
  xxxx0101000000100010000010010011 = "xc18v256"; 
  xxxx0101000000110010000010010011 = "xc18v256"; 
  xxxx0101000000000010000010010011 = "xc18256"; 
  xxxx0110110000011xxx000010010011 = "xc2c32"; 
  xxxx0110111000011xxx000010010011 = "xc2c32a"; 
  xxxx0110110001011xxx000010010011 = "xc2c64"; 
  xxxx0110111001011xxx000010010011 = "xc2c64a"; 
  xxxx0110110110001xxx000010010011 = "xc2c128"; 
  xxxx0110110101001xxx000010010011 = "xc2c256"; 
  xxxx0110110101011xxx000010010011 = "xc2c384"; 
  xxxx0110110101111xxx000010010011 = "xc2c512"; 
  xxxx0110111000011xxx100010010011 = "xa2c32a"; 
  xxxx0110111001011xxx100010010011 = "xa2c64a"; 
  xxxx0110110110001xxx100010010011 = "xa2c128"; 
  xxxx0110110101001xxx100010010011 = "xa2c256"; 
  xxxx0110110101011xxx100010010011 = "xa2c384"; 
  xxxx0100100000001xxx000010010011 = "xcr3032xl"; 
  xxxx0100100001001xxx000000101011 = "xcr3064xl"; 
  xxxx0100100001001xxx000010010011 = "xcr3064xl"; 
  xxxx0100100010001xxx000000101011 = "xcr3128xl"; 
  xxxx0100100010001xxx000010010011 = "xcr3128xl"; 
  xxxx0100100101001xxx000000101011 = "xcr3256xl"; 
  xxxx0100100101001xxx000010010011 = "xcr3256xl"; 
  xxxx0100100101011xxx000010010011 = "xcr3384xl"; 
  xxxx0100100101111xxx000010010011 = "xcr3512xl"; 
#  0xxx0000011000010100000010010011 = "xcv100"; 
  xxxx0000011001000000000010010011 = "xcv1000"; 
#  0xxx0000011000011000000010010011 = "xcv150"; 
#  0xxx0000011000011100000010010011 = "xcv200"; 
  xxxx0000011000100000000010010011 = "xcv300"; 
  xxxx0000011000101000000010010011 = "xcv400"; 
#  0xxx0000011000010000000010010011 = "xcv50"; 
  xxxx0000011000110000000010010011 = "xcv600"; 
  xxxx0000011000111000000010010011 = "xcv800"; 
#  xxxx0001000000001000000010010011 = (
#    "xc2v40", 
#    "xc2v40"
#  );
#  xxxx0001000000101000000010010011 = (
#    "xc2v1000", 
#    "xc2v1000"
#  );
  xxxx0001000000110000000010010011 = "xc2v1500"; 
#  xxxx0001000000011000000010010011 = (
#    "xc2v50", 
#    "xc2v250"
#  );
#  xxxx0001000001000000000010010011 = (
#    "xc2v3000", 
#    "xc2v3000"
#  );
  xxxx0001000001010000000010010011 = "xc2v4000"; 
#  xxxx0001000001100000000010010011 = (
#    "xc2v6000", 
#    "xc2v6000"
#  );
  xxxx0001000001110000000010010011 = "xc2v8000"; 
#  xxxx0000101000010000000010010011 = (
#    "xc2s50e", 
#    "xcv50e"
#  );
#  xxxx0000101000010100000010010011 = (
#    "xc2s100e", 
#   "xcv100e"
#  );
  xxxx0000101000011000000010010011 = "xc2s150e"; 
#  xxxx0000101000011100000010010011 = (
#    "xc2s200e", 
#    "xcv200e"
#  );
#  xxxx0000101000100000000010010011 = (
#    "xc2s300e", 
#    "xcv300e"
#  );
#  xxxx0000101000101000000010010011 = (
#    "xc2s400e", 
#    "xcv400e"
#  );
#  xxxx0000101000110000000010010011 = (
#   "xc2s600e", 
#    "xcv600e"
#  );
  xxxx0000101001000000000010010011 = "xcv1000e"; 
  xxxx0000101001001000000010010011 = "xcv1600e"; 
  xxxx0000101001010000000010010011 = "xcv2000e"; 
  xxxx0000101001011100000010010011 = "xcv2600e"; 
  xxxx0000101001101000000010010011 = "xcv3200e"; 
  xxxx0000110000101000000010010011 = "xcv405e"; 
  xxxx0001100001100110000010010011 = "xc2vpx20"; 
  xxxx0001100010111010000010010011 = "xc2vpx70"; 
  xxxx0001001xxxxxxxxx000010010011 = "xc2vpxx"; 
  xxxx0001001000100110000010010011 = "xc2vp2"; 
  xxxx0001001000101110000010010011 = "xc2vp3"; 
  xxxx0001001000111110000010010011 = "xc2vp4"; 
  xxxx0001001001001010000010010011 = "xc2vp7"; 
  xxxx0001001001011010000010010011 = "xc2vp10"; 
  xxxx0001001001100110000010010011 = "xc2vp20"; 
  xxxx0001001001111110000010010011 = "xc2vp30"; 
  xxxx0001001010010010000010010011 = "xc2vp40"; 
  xxxx0001001010011110000010010011 = "xc2vp50"; 
  xxxx0001001010111010000010010011 = "xc2vp70"; 
  xxxx0001001011010110000010010011 = "xc2vp100"; 
  xxxx0001001011110000000010010011 = "xc2vp125"; 
  xxxx0000110000111000000010010011 = "xcv812e"; 
  xxxx0000001000011000000010010011 = "xc4013xla"; 
  xxxx0000001000011100000010010011 = "xc4020xla"; 
  xxxx0000001000100000000010010011 = "xc4028xla"; 
  xxxx0000001000100100000010010011 = "xc4036xla"; 
  xxxx0000001000101000000010010011 = "xc4044xla"; 
  xxxx0000001000101100000010010011 = "xc4052xla"; 
  xxxx0000001000110000000010010011 = "xc4062xla"; 
  xxxx0000001000111000000010010011 = "xc4085xla"; 
  xxxx0000111001000000000010010011 = "xc40110xv"; 
  xxxx0000111001001000000010010011 = "xc40150xv"; 
  xxxx0000111001010100000010010011 = "xc40200xv"; 
  xxxx0000111001011100000010010011 = "xc40250xv"; 
  xxxx0000010000001010000010010011 = "xcs05xl"; 
  xxxx0000010000001110000010010011 = "xcs10xl"; 
  xxxx0000010000010100000010010011 = "xcs20xl"; 
  xxxx0000010000011000000010010011 = "xcs30xl"; 
  xxxx0000010000011100000010010011 = "xcs40xl"; 
#  1xxx0000011000010100000010010011 = "xc2s100"; 
#  1xxx0000011000001000000010010011 = "xc2s15"; 
#  1xxx0000011000011000000010010011 = "xc2s150"; 
#  1xxx0000011000011100000010010011 = "xc2s200"; 
#  1xxx0000011000001100000010010011 = "xc2s30"; 
#  1xxx0000011000010000000010010011 = "xc2s50"; 
  xxxx0001000000010000000010010011 = "xc2v80"; 
  xxxx0001000000100000000010010011 = "xc2v500"; 
  xxxx0001000000111000000010010011 = "xc2v2000"; 
  xxxx0001010000101000000010010011 = "xc3s1000"; 
  xxxx0001010000110100000010010011 = "xc3s1500"; 
  xxxx0001010000010100000010010011 = "xc3s200"; 
  xxxx0001010001000000000010010011 = "xc3s2000"; 
  xxxx0001010000011100000010010011 = "xc3s400"; 
  xxxx0001010000001101000010010011 = "xc3s50"; 
  xxxx0001010001001000000010010011 = "xc3s4000"; 
  xxxx0001010001010000000010010011 = "xc3s5000"; 
  xxxx0001110000010000000010010011 = "xc3s100e"; 
  xxxx0001110000011010000010010011 = "xc3s250e"; 
  xxxx0001110000100010000010010011 = "xc3s500e"; 
  xxxx0001110000101110000010010011 = "xc3s1200e"; 
  xxxx0001110000111010000010010011 = "xc3s1600e"; 
  xxxx0010011000010000000010010011 = "xc3s50an"; 
  xxxx0010001000010000000010010011 = "xc3s50a"; 
  xxxx0010011000011000000010010011 = "xc3s200an"; 
  xxxx0010001000011000000010010011 = "xc3s200a"; 
  xxxx0010011000100000000010010011 = "xc3s400an"; 
  xxxx0010001000100000000010010011 = "xc3s400a"; 
  xxxx0010011000101000000010010011 = "xc3s700an"; 
  xxxx0010001000101000000010010011 = "xc3s700a"; 
  xxxx0010011000110000000010010011 = "xc3s1400an"; 
  xxxx0010001000110000000010010011 = "xc3s1400a"; 
  xxxx0010011001001100000010010011 = "xc3s1800an"; 
  xxxx0010001001001100000010010011 = "xc3s1800a"; 
  xxxx0011100001000000000010010011 = "xc3sd1800a"; 
  xxxx0011100001001110000010010011 = "xc3sd3400a"; 
  xxxx0100000000000000000010010011 = "xc6slx4"; 
  xxxx0100000000000001000010010011 = "xc6slx9"; 
  xxxx0100000000000010000010010011 = "xc6slx16"; 
  xxxx0100000000000100000010010011 = "xc6slx25"; 
  xxxx0100000000100100000010010011 = "xc6slx25t"; 
  xxxx0100000000001000000010010011 = "xc6slx45"; 
  xxxx0100000000101000000010010011 = "xc6slx45t"; 
  xxxx0100000000001110000010010011 = "xc6slx75"; 
  xxxx0100000000101110000010010011 = "xc6slx75t"; 
  xxxx0100000000010001000010010011 = "xc6slx100"; 
  xxxx0100000000110001000010010011 = "xc6slx100t"; 
  xxxx0100000000011101000010010011 = "xc6slx150"; 
  xxxx0100000000111101000010010011 = "xc6slx150t"; 
  xxxx0001011001011000000010010011 = "xc4vlx15"; #01658093
  xxxx0001011001111100000010010011 = "xc4vlx25"; #0167C093
#  1xxx0001011001111100000010010011 = "xc4vlx25"; #8167C093  TOSHIBA
  xxxx0001011010100100000010010011 = "xc4vlx40"; #016A4093
  xxxx0001011010110100000010010011 = "xc4vlx60"; #016B4093
  xxxx0001011011011000000010010011 = "xc4vlx80"; #016D8093
  xxxx0001011100000000000010010011 = "xc4vlx100"; #01700093
  xxxx0001011100011000000010010011 = "xc4vlx160"; #01718093
  xxxx0001011100110100000010010011 = "xc4vlx200"; #01734093
  xxxx0001011101111000000010010011 = "xc4vlx300"; #01778093
  xxxx0010000001101000000010010011 = "xc4vsx25"; #02068093
  xxxx0010000010001000000010010011 = "xc4vsx35"; #02088093
  xxxx0010000010110000000010010011 = "xc4vsx55"; #020B0093
  xxxx0001111001011000000010010011 = "xc4vfx12"; #01E58093
  xxxx0001111001100100000010010011 = "xc4vfx20"; #01E64093
  xxxx0001111010001100000010010011 = "xc4vfx40"; #01E8C093
  xxxx0001111010110100000010010011 = "xc4vfx60"; #01EB4093
  xxxx0001111011100100000010010011 = "xc4vfx100"; #01EE4093
  xxxx0001111100010100000010010011 = "xc4vfx140"; #01F14093
  xxxx1100xxxxxxxxxxxx000001001001 = "fpgacore_ibm_asic"; 
  xxxx0010100001101110000010010011 = "xc5vlx30"; 
  xxxx0010100010010110000010010011 = "xc5vlx50"; 
  xxxx0010100010101110000010010011 = "xc5vlx85"; 
  xxxx0010100011010110000010010011 = "xc5vlx110"; 
  xxxx0010100011101100000010010011 = "xc5vlx155"; 
  xxxx0010100100001100000010010011 = "xc5vlx220"; 
  xxxx0010100101011100000010010011 = "xc5vlx330"; 
  xxxx0010101001010110000010010011 = "xc5vlx20t"; 
  xxxx0010101001101110000010010011 = "xc5vlx30t"; 
  xxxx0010101010010110000010010011 = "xc5vlx50t"; 
  xxxx0010101010101110000010010011 = "xc5vlx85t"; 
  xxxx0010101011010110000010010011 = "xc5vlx110t"; 
  xxxx0010101011101100000010010011 = "xc5vlx155t"; 
  xxxx0010101100001100000010010011 = "xc5vlx220t"; 
  xxxx0010101101011100000010010011 = "xc5vlx330t"; 
  xxxx0011001001110110000010010011 = "xc5vfx30t"; 
  xxxx0011001011000110000010010011 = "xc5vfx70t"; 
  xxxx0011001011011000000010010011 = "xc5vfx100t"; 
  xxxx0011001100000000000010010011 = "xc5vfx130t"; 
  xxxx0011001100110100000010010011 = "xc5vfx200t"; 
  xxxx0010111001110010000010010011 = "xc5vsx35t"; 
  xxxx0010111010011010000010010011 = "xc5vsx50t"; 
  xxxx0010111011001110000010010011 = "xc5vsx95t"; 
  xxxx0010111100111110000010010011 = "xc5vsx240t"; 
  xxxx0100010100000010000010010011 = "xc5vtx150t"; 
  xxxx0100010100111110000010010011 = "xc5vtx240t"; 
  xxxx0011101100000000000010010011 = "xqr5vfx130"; 
  xxxx0100001000111010000010010011 = "xc6vlx760"; 
  xxxx0100001001000000000010010011 = "xc6vlx40t"; 
  xxxx0100001001000100000010010011 = "xc6vlx75t"; 
  xxxx0100001001001000000010010011 = "xc6vlx115t"; 
  xxxx0100001001001010000010010011 = "xc6vlx130t"; 
  xxxx0100001001001100000010010011 = "xc6vlx195t"; 
  xxxx0100001001010000000010010011 = "xc6vlx240t"; 
  xxxx0100001001010010000010010011 = "xc6vlx365t"; 
  xxxx0100001001010110000010010011 = "xc6vlx550t"; 
  xxxx0100001010000110000010010011 = "xc6vsx315t"; 
  xxxx0100001010001000000010010011 = "xc6vsx475t"; 
  xxxx0100001010100000000010010011 = "xc6vhx45t"; 
  xxxx0100001010100010000010010011 = "xc6vhx250t"; 
  xxxx0100001010100100000010010011 = "xc6vhx255t"; 
  xxxx0100001010101000000010010011 = "xc6vhx380t"; 
  xxxx0100001010101100000010010011 = "xc6vhx565t"; 
  xxxx0100001011000100000010010011 = "xc6vcx75t"; 
  xxxx0100001011001010000010010011 = "xc6vcx130t"; 
  xxxx0100001011001100000010010011 = "xc6vcx195t"; 
  xxxx0100001011010000000010010011 = "xc6vcx240t"; 
  xxxx0011011000110001000010010011 = "XC7A100T"; 
  xxxx0011011000110110000010010011 = "XC7A200T"; 
  xxxx0011011001000111000010010011 = "xc7k70t"; 
  xxxx0011011001001100000010010011 = "xc7k160t"; 
  xxxx0011011001010001000010010011 = "xc7k325t"; 
  xxxx0011011101000111000010010011 = "xc7k355t"; 
  xxxx0011011001010110000010010011 = "xc7k410t"; 
  xxxx0011011101010010000010010011 = "xc7k420t"; 
  xxxx0011011101010001000010010011 = "xc7k480t"; 
  xxxx0011011001110001000010010011 = "xc7v585t"; 
  xxxx001101101011xx11000010010011 = "xc7v2000t"; 
  xxxx0011011001100111000010010011 = "xc7vx330t"; 
  xxxx0011011010000010000010010011 = "xc7vx415t"; 
  xxxx0011011010000111000010010011 = "xc7vx485t"; 
  xxxx0011011010010010000010010011 = "xc7vx550t"; 
  xxxx0011011010010001000010010011 = "xc7vx690t"; 
  xxxx0011011010010110000010010011 = "XC7VX980T"; 
  xxxx0011011011010101000010010011 = "XC7VX1140T"; 
  xxxx0011011011011001000010010011 = "XC7VH580T"; 
  xxxx0011011011011011000010010011 = "XC7VH870T"; 
  xxxx0011011011011101000010010011 = "xc7vs001t"; 
  xxxx0011011100100010000010010011 = "xc7z010"; 
  xxxx0011011100100111000010010011 = "xc7z020"; 
  xxxx0011011100101100000010010011 = "xc7z030"; 
  xxxx0011011100110001000010010011 = "xc7z045"; 
#  01001011101000000000010001110111 = "zynq7000_arm_dap"; 
  xx0011xxxx0011xx = "at45db011b"; 
  xx0101xxxx0101xx = "at45db021b"; 
  xx0111xxxx0111xx = "at45db041b"; 
  xx1001xxxx1001xx = "at45db081b"; 
  xx1011xxxx1011xx = "at45db161b"; 
  xx1101xxxx1101xx = "at45db321c"; 
#  000xxxxx0010010000011111 = "at45db041d"; 
#  000xxxxx0010010100011111 = "at45db081d"; 
#  000xxxxx0010011000011111 = "at45db161d"; 
#  000xxxxx0010011100011111 = "at45db321d"; 
#  000xxxxx0010100000011111 = "at45db642d"; 
#  000100000010000000100000 = "m25p05a"; 
#  000100010010000000100000 = "m25p10a"; 
#  000100100010000000100000 = "m25p20"; 
#  000100110010000000100000 = (
#    "m25p40", 
#    "s25fl040a", 
#    "s25fl080a"
#  );
#  00010011 = "m25p80"; 
#  000101010010000000100000 = "m25p16"; 
#  000101100010000000100000 = "m25p32"; 
#  000110000010000000100000 = "m25p128"; 
#  000101110010000000100000 = "m25p64"; 
#  000100010100000000100000 = "m45pe10"; 
#  000100100100000000100000 = "m45pe20"; 
#  000100110100000000100000 = "m45pe40"; 
#  000101000100000000100000 = "m45pe80"; 
#  000100011000000000100000 = "m25pe10"; 
#  000100101000000000100000 = "m25pe20"; 
#  000100111000000000100000 = "m25pe40"; 
#  000101001000000000100000 = "m25pe80"; 
#  000000000000000000000001 = "28f128j3d"; 
  fff00xxx = "xccacem16"; 
  fff01xxx = "xccacem32"; 
  fff02xxx = "xccacem64"; 
};
MPM_CHECKSUM = {
#  001063d40 =     ("0010646a8","001059c0e","xccacem32"); 
#  00105d522 =     ("00106f4a1","0010620e8","xccacem64"); 
#  001063df7 =     (001064705,"001062069","xccacem16"); 
};

####################################
# Mode/Output/Device Dependencies  #
####################################
BS = {
  OUTPUT =     ("PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"); 
  FAMILY =     ("base","acecf","xc18v00","xcf","xcfp","xc9500","xc9500xl","xc9500xv","xpla3","xbr","xa9500xl","acr2","spartan","spartan2","spartan3","spartan2e","spartanxl","acempm","spartan3e","spartan3a","aspartan3a","spartan3adsp","aspartan3adsp","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","xc4000e","xc4000ex","xc4000l","xc4000xl","xc4000xla","xc4000xv","xc5200","fpgacore","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","virtex6","virtex6l","qvirtex2","qrvirtex2","qvirtex4","qrvirtex4","qvirtexe","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 
};
BSFILE = {
  OUTPUT =     ("SVF","STAPL"); 
  FAMILY =     ("base","acecf","xc18v00","xcf","xcfp","xc9500","xc9500xl","xc9500xv","xpla3","xbr","xa9500xl","acr2","spartan","spartan2","spartan3","spartan2e","spartanxl","acempm","spartan3e","spartan3a","aspartan3a","spartan3adsp","aspartan3adsp","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","xc4000e","xc4000ex","xc4000l","xc4000xl","xc4000xla","xc4000xv","xc5200","fpgacore","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","virtex4","qvirtex4","qrvirtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","virtex6","virtex6l","qvirtex2","qrvirtex2","qvirtexe","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 
};

HW140 = {
  OUTPUT = "PARALLEL"; 
  FAMILY =     ("base","xc18v00","acecf","xcf","xcfp","xc9500","xc9500xl","xc9500xv","xpla3","xbr","xa9500xl","acr2","spartan","spartan2","spartan3","spartan2e","spartanxl","acempm","spartan3e","spartan3a","aspartan3a","spartan3adsp","aspartan3adsp","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","xc4000e","xc4000ex","xc4000l","xc4000xl","xc4000xla","xc4000xv","xc5200","fpgacore","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","qvirtex4","qrvirtex4","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","virtex6","virtex6l","qvirtex2","qrvirtex2","qvirtexe","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 
};

SPI = {
  OUTPUT =     ("PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN"); 
  FAMILY = "spi"; 
};
# added base SS mode  to support prom files
SS = {
  OUTPUT =     ("PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN"); 
  FAMILY =     ("base","spartan","spartan2","spartan3","spartan2e","spartanxl","spartan3e","spartan3a","aspartan3a","spartan3adsp","aspartan3adsp","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","xc4000e","xc4000ex","xc4000l","xc4000xl","xc4000xla","xc4000xv","xc5200","fpgacore","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","qvirtex4","qrvirtex4","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","virtex6","virtex6l","qvirtex2","qrvirtex2","qvirtexe","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 
};

SM = {
  OUTPUT = "PARALLEL"; 
  FAMILY =     ("spartan2","spartan3","spartan2e","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","qvirtex4","qrvirtex4","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","virtex6","virtex6l","fpgacore","spartan3e","spartan3a","spartan3adsp","aspartan3adsp","aspartan3a","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","qvirtex2","qrvirtex2","qvirtexe","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 
};

ACECF = {
#OUTPUT = ; 
  FAMILY =     ("spartan2","spartan3","spartan2e","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex4","qrvirtex4","qvirtex2p","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","virtex6","virtex6l","fpgacore","spartan3e","spartan3a","spartan3adsp","aspartan3adsp","aspartan3a","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","qvirtex2","qrvirtex2","qvirtexe","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 
};


ACEMPM = {
#OUTPUT = ; 
  FAMILY =     ("spartan","spartan2","spartan3","spartan2e","spartanxl","spartan3e","spartan3a","spartan3adsp","aspartan3adsp","aspartan3a","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","xc4000e","xc4000ex","xc4000l","xc4000xl","xc4000xla","xc4000xv","xc5200","fpgacore","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","qvirtex4","qrvirtex4","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","virtex6","virtex6l","qvirtex2","qrvirtex2","qvirtexe","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 
};

PFF = {
#OUTPUT = ; 
  FAMILY =     ("spartan","spartan2","spartan3","spartan2e","spartanxl","spartan3e","spartan3a","spartan3adsp","aspartan3adsp","aspartan3a","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","xc4000e","xc4000ex","xc4000l","xc4000xl","xc4000xla","xc4000xv","xc5200","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","qvirtex4","qrvirtex4","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","fpgacore","virtex6","virtex6l","qvirtex2","qrvirtex2","qvirtexe","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 
};

########################################################
# These part_package combo are not supported in the mode listed
# MODE_PART_PACKAGE
# tested with SM_xc2s50e_ft256,
########################################################
NOT_SUPPORTED_PART_IN_MODE  =   ("SM_xc3s100e_vq100","SM_xc3s250e_vq100"); 

##############################################################################
# If a family is listed below, impact may update the clock setting
##############################################################################
CHECK_STARTUPCLK_SUPPORTED =   ("spartan2","spartan3","spartan2e","spartan3e","spartan3a","spartan3adsp","aspartan3adsp","aspartan3a","spartan6","aspartan6","spartan6l","qspartan6","qspartan6l","aspartan2e","aspartan3","aspartan3e","aspartan2e","aspartan3","aspartan3e","virtex","qvirtex","qrvirtex","virtexe","virtex2","virtex2p","qvirtex2p","qvirtex4","qrvirtex4","virtex4","virtex5","qrvirtex5","qvirtex5","qvirtex6","fpgacore","virtex6","virtex6l","qvirtex2","qrvirtex2","qvirtexe","artix7","aartix7","qartix7","virtex7","qvirtex7","kintex7","qkintex7","zynq","azynq","qzynq"); 


##############################################################################
# Command format strings
# After adding a format string, please make sure this file is not corrupted
# by running util_test in iMPACT/Utility
# command_name, batch_command, format_string
# assignFile,   TRUE,  "assignFile [-p|-position <pos>] [-file <filename>]"
##############################################################################
COMMAND_FORMAT = {
  program =     (TRUE,"program [-e|-erase] [-v|-verify] [-w|-writeProtect] [-r|-readProtect] [-u|-usercode|-ues <codeString>] [-t|-functest] [-c|-bit2mcs] {-ver <versionOptions> {<versionOptions>}} [-smoke] [-spi[<spiPartName>]] [-spionly] [-bpi [<bpiPartName>]] [-bpionly] [-turbo] [-inSystemUpdate] [-revisionSelectionOnly] [-word][-parallel] [-cascadeLowPower] [-noncascadeLowPower] [-skipua] [-useD4] [-loadfpga] [-selectMap8] [-internalClk] [-clkFreq <freq>] [-master] [-defaultVersion <verNum>] [-externalSelect] [-compressed] [-prog] [-noprog][-s|-secureMode] [-keyonly] [-key {<keyfile>}][-enableEncryptedReconfig]  [-p|-position <pos1> {<pos2>}] [-target] [-otf] [-noshutdown] [-nojprog] [-corefile <coreFileName>] [-isc][-fuse <type> {<arg>}] [-sectorprotect] [-sectorlockdown] [-otpsecurity] [-nobscanreg] [-onlyFpga] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-buffered] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  expresssvf =     (TRUE,"expresssvf [-p|-position <pos> {<pos2>} ] [-target] [-e|-erase] [-v|-verify] [-program] [-file <svfFileName>]"); 
  expressxsvf =     (TRUE,"expressxsvf [-p|-position <pos> {<pos2>} ][-target]  [-e|-erase] [-v|-verify] [-program] [-file <svfFileName>]"); 
  expressstapl =     (TRUE,"expressstapl [-p|-position <pos> {<pos2>} ] [-target] [-e|-erase] [-v|-verify] [-program] [-file <svfFileName>]"); 
  addbsdldevice =     (TRUE,"addBsdlDevice [-p|-position <pos>] [-part <partname>] [-irlength <num>]"); 
  adddevice =     (TRUE,"addDevice [-p|-position <pos>] [-sprom xc18v256|xc18v512|xc18v01|xc18v02|xc18v04|xcf01s|xcf02s|xcf04s|xcf32p|xcf16p|xcf08p] [-mpm xccacem16|xccacem32|xccacem64|xccacem128|xccacem16sc|xccacem32sc|xccacem64sc|xccacem16sc_v2|xccacem32sc_v2|xccacem64sc_v2] [-spi <spiPartName>] [-fpga xc3s50an|xc3s200an|xc3s400an|xc3s700an|xc3s1400an][-cs 0|1|2] [-file <filename>] [-part <partName>] [-bmm <bmmfile>] {-elf <elfname> {<tag_addrname>}} {-core <corePosition> <bitFile>}"); 
  attachflash =     (TRUE,"attachFlash [-p|-position <pos>] [-spi <spiPartName>] [ -bpi [<bpiPartName>]]"); 
  assignfiletoattachedflash =     (TRUE,"assignfiletoattachedflash [-p|-position <pos>] [-file <fileName>]"); 
  addadditionalconfigfile =     (TRUE,"addAdditionalConfigFile [-p|-position <pos>] {-elf|-file <elfname> {<tag_addrname>}} {-core <corePosition> <bitFile>}"); 
  clearadditionalconfigfiles =     (TRUE,"clearAdditionalConfigFiles [-p|-position <pos>] [-core <corePosition>]"); 
  addpromdevice =     (TRUE,"addPromDevice [-p|-position <pos>] [-size <sizeKBytes>] [-name <name>]"); 
  addconfigdevice =     (TRUE,"addConfigDevice [-mode cf|mpm|pff] [-size <size>] [-name <name>] [-path <path>]"); 
  addcollection =     (TRUE,"addCollection [-name <name>]"); 
  adddesign =     (TRUE,"addDesign [-version <versionNumber>] [-name|-designName|-startaddress <name>] [-rs <pin>] [-collection|-c <collectionName>] [-d|-down] [-data]"); 
  adddevicechain =     (TRUE,"addDeviceChain [-index|-csPin <chainNo>] [-d|-design|-startaddress <name>] [-c|-collection <collectionName>]"); 
  assignfile =     (TRUE,"assignFile [-p|-position <pos>] [-file <filename>]"); 
  deletedevice =     (TRUE,"deleteDevice [-p|-position <pos>] [-all] [-index <chainNo>] [-version <versionNo>] [-collection <collectionName>]"); 
  deletepromdevice =     (TRUE,"deletePromDevice [-p|-position <pos>]"); 
  deleteconfigdevice =     (TRUE,"deleteConfigDevice"); 
  deletecollection =     (TRUE,"deleteCollection [-name <name>]"); 
  deletedesign =     (TRUE,"deleteDesign [-version <versionNumber>] [-collection|-c <collectionName>]"); 
  deletedevicechain =     (TRUE,"deleteDeviceChain [-index|-csPin <chainNo>] [-version <versionNo>] [-collection <collectionaName>]"); 
  definedevice =     (TRUE,"defineDevice [-p|-position <pos>] [-ireg <length>] [-name <deviceName>]"); 
  cleancablelock =     (TRUE,"cleanCableLock"); 
  renamecollection =     (TRUE,"renameCollection [-name <oldname> <newName>]"); 
  renamebatchcmdfile =     (TRUE,"renameBatchCmdFile [-file <filename>]"); 
  renamePromFile =     (TRUE,"renamepromfile [-file <filename>]"); 
  renameMPMFile =     (TRUE,"renamempmfile [-file <filename>]"); 
  verify =     (TRUE,"verify  [-p|-position <pos1> {<pos2>}] [-target] [-otf|-sram] {-ver <version>} [-smoke] [-noshutdown] [-spi [<spiPartName>]] [-spionly] [-bpi [<bpiPartName>]] [-bpionly] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-word] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  functiontest =     (TRUE,"functionTest  [-p|-position <pos1> {<pos2>}][-target]"); 
  erase =     (TRUE,"erase [-o|-override] [-p|-position <pos1> {<pos2>}] [-target] [-otf] [-x] {-ver <version>} [-spi [<spiPartName>]] [-spionly] [-bpi [<bpiPartName>]] [-bpionly] [-turbo] [-revisionSelection] [-qebit] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-word] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-po2] [-zynq_fsbl <fsblFileName>]"); 
  setactiverevision =     (TRUE,"setActiveRevision [-p|-position <pos1> {<pos2>}] [-revision <index> ]"); 
  loadconfigurationrevision =     (TRUE,"loadConfigurationRevision [-p|-position <pos> {<pos2>}] [-ver <index> ]"); 
  blankcheck =     (TRUE,"blankCheck [-p|-position <pos1> {<pos2>}] [-target] [-otf] {-ver <version>} [-smoke] [-bpi [<bpiPartName>]] [-bpionly] [-spi [<spiPartName>]] [-spionly] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-o] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  readidcode =     (TRUE,"readIdcode [-p|-position <pos1> {<pos2>}] [-target] [-loop <loopCount>]"); 
  readdna =     (TRUE,"readDNA [-p|-position <pos1> {<pos2>}] [-target] [-dna <dna>]"); 
  readstatusregister =     (TRUE,"readStatusRegister [-p|-position <pos1> {<pos2>}][-target] [-fpga] [-flash] [-spi [<spiPartName>]] [-spionly] [-bpi [<bpiPartName>]] [-bpionly] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V]"); 
  readtemperatureandvoltage =     (TRUE,"readTemperatureAndVoltage [-p|-position <pos1> {<pos2>}][-target]"); 
  readefuse =     (TRUE,"readefuse [-p|-position <pos1>] [-target] [-aeskey|-uniqueid|-scratchpad|-control|-user|-dna] [-all_margins] [-testrow <value>] [-testctsdata <hexvalue>]"); 
  programefuse =     (TRUE,"programefuse [-p|-position <pos1>] [-aeskey|-uniqueid|-scratchpad|-control|-user|-aeskey_and_low_user|-high_user] [-low_value <hexvalue>] [-no_low_value] [-value <hexvalue> {<hexvalue2>}] [-no_value] [-key {<keyfile>}] [-no_key] [-high_value <hexvalue>]  [-skip_revisioning] [-skip_buffered_mode_change] [-program_control_reg_only] [-program_revision_only] [-program_revision_stop_bit] [-testrow <value>] [-testbit <value>] [-testctsdata <hexvalue>]"); 
  readefusecontrolreg =     (TRUE,"readefusecontrolreg [-p|-position <pos1>] [-target] [-all_margins]"); 
  setefusecontrolreg =     (TRUE,"setefusecontrolreg [-p|-position <pos1>] [-target] [-disableread <aeskey> {<uniqueid>} {<scratchpad>} {<control>} {<dna>} {<user>}] [-disablewrite <aeskey> {<uniqueid>} {<scratchpad>} {<control>} {<user>}] [-aesexclusive] [-useaesandefusekey] [-useaeskey] [-disablereadwrite <aeskey> {<control>}] [-zynq_efusesecureboot] [-zynq_jtagchaindisable] [-zynq_bbramkeydisable]"); 
  checkidcode =     (TRUE,"checkIdcode [-p|-position <pos1> {<pos2>}][-target]"); 
  checkintegrity =     (TRUE,"checkIntegrity [-p|-position <pos1>]"); 
  readusercode =     (TRUE,"readUsercode [-p|-position <pos1> {<pos2>}] [-target] [-u|-usercode <usercode>]"); 
  programusercode =     (TRUE,"programUsercode [-p|-position <pos1> {<pos2>}] [-u|-usercode <usercode>]"); 
  readmfgcode =     (TRUE,"readMfgcode [-p|-position <pos1> {<pos2>}][-target]"); 
  readsecurityregister =     (TRUE,"readsecurityregister [-p|-position <pos1> {<pos2>}] [-target] [-reg|-register oneTimeUserProgrammable|factoryId] [-file <filename>]"); 
  programsecurityregister =     (TRUE,"programsecurityregister [-p|-position <pos1> {<pos2>}] [-target] [-reg|-register oneTimeUserProgrammable] [-file <filename>]"); 
  readues =     (TRUE,"readUES [-p|-position <pos1> {<pos2>}] [-target] [-u|-ues <ues>]"); 
  programues =     (TRUE,"programUES [-p|-position <pos1> {<pos2>}] [-target] [-u|-ues <ues>]"); 
  readbacktofile =     (TRUE,"readbackToFile  [-p|-position <pos1> {<pos2>}] [-target] [-file <file>][-otf|-sram] [-smoke] [-spi <spiPartName>] [-bpi [<bpiPartName>]] [-bpionly] [-spionly] [-partial <startaddress> <numofbytes>] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-x] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-numberOfBytes <value>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  checksum =     (TRUE,"checksum [-p|-position <pos1> {<pos2>}] [-target] [-autoSignature] [-spi [<spiPartName>]] [-bpi [<bpiPartName>]] [-spionly] [-bpionly] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  reconfigureotf =     (TRUE,"reconfigureOTF [-p|-position <pos1> {<pos2>}]"); 
  readcustomercode =     (TRUE,"readCustomercode [-p|-position <pos1> {<pos2>}][-target]  {-ver <version>}"); 
  programcustomercode =     (TRUE,"programCustomercode [-position|-p <pos1> {<pos2>}] {-ver <versionOptions> {<versionOptions>}}"); 
  readpromoptions =     (TRUE,"readPromOptions [-p|-position <pos1> {<pos2>}][-target]"); 
  readcfi =     (TRUE,"readCFI [-p|-position <pos1>] [-bpionly] [-spionly] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V]"); 
  bypass =     (TRUE,"bypass [-p|-position <pos1> {<pos2>}][-target]"); 
  highz =     (TRUE,"highz [-p|-position <pos1> {<pos2>}][-target]"); 
  clamp =     (TRUE,"clamp [-p|-position <pos1> {<pos2>}][-target]"); 
  dopreload =     (TRUE,"doPreload [-p|-position <pos1> {<pos2>}][-target]"); 
  bsdebug =     (TRUE,"bsdebug [-start] [-reset] [-stop] [-tms 0|1] [-tdi 0|1][-tck <number>] [-loop <number>][-scanir <scandata>] [-irlength <number>] [-scandr <scandata>] [-drlength <number>]"); 
  setcable =     (TRUE,"setCable [-p|-port lpt1|lpt2|lpt3|com1|com2|com3|com4|usb0|usb1|usb2|usb21|usb22|usb23|usb24|usb25|usb26|usb27|usb28|usb29|usb210|parport0|parport1|parport2|parport3|ttya|ttyb|tty00|tty01|ttyS0|ttyS1|ttyS2|ttyS3|xsvf|svf|stapl|auto|null][-b|-baud 9600|19200|38400|57600|5000000|2500000|1250000|625000|200000|24000000|12000000|6000000|3000000|1500000|750000|-1|auto] [-file <filename>][-target <target_parameters>][-esn <electronic_sn>][-server <serverAddress>]"); 
  setcablespeed =     (TRUE,"setCableSpeed [-speed <value>]"); 
  setcableoption =     (TRUE,"setCableOption [-option <option>] [-value <value>]"); 
  setenv =     (TRUE,"setEnv [-env <value>] [-value <value>]"); 
  unsetenv =     (TRUE,"unsetEnv [-env <value>]"); 
  closecable =     (TRUE,"closeCable"); 
  listusbcables =     (TRUE,"listUsbCables [-host <hostname>]"); 
  setmode =     (TRUE,"setMode [-ss|-sserial|-sm|-smap|-bs|-bscan|-mpm|-acempm|-cf|-acecf|-compactflash|-pff|-promfile|-bsfile|-hw140|-dtconfig|-spi]"); 
  setsubmode =     (TRUE,"setsubMode [-mpmss|-mpmsm|-pffserial|-pffparallel][-pffversion][-pffspi][-pffbpi][-pffmbspi][-pffmbbpi]"); 
  setpreference =     (TRUE,"setPreference [-pref <name_value>]"); 
  setattribute =     (FALSE,"setAttribute [-configdevice|-collection|-design] [-position <pos>] [-attr <attrName>] [-value [<attrValue>]] [-attached]"); 
  setmbbpitype =     (TRUE,"setMbBpiType [-type <typeString>]"); 
  setmbbpidevice =     (TRUE,"setMbBpiDevice [-device <deviceName>]"); 
  setmbbpichain =     (TRUE,"setMbBpiChain [-parallel|-serial]"); 
  setbpiwidth =     (TRUE,"setMbBpiChain [-datawidth <dataWidth>]"); 
  runcablediagnostics =     (TRUE,"runCableDiagnostics"); 
  play =     (TRUE,"play [-retry <number>] [-cont_on_fail] [-showalltdo]"); 
  info =     (TRUE,"info"); 
  quit =     (TRUE,"quit"); 
  exit =     (TRUE,"exit"); 
  lockcable =     (TRUE,"lockcable"); 
  unlockcable =     (TRUE,"unlockcable"); 
  identify =     (TRUE,"identify [-manufacturer atmel|st] [-inferir]"); 
  identifympm =     (TRUE,"identifyMPM"); 
  savecdf =     (TRUE,"saveCdf [-file <fileName>]"); 
  saveprojectfile =     (TRUE,"saveprojectfile [-file <fileName>]"); 
  savearchive =     (TRUE,"saveArchive [-file <fileName>] [-dir <dirName>]"); 
  loadarchive =     (TRUE,"loadArchive [-file <fileName>] [-dir <dirName>]"); 
  loadcdf =     (TRUE,"loadCdf [-file <fileName>]"); 
  loadprojectfile =     (TRUE,"loadProjectFile [-file <fileName>]"); 
  writeprojectfile =     (TRUE,"writeProjectFile [-file <fileName>]"); 
  loadpdr =     (TRUE,"loadPdr [-file <fileName>]"); 
  savecmd =     (TRUE,"saveCmd [-file <fileName>]"); 
  setlog =     (TRUE,"setLog [-file <fileName>]"); 
  clearcmd =     (TRUE,"clearCmd"); 
  setprotection =     (FALSE,"setProtection [-p|-position <pos1> {<pos2>}]"); 
  setreadprotect =     (FALSE,"setReadProtect [-p|-position <pos1> {<pos2>}] [-otpsecurity] [-nobscanreg]"); 
  setwriteprotect =     (FALSE,"setWriteProtect [-p|-position <pos1> {<pos2>}]"); 
  setsignatureusercode =     (FALSE,"setSignatureUsercode [-p|-position <pos1> {<pos2>}]"); 
  validateinstance =     (FALSE,"validateInstance [-p|-position <pos1> {<pos2>}]"); 
  validateusercode =     (FALSE,"validateUsercode [-p|-position <pos1> {<pos2>}]"); 
  setiscdone =     (FALSE,"setISCDone [-p|-position <pos1> {<pos2>}][-target]"); 
  setpromoptionbits =     (FALSE,"setPromOptionBits [-p|-position <pos1> {<pos2>}] [-u|-usercode <usercode>][-target][-parallel] [-cascadeLowPower] [-noncascadeLowPower] [-useD4] [-loadfpga] [-r|-readProtect]"); 
  pffgenerate =     (FALSE,"pffgenerate [-setName <fileName>]"); 
  generate =     (TRUE,"generate [-active <collectionName>]  [-path <pathString>] [-output <outputFile>] [-compressed] [-format mcs|hex|tek|isc|ufp|bin] [-fillvalue <hexByte>] [-disableswap] [-generic] [-multiboot] [-spi] [-bpi_serial] [-bpi_parallel] [-data_width <width>]"); 
  setcurrentdevicechain =     (TRUE,"setCurrentDeviceChain [-index <chainnNo>]"); 
  setcurrentdesign =     (TRUE,"setCurrentDesign [-version <versionNo>]"); 
  setcurrentcollection =     (TRUE,"setCurrentCollection [-collection <collectionName>]"); 
  help =     (TRUE,"help [-all] [-head <num>] [-tail <num>] [-m <command>] [-c <command>]"); 
  settargetdevice =     (TRUE,"setTargetDevice [-position|-p <position>] [-attached]"); 
  repeatstart =     (TRUE,"repeatStart [-loop <num>]"); 
  repeatend =     (TRUE,"repeatEnd"); 
};

####################################
# Properties
####################################
PROPERTY = {
  DEVICE_TYPE = "FPGA"; 
  IDENTIFY_PROGRESS_COUNT = 100; 
  ACECF_RECORD_SIZE = 16776192; 
  ESTIMATE_FACTOR = 110; 
  ERASE_PROGRESS_COUNT = 1; 
  BLANKCHECK_PROGRESS_COUNT = 0; 
  CHECKSUM_PROGRESS_COUNT = 0; 
  READBACK_PROGRESS_COUNT = 0; 
  PROGRAM_PROGRESS_COUNT = 0; 
  VERIFY_PROGRESS_COUNT = 0; 
  PROGRAM_ACTION_NAME = "program"; 
  VERIFY_ACTION_NAME = "verify"; 
  ERASE_ACTION_NAME = "erase"; 
  BLANKCHECK_ACTION_NAME = "blankcheck"; 
  VERIFY_IDCODE_ACTION_NAME = "verify_idcode"; 
  READIDCODE_ACTION_NAME = "read_idcode"; 
  READUSERCODE_ACTION_NAME = "read_usercode"; 
  PROGRAM_USERCODE_ACTION_NAME = "program_usercode"; 
  VERIFY_CRC_ACTION_NAME = "verify_crc"; 
  ISC_ADV_FPGA_OPTIMIZATION = false; 
  SMAP_ADVANCED_READBACK = FALSE; 
  MULTIPRO_FMWR_REV = 2; 
  CONCURRENT_CLASS = "CCChain"; 
  SPI_SUPPORTED = FALSE; 
  BPI_SUPPORTED = FALSE; 
  SVF_SDR_BUFFER = 4096; 
};

###############################
# Operations Table            #
###############################
OPERATION = {
  BYPASS = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL"), 
    ("SPI","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN"), 
    ("BPI","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN")
  );
  PROGRAM =     ("SS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN"); 
};

###############################
# MultiPRO Adapter IDs        #
###############################
#
XC18V256-VQ44 =   (01,"HW-MP-VQ44-1"); 
XC18V512-VQ44 =   (01,"HW-MP-VQ44-1"); 
XC18V01-VQ44 =   (01,"HW-MP-VQ44-1"); 
XC18V02-VQ44 =   (01,"HW-MP-VQ44-1"); 
XC18V04-VQ44 =   (01,"HW-MP-VQ44-1"); 
#
XC18V02-PC44 =   (02,"HW-MP-PC44-1"); 
XC18V04-PC44 =   (02,"HW-MP-PC44-1"); 
#
XC18V256-PC20 =   ("0F","HW-MP-PC20"); 
XC18V512-PC20 =   ("0F","HW-MP-PC20"); 
XC18V01-PC20 =   ("0F","HW-MP-PC20"); 
#
XC18V256-SO20 =   (10,"HW-MP-SO20"); 
XC18V512-SO20 =   (10,"HW-MP-SO20"); 
XC18V01-SO20 =   (10,"HW-MP-SO20"); 
#
XC2C64-VQ100 =   (03,"HW-MP-VQ100"); 
XC2C128-VQ100 =   (03,"HW-MP-VQ100"); 
XA2C128-VQ100 =   (03,"HW-MP-VQ100"); 
XC2C256-VQ100 =   (03,"HW-MP-VQ100"); 
XA2C256-VQ100 =   (03,"HW-MP-VQ100"); 
#
XC2C32-VQ44 =   (04,"HW-MP-VQ44-2"); 
XA2C32-VQ44 =   (04,"HW-MP-VQ44-2"); 
XC2C64-VQ44 =   (04,"HW-MP-VQ44-2"); 
XA2C34_VQ44 =   (04,"HW-MP-VQ44-2"); 
#
XC2C32-PC44 =   (05,"HW-MP-PC44-2"); 
XC2C64-PC44 =   (05,"HW-MP-PC44-2"); 
#
XC2C32-CP56 =   (06,"HW-MP-CP56"); 
XC2C64-CP56 =   (06,"HW-MP-CP56"); 
#
XC2C128-TQ144 =   (07,"HW-MP-TQ144"); 
XC2C256-TQ144 =   (07,"HW-MP-TQ144"); 
XC2C384-TQ144 =   (07,"HW-MP-TQ144"); 
#
XC2C256-FT256 =   ("08","HW-MP-FT256"); 
XC2C384-FT256 =   ("08","HW-MP-FT256"); 
XC2C512-FT256 =   ("08","HW-MP-FT256"); 
#
XC2C128-CP132 =   ("09","HW-MP-CP132"); 
XC2C256-CP132 =   ("09","HW-MP-CP132"); 
#
XC2C256-PQ208 =   ("0A","HW-MP-PQ208"); 
XC2C384-PQ208 =   ("0A","HW-MP-PQ208"); 
XC2C512-PQ208 =   ("0A","HW-MP-PQ208"); 
#
XC2C384-FG324 =   ("0B","HW-MP-FG324"); 
XC2C512-FG324 =   ("0B","HW-MP-FG324"); 
#
XCCACEM16-BG388 =   ("0C","N/A"); 
XCCACEM32-BG388 =   ("0C","N/A"); 
XCCACEM64-BG388 =   ("0C","N/A"); 
#
XCV400-BG560 =   ("0D","N/A"); 
XCV600-BG560 =   ("0D","N/A"); 
XCV800-BG560 =   ("0D","N/A"); 
XCV1000-BG560 =   ("0D","N/A"); 
#
XC2V2000-BF957 =   ("0E","N/A"); 
XC2V3000-BF957 =   ("0E","N/A"); 
XC2V4000-BF957 =   ("0E","N/A"); 
XC2V6000-BF957 =   ("0E","N/A"); 
XC2V8000-BF957 =   ("0E","N/A"); 
#
XCF01S-VO20 =   (12,"HW-MP-VO20"); 
XCF02S-VO20 =   (12,"HW-MP-VO20"); 
XCF04S-VO20 =   (12,"HW-MP-VO20"); 
#
XCF32P-FS48 =   (13,"HW-MP-FS48"); 
XCF16P-FS48 =   (13,"HW-MP-FS48"); 
XCF08P-FS48 =   (13,"HW-MP-FS48"); 
#
XCF32P-VO48 =   ("1A","HW-MP-VO48"); 
XCF16P-VO48 =   ("1A","HW-MP-VO48"); 
XCF08P-VO48 =   ("1A","HW-MP-VO48"); 
#
XC2C32A-QF32 =   ("1B","HW-MP-QF32"); 
#
XC2C64A-QF48 =   ("1C","HW-MP-QF48"); 
#
#
XCF128X-FT64 =   (25,"N/A"); 
#
XC2VP20-FF1152 =   ("1D","N/A"); 
XC2VP30-FF1152 =   ("1D","N/A"); 
XC2VP40-FF1152 =   ("1D","N/A"); 
XC2VP50-FF1152 =   ("1D","N/A"); 
#
#::Universal=11,N/A;;
#::Backplane=1E,N/A;;
#
XC2C32S-VQ44 =   (14,"HW-MP-VQ44-2S"); 
#
XC2C64S-VQ64 =   (15,"HW-MP-VQ64-2S"); 
XC2C128S-VQ64 =   (15,"HW-MP-VQ64-2S"); 
#
XC2C128S-VQ100 =   (16,"HW-MP-VQ100-2S"); 
XC2C256S-VQ100 =   (16,"HW-MP-VQ100-2S"); 
#
XC2C256S-TQ144 =   (17,"HW-MP-TQ144-2S"); 
#
XC2C32S-QF32 =   (18,"HW-MP-QF32-2S"); 
#
XC2C64S-QF48 =   (19,"HW-MP-QF48-2S"); 
#
XC3S100E-PQ208 =   (20,"N/A"); 
XC3S250E-PQ208 =   (20,"N/A"); 
XC3S500E-PQ208 =   (20,"N/A"); 
XC3S1200E-PQ208 =   (20,"N/A"); 
#
XC5VLX30-FF676 =   (21,"N/A"); 
XC5VLX50-FF676 =   (21,"N/A"); 
XC5VLX85-FF676 =   (21,"N/A"); 
XC5VLX110-FF676 =   (21,"N/A"); 
#
XC5VLX50T-FF1136 =   (22,"N/A"); 
XC5VLX110T-FF1136 =   (22,"N/A"); 
XC5VSX50T-FF1136 =   (22,"N/A"); 
XC5VSX95T-FF1136 =   (22,"N/A"); 
#
XC3S1400A-FG676 =   (23,"N/A"); 
XC3S1800A-FG676 =   (23,"N/A"); 
#
#::XC3SXXXXA-FT256=24,N/A;;

######################################################################
# Preference
# The order of the PREFERENCE is really important!
# It has to be exact as what's in Preference.h!
######################################################################
PREFERENCE = {
  StartupClock =     ("Auto_Correction","Ignore","Indicate_Error"); 
  AutoSignature =     (False,True); 
  KeepSVF =     (False,True); 
  ConcurrentMode =     (False,True); 
  UseHighz =     (False,True); 
  ConfigOnFailure =     ("Stop","Continue"); 
  UserLevel =     ("Novice","Expert"); 
  MessageLevel =     ("Detailed","Brief"); 
  svfUseTime =     (false,true); 
  SpiByteSwap =     ("Auto_Correction","Ignore","Indicate_Error"); 
  AutoInfer =     (false,true); 
  SvfPlayDisplayComments =     (false,true); 
};


###############################
# Device List Depending on Size
###############################
PROPERTIES = #BPI_SIZE_16777216_MBIT, 3, BPI-AT45DB161D,BPI-AT45DB081B,BPI-AT45DB081D:
#BPI_SIZE_8388608_MBIT,  3, BPI-AT45DB081D,BPI-AT45DB041B,BPI-AT45DB041D:
#BPI_SIZE_4194304_MBIT, 3, BPI-AT45DB021B,BPI-AT45DB021D,BPI-AT45DB041D:
#BPI_SIZE_2097152_MBIT, 3, BPI-AT45DB011B,BPI-AT45DB011D,BPI-AT45DB021D:
#BPI_SIZE_1048576_MBIT, 1, BPI-AT45DB011D;;
{
  SIZE_33554432_MBIT =     (2,"xcf32p","xc3s1400an"); 
  SIZE_16777216_MBIT =     (2,"xcf16p","xc3s700an"); 
  SIZE_8388608_MBIT =     (3,"xcf08p","xc3s200an","xc3s400an"); 
  SIZE_4194304_MBIT =     (2,"xc18v04","xcf04s"); 
  SIZE_2097152_MBIT =     (3,"xc18v02","xcf02s","xc3s50an"); 
  SIZE_1048576_MBIT =     (2,"xc18v01","xcf01s"); 
  SIZE_524288_MBIT =     (1,"xc18v512"); 
  SIZE_262144_MBIT =     (1,"xc18v256"); 
  SPI_SIZE_268435456_MBIT =     (4,"N25Q256","S25FL256","S25FL256S","MX25L257"); 
  SPI_SIZE_134217728_MBIT =     (9,"N25Q128","M25P128","S25FL128","S25FL128S","S25FL129P","S25FL128P","W25Q128BV","W25Q128BW","W25Q128FV"); 
  SPI_SIZE_536870912_MBIT =     (2,"S25FL512","S25FL512S"); 
  SPI_SIZE_69206016_MBIT =     (1,"AT45DB642D"); 
  SPI_SIZE_67108864_MBIT =     (9,"N25Q64","M25P64","S25FL064P","S25FL064A","W25Q64BV","W25Q64BW","W25Q64DW","AT25DF641","W25Q64FV"); 
  SPI_SIZE_34603008_MBIT =     (4,"AT45DB321B","AT45DB321C","AT45DB321D","AT25DF321"); 
  SPI_SIZE_33554432_MBIT =     (8,"N25Q32","M25P32","S25FL032P","S25FL032A","W25Q32V","W25Q32BV","W25Q32BW","W25Q32DW"); 
  SPI_SIZE_17301504_MBIT =     (3,"AT45DB161B","AT45DB161D","AT45DB161E"); 
  SPI_SIZE_16777216_MBIT =     (7,"M25P16","M25PE16","M45PE16","S25FL016A","W25Q16V","W25Q16BV","W25Q16BW"); 
  SPI_SIZE_8650752_MBIT =     (2,"AT45DB081B","AT45DB081D"); 
  SPI_SIZE_8388608_MBIT =     (6,"M25P80","M25PE80","M45PE80","S25FL008A","W25Q80BV","W25Q80BW"); 
  SPI_SIZE_4325376_MBIT =     (2,"AT45DB041B","AT45DB041D"); 
  SPI_SIZE_4194304_MBIT =     (9,"M25P40","M25PE40","M45PE40","S25FL040A-00","S25FL040A-01","S25FL040A-02","AT25DF041A","W25Q40BW","W25X40BV"); 
  SPI_SIZE_2162688_MBIT =     (2,"AT45DB021B","AT45DB021D"); 
  SPI_SIZE_2097152_MBIT =     (3,"M25P20","M25PE20","M45PE20"); 
  SPI_SIZE_1081344_MBIT =     (2,"AT45DB011B","AT45DB011D"); 
  SPI_SIZE_1048576_MBIT =     (3,"M25P10A","M25PE10","M45PE10"); 
  SPI_SIZE_524288_MBIT =     (1,"M25P05A"); 
  BPI_SIZE_1073741824_MBIT =     (9,"28F00AP33B","28F00AP33E","28F00AP33","28F00AP30B","28F00AP30","28F00AM29EW","SPANSIONS29GL01GP","S29GL01GS","28F00AG18F"); 
  BPI_SIZE_536870912_MBIT =     (11,"28F512P33B","28F512P33E","28F512P33","28F512P30B","28F512P30EF","28F512P30","28F512M29EW","SPANSIONS29GL512P","S29GL512S","48F4400P0","28F512G18F"); 
  BPI_SIZE_268435456_MBIT =     (10,"28F256M29EW","28F256J3F","28F256J3D","28F256P33B","28F256P33","28F256P30","28F256P30B","SPANSIONS29GL256P","S29GL256S","28F256G18F"); 
  BPI_SIZE_134217728_MBIT =     (11,"28F128M29EW","28F128J3D","28F128J3F","28F128P33B","28F128P33","28F128P30B","28F128P30","SPANSIONS29GL128P","S29GL128S","XCF128X","28F128G18F"); 
  BPI_SIZE_67108864_MBIT =     (6,"28F64M29EW","28F640J3D","28F640P33B","28F640P33","28F640P30","28F640P30B"); 
  BPI_SIZE_33554432_MBIT =     (1,"28F320J3D"); 
};
#SIZE_262144_MBIT, 0, ;; //no 256 devices supported.

##################################
# Device lists for each SPI / BPI TYPE
################################
TYPE1SPI_DEVICE_LIST =   ("M25P05A","M25P10A","M25P20","M25P40","M25P80","M25P16","M25P32","M25P64","M25P128","M25PE10","M25PE20","M25PE40","M25PE80","M25PE16","S25FL128","S25FL128S","S25FL256","S25FL256S","S25FL512","S25FL512S","S25FL129P","S25FL064P","S25FL032P","S25FL128P","S25FL064A","S25FL032A","S25FL016A","S25FL008A","S25FL040A-00","S25FL040A-01","S25FL040A-02","W25Q128BV","W25Q128BW","W25Q64BV","W25Q64BW","W25Q64DW","W25Q32V","W25Q32BV","W25Q32BW","W25Q32DW","W25Q16V","W25Q16BV","W25Q16BW","W25Q128FV","W25Q64FV","W25Q80BV","W25Q80BW","W25Q40BW","W25X40BV","AT25DF641","AT25DF321","AT25DF041A","N25Q256","N25Q128","N25Q64","N25Q32","MX25L257"); 
TYPE2SPI_DEVICE_LIST =   ("M45PE10","M45PE20","M45PE40","M45PE80"); 
TYPE3SPI_DEVICE_LIST =   ("AT45DB011B","AT45DB011D","AT45DB021B","AT45DB021D","AT45DB041B","AT45DB041D","AT45DB081B","AT45DB081D","AT45DB161B","AT45DB161D","AT45DB161E","AT45DB321B","AT45DB321C","AT45DB321D","AT45DB642B","AT45DB642D"); 
BPI_DEVICE_LIST =   ("28F640P30","28F128P30","28F256P30","28F128J3F","28F256J3F","28F640J3D","28F256J3D","28F128J3D","28F320J3D","SPANSIONS29GL01GP","SPANSIONS29GL512P","SPANSIONS29GL256P","SPANSIONS29GL128P","XCF128X","28F640P30B","28F128P30B","28F256P30B","28F512P30B","28F512P30EF","28F00AP30B","28F128G18F","28F640P33B","28F640P33","28F128P33B","28F128P33","28F256P33B","28F256P33","28F512P33B","28F512P33E","28F512P33","28F00AP33B","28F00AP33E","28F00AP33"); 
TYPE1BPI_DEVICE_LIST =   ("XCF128X","28F128P30","28F640P30","28F256P30","28F512P30","28F00AP30","48F4400P0","28F00AP30B","28F512P30B","28F512P30EF","28F640P30B","28F128P30B","28F256P30B","28F640P33B","28F640P33","28F128P33B","28F128P33","28F256P33B","28F256P33","28F512P33B","28F512P33E","28F512P33","28F00AP33B","28F00AP33E","28F00AP33"); 
TYPE2BPI_DEVICE_LIST =   ("28F256J3F","28F128J3F","28F640J3D","28F256J3D","28F128J3D","28F320J3D","28F00AG18F","28F512G18F","28F256G18F","28F128G18F"); 
TYPE3BPI_DEVICE_LIST =   ("28F00AM29EW","28F512M29EW","28F256M29EW","28F128M29EW","28F64M29EW","SPANSIONS29GL01GP","SPANSIONS29GL512P","SPANSIONS29GL256P","SPANSIONS29GL128P","S29GL01GS","S29GL512S","S29GL256S","S29GL128S"); 

###############################
# SPI Device List Depending on Size, unlike the regular prom devices, load add all larger parts automatically.
###############################
#::PROPERTIES=SPI_SIZE_134217728_MBIT, 1, AT45CS1282:
#             SPI_SIZE_67108864_MBIT, 2, M25P64,AT45DB642B:
#             SPI_SIZE_33554432_MBIT, 3, M25P32,AT45DB321B,AT45DB321C:
#             SPI_SIZE_16777216_MBIT, 2, M25P16,AT45DB161B:
#             SPI_SIZE_8388608_MBIT,  3, M25P80,M45PE80,AT45DB081B:
#             SPI_SIZE_4194304_MBIT, 4, M25P40,M25PE40,AT45DB041B,M45PE40:
#             SPI_SIZE_2097152_MBIT, 3, M25P20,M45PE20,AT45DB021B:
#             SPI_SIZE_1048576_MBIT, 3, M25P10A,M45PE10,AT45DB011B:
#             SPI_SIZE_524288_MBIT, 1, M25P05A;;
#             #SIZE_262144_MBIT, 0, ;; //no 256 devices supported.

################################################################
# (PFF ONLY) ALL & ONLY IRONHORSE PROMS ARE IN EXTENDEDPROM LIST
################################################################
PROM_DEVICES = {
  xc3s50an =     (1048576,"Serial"); 
  xc3s200an =     (4194304,"Serial"); 
  xc3s400an =     (4194304,"Serial"); 
  xc3s700an =     (8388608,"Serial"); 
  xc3s1400an =     (16777216,"Serial"); 
};

# End of acd file.

