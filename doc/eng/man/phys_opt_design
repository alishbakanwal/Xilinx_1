
Description:

  Performs timing-driven optimization on the negative-slack paths of a
  design. A path should have negative slack near the worst negative slack
  (WNS) to be considered for optimization. Optimization will not be performed
  on designs without negative slack.

  This optional command can be run as post-place optimization and also as
  post-route optimization.

  Note: Because physical optimization requires timing data that is only
  available after placement, the command cannot be run prior to placement.
  However, the write_iphys_opt_tcl and read_iphys_opt_tcl commands let you
  write out the physical optimizations performed on the post-placed design,
  and then apply those optimizations to the design netlist prior to
  placement. Refer to the Vivado Design Suite User Guide: Implementation
  (UG904) for more information on interactive physical optimization.

  Post-place phys_opt_design performs the following optimizations by default:

   *  high-fanout optimization

   *  placement-based optimization of critical paths

   *  rewire

   *  critical-cell optimization

   *  DSP register optimization

   *  BRAM register optimization

   *  a final fanout optimization

  Note: Using command-line options for specific optimizations results in
  phys_opt_design performing only the specified optimizations and disabling
  all others, even the ones that are usually performed by default.

  Post-route phys_opt_design performs the following optimizations by default:

   *  placement-based optimization of critical paths

   *  routing optimization

   *  rewire

   *  critical-cell optimization

  Physical optimizations involve replication, re-timing, hold fixing, and
  placement improvement. The phys_opt_design command automatically performs
  all necessary netlist and placement changes.

  To perform re-timing you must specify the -retime option, or the -directive
  AddRetime option.

  To perform hold fixing you must specify the -hold_fix option, or the
  -directive ExploreWithHoldFix option.

  If the phys_opt_design command is used iteratively, the subsequent run
  optimizes the results of the prior run.

  Note: The phys_opt_design can be multi-threaded to speed the process. Refer
  to the set_param command for more information on setting the
  general.maxThreads parameter.

  The command reports each net processed, a summary of any optimizations
  performed, and the WNS before and after optimization. Replicated objects
  are named by appending _replica to the original object name, followed by
  the replicated object count.

Arguments:

  -fanout_opt - (Optional) Performs delay-driven optimization on high-fanout
  timing critical nets, by replicating drivers to reduce delay.

  Note: The -fanout_opt argument is optional, as are the other optimizations.
  However this optimization is run by default unless explicitly overridden by
  another optimization.

  -placement_opt - (Optional) Move cells to reduce delay on timing-critical
  nets.

  -routing_opt - (Optional) Perform routing optimization on timing-critical
  nets to reduce delay.

  -onroute_replace - (Optional) Do placement-based optimizations along the
  current routing path to reduce delay on timing critical nets.

  -rewire - (Optional) Refactor logic cones to reduce logic levels and reduce
  delay on critical signals.

  -critical_cell_opt - (Optional) Replicate cells on timing critical nets to
  reduce delays.

  -dsp_register_opt - (Optional) Improve critical path delay by moving
  registers from slices to DSP blocks, or from DSP blocks to slices.

  -bram_register_opt - (Optional) Improve critical path delay by moving
  registers from slices to block RAMs, or from block RAMs to slices.

  -bram_enable_opt - (Optional) The block RAM enable optimization improves
  timing on critical paths involving power-optimized block RAMs.
  Pre-placement block RAM power optimization restructures the logic driving
  block RAM read and write enable inputs to reduce dynamic power consumption.
  After placement the restructured logic may become timing-critical. The
  block RAM enable optimization reverses the enable-logic optimization to
  improve the slack on the critical enable-logic paths.

  -shift_register_opt - (Optional) Perform shift register optimization to
  improve timing on negative slack paths between shift register cells (SRLs)
  and other logic cells. If there are timing violations to or from shift
  register cells (SRL16E or SRLC32E), the optimization extracts a register
  from the beginning or end of the SRL register chain and places it into the
  logic fabric to improve timing. The optimization shortens the wire length
  of the original critical path. Refer to the Vivado Design Suite User Guide:
  Implementation (UG904) for more information.

  -hold_fix - (Optional) Performs optimizations to insert data path delay to
  fix hold time violations.

  -retime - (Optional) Re-time registers forward through combinational logic
  to balance path delays.

  -force_replication_on_nets <args> - (Optional) Force the drivers of the
  specified net objects to be replicated, regardless of timing slack. This
  option requires the use of the get_nets command to specify net objects.
  Replication is based on load placements and requires manual analysis to
  determine if replication is sufficient. If further replication is required,
  nets can be replicated repeatedly by successive commands.

  -directive <arg> - (Optional) Direct the mode of physical optimization with
  specific design objectives. Only one directive can be specified for a
  single phys_opt_design command, and values are case-sensitive. Supported
  values include:

   *  Explore - Run different algorithms in multiple passes of optimization,
      including replication for very high fanout nets.

   *  ExploreWithHoldFix - Run different algorithms in multiple passes of
      optimization, including hold violation fixing and replication for very
      high fanout nets.

   *  AggressiveExplore - Similar to Explore but with different optimization
      algorithms and more aggressive goals.

   *  AlternateReplication - Use different algorithms for performing critical
      cell replication.

   *  AggressiveFanoutOpt - Uses different algorithms for fanout-related
      optimizations with more aggressive goals.

   *  AlternateFlowWithRetiming - Perform more aggressive replication and DSP
      and BRAM optimizations, and enable register re-timing.

   *  AddRetime - Performs the default phys_opt_design flow and adds re-timing.

   *  Default - Run phys_opt_design with default settings.

  Refer to the Vivado Design Suite User Guide: Implementation (UG904) for
  more information on the effects of each directive.

  Note: The -directive option controls the overall optimization strategy, and
  is not compatible with any specific optimization options. It can only be
  used with -quiet and -verbose.

  -critical_pin_opt - For LUT inputs, this optimization performs remapping of
  logical pins to physical pins, also known as pin-swapping, to improve
  critical path timing. A critical path traversing a logical pin that has
  been mapped to a slow physical pin, such as A1 or A2, is reassigned to a
  faster physical pin, such as A6 or A5 if it improves timing.

  Note: A cell with a LOCK_PINS property will be skipped and the cell will
  retain the pin mapping specified by LOCK_PINS. Logical-to-physical pin
  mapping can be obtained with get_site_pins for a selected logical pin
  object.

  -clock_opt - (Optional) Perform clock skew optimization during post-route
  optimization. Insert global clock buffers to delay destination clocks to
  improve setup on critical paths.

  -path_groups <args> - (Optional) Perform optimizations on the specified
  path groups only.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example performs a physical optimization of the current
  post-placement design, and then writes the iphys_opt Tcl script for use
  before placement:

    
    phys_opt_design 
    write_iphys_opt_tcl C:/Data/my_iphys_opt.tcl

  This example sets the LOCK_PINS property on the specified cell, then
  performs physical optimizations including register re-timing, optimization
  of registers across DSP blocks and block RAMs, and pin swapping (excluding
  the locked pins) to improve timing:

    
    set_property LOCK_PINS {I3:A1 I2:A4} [get_cell cpuEngine/qmem_dack_reg_i_1] 
    phys_opt_design -retime -dsp_register_opt -bram_register_opt \ 
       -critical_pin_opt

  This example directs phys_opt_design to run more iterations, with hold
  violation fixing, to achieve potentially better results:

    
    phys_opt_design -directive ExploreWithHoldFix

  This example directs phys_opt_design to consider more nets for replication:

    phys_opt_design -directive AggressiveFanoutOpt

See Also:

   *  get_pins
   *  get_site_pins
   *  opt_design
   *  place_design
   *  power_opt_design
   *  read_iphys_opt_tcl
   *  route_design
   *  write_iphys_opt_tcl
