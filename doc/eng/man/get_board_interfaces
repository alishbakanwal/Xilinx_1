
Description:

  Gets a list of board interfaces specified on the board in use by the
  current project.

  The current_board command returns the board in use by the current project.
  The get_boards command returns a list of boards available for use by the
  current project.

  The board file, board.xml located in the data/boards folder of the Vivado
  Design Suite installation area, stores information regarding board
  attributes. The board provides a representation of the overall system that
  the Xilinx device is a part of, and can help define key aspects of the FPGA
  design, such as clock constraints, I/O port assignments, and supported
  interfaces.

  The interfaces defined on the board are stored in the board_rtl.xml file in
  the data/boards folder of the Vivado Design Suite installation area. The
  board_rtl.xml file is referenced in the board.xml file.

  The interfaces available in the current_board can be used to define the
  interfaces required in the IP subsystem design, using
  create_bd_interface_port or create_bd_port, or in the overall FPGA design
  using create_interface and create_port.

Arguments:

  -filter <args> - (Optional) Filter the results list with the specified
  expression. The -filter argument filters the list of objects returned by
  get_board_interfaces based on property values on the interfaces. You can
  find the properties on an object with the report_property or list_property
  commands.

  The filter search pattern should be quoted to avoid having to escape
  special characters that may be found in net, pin, or cell names, or other
  properties. String matching is case-sensitive and is always anchored to the
  start and to the end of the search string. The wildcard "*" character can
  be used at the beginning or at the end of a search string to widen the
  search to include a substring of the property value.

  Note: The filter returns an object if a specified property exists on the
  object, and the specified pattern matches the property value on the object.
  In the case of the "*" wildcard character, this will match a property with
  a defined value of "".

  For string comparison, the specific operators that can be used in filter
  expressions are "equal" (==), "not-equal" (!=), "match" (=~), and
  "not-match" (!~). Numeric comparison operators <, >, <=, and >= can also be
  used. Multiple filter expressions can be joined by AND and OR (&& and ||).
  The following gets input pins that do NOT contain the "RESET" substring
  within their name:

    get_pins * -filter {DIRECTION == IN && NAME !~ "*RESET*"}

  Boolean (bool) type properties can be directly evaluated in filter
  expressions as true or not true:

    -filter {IS_PRIMITIVE && !IS_LOC_FIXED}

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example gets a list of all interfaces in the current board:

    join [get_board_interfaces] \n

See Also:

   *  create_bd_interface_port
   *  create_interface
   *  current_board
   *  current_project
   *  get_board_pins
   *  get_boards
