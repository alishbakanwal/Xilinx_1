
Description:

  Returns the hw_probe objects in the Hardware Manager that are defined on
  signals in the design, or that are assigned to the specified ILA or VIO
  debug cores.

  You can add ILA and VIO debug cores in the RTL source files of a design by
  customizing the core from the IP catalog, or add ILA debug cores into the
  synthesized netlist using the create_debug_core command.

  Signals in the design can be probed to monitor signal values and track
  hardware events on the FPGA device. Debug probes can be added to ILA debug
  cores in the synthesized netlist design using the create_debug_probe
  command, and connected to signals in the design using connect_debug_probe .
  Probes can only be added to VIO debug cores when the IP core is customized,
  or re-customized, from the IP catalog, and signals connected to it in the
  RTL design. Refer to the Vivado Design Suite User Guide: Vivado Programming
  and Debugging (UG908) for more information on adding ILA and VIO debug
  cores and signal probes to the design.

  Debug cores and probes are written to a probes file (.ltx) with
  write_debug_probes, and associated with the hardware device, along with the
  bitstream file (.bit), using the PROBES.FILE and PROGRAM.FILE properties of
  the hw_device object. The hardware device is programmed with this
  information using the program_hw_devices command.

  This command returns a list of debug probe objects on the device, or
  returns an error if it fails.

Arguments:

  -of_objects <arg> - (Optional) Return the debug probes assigned to the
  specified ILA or VIO debug cores. The ILA or VIO cores must be specified as
  hardware objects using the get_hw_ilas , current_hw_ila, get_hw_vios , or
  current_hw_vio commands.

  Note: The -of_objects option requires objects to be specified using the
  get_* commands, such as get_cells or get_pins, rather than specifying
  objects by name. In addition, -of_objects cannot be used with a search
  <pattern>.

  -regexp - (Optional) Specifies that the search <patterns> are written as
  regular expressions. Both search <patterns> and -filter expressions must be
  written as regular expressions when this argument is used. Xilinx regular
  expression Tcl commands are always anchored to the start of the search
  string. You can add ".*" to the beginning or end of a search string to
  widen the search to include a substring. See
  http://perldoc.perl.org/perlre.html for help with regular expression
  syntax.

  Note: The Tcl built-in command regexp is not anchored, and works as a
  standard Tcl command. For more information refer to
  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.

  -nocase - (Optional) Perform case-insensitive matching when a pattern has
  been specified. This argument applies to the use of -regexp only.

  -filter <args> - (Optional) Filter the results list with the specified
  expression. The -filter argument filters the list of objects returned by
  get_hw_probes based on property values on the debug probe objects. You can
  find the properties on an object with the report_property or list_property
  commands. In the case of the "hw_probes" object, "NAME" and "SIGNAL" are
  two of the properties that can be used to filter results.

  The filter search pattern should be quoted to avoid having to escape
  special characters that may be found in net, pin, or cell names, or other
  properties. String matching is case-sensitive and is always anchored to the
  start and to the end of the search string. The wildcard "*" character can
  be used at the beginning or at the end of a search string to widen the
  search to include a substring of the property value.

  Note: The filter returns an object if a specified property exists on the
  object, and the specified pattern matches the property value on the object.
  In the case of the "*" wildcard character, this will match a property with
  a defined value of "".

  For string comparison, the specific operators that can be used in filter
  expressions are "equal" (==), "not-equal" (!=), "match" (=~), and
  "not-match" (!~). Numeric comparison operators <, >, <=, and >= can also be
  used. Multiple filter expressions can be joined by AND and OR (&& and ||).
  The following gets input pins that do NOT contain the "RESET" substring
  within their name:

    get_pins * -filter {DIRECTION == IN && NAME !~ "*RESET*"}

  Boolean (bool) type properties can be directly evaluated in filter
  expressions as true or not true:

    -filter {IS_PRIMITIVE && !IS_LOC_FIXED}

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

  <patterns> - (Optional) Match hw_probes against the specified patterns. The
  default pattern is the wildcard `*` which gets a list of all hw_probes
  assigned on the current device.

Example:

  The following example gets probes assigned to the current ILA debug core:

    get_hw_probes -of_object [current_hw_ila]

See Also:

   *  connect_debug_port
   *  create_debug_core
   *  create_debug_port
   *  current_hw_device
   *  current_hw_ila
   *  get_hw_devices
   *  get_hw_ilas
   *  get_hw_vios
