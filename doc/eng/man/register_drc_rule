
Description:

  Register a new user-defined DRC rule into the violation library for use by
  the tool.

  You can create user-defined DRCs by writing a DRC procedure, known as a Tcl
  checker, and registering the checking procedure as part of a DRC rule using
  the register_drc_rule command. The Tcl checker performs the specific
  actions of the design rule check, validating specific design objects
  according to the Tcl procedure, and flagging any violations of the rule
  using the create_violation command.

  You can manage user-defined DRC rules with the manage_user_drc_rule
  command. This allows you to enable or disable a specific user-defined rule
  for use with the report_drc command.

  The process in brief is:

   *  Write a Tcl checker procedure to define the method applied when
      checking the user-defined rule, and the objects to check against the
      rule.

   *  Use create_violation in the Tcl procedure to flag violations found when
      checking the rule against a design

   *  Register the Tcl checker as a user-defined DRC, and identify it with an
      abbreviation and category, using the register_drc_rule command.

   *  Enable or disable user-defined DRCs for use in a design with the
      manage_user_drc_rule command.

   *  Use the user-defined DRCs along with tool-defined DRCs when running the
      report_drc command.

Arguments:

  -category <arg> - (Optional) Defines a grouping for the rule. The default
  is "User Defined". This is used as the first level of hierarchy in the GUI
  when listing DRC rules.

  -name <arg> - The unique abbreviation for the rule in the violation
  library. This should match the abbreviation given to the violation in the
  create_violation command.

  -desc <arg> - (Optional) A brief description of the rule. The default is
  "User Rule". This is displayed in the GUI when listing DRC rules. The
  description is also used in the DRC report and summary.

  -msg <arg> - (Optional) This is the message displayed when a violation of
  the rule is found. The message can include dynamic substitutions with
  design elements found in violation of the rule when the DRC report is
  generated. Valid substitutions keys are:

   *  %MSG_STRING - String.

   *  %NETLIST_ELEMENT - Netlist elements including cells, pins, ports, and
      nets.

   *  %SITE_GROUP - Device site.

   *  %CLOCK_REGION - Clock region.

   *  %BANK - Package IO bank.

  -checker <arg> - (Optional) This is the name of the Tcl procedure which
  defines the rule checking functionality. The Tcl proc must be separately
  defined and can be loaded with the source command. The Tcl checker
  procedure can create a violation object that defines the message to be
  returned by the DRC check, and also contains the design elements which are
  the subject of a DRC rule violation. The violation object is created by the
  create_violation command, that maps the violation to the DRC rule
  registered by this command.

  Note: A single DRC abbreviation (-name) can have multiple rules, or checkers.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example registers the cell_check Tcl procedure as a checker
  for the CLCHK user-defined DRC rule, providing a category for the check,
  with a brief description and long message for the rule:

    register_drc_rule -name CLCHK -category SHAREDRULES \ 
       -desc {Rule CLCHK: Cell check.} -msg {Violation %MSG_STRING.  \ 
       For %NETLIST_ELEMENT cell. Again %NETLIST_ELEMENT cell. } \ 
       -checker cell_check

  In the following example the rule named NETV is registered with the default
  category (User Defined), with a message, and the net_check Tcl rule checker
  procedure:

    register_drc_rule -name NETV -msg {%Msg_String. For %NETLIST_ELEMENT net.} \ 
       -checker net_check

  The following is a sample Tcl checker proc definition, incorporating the
  create_violation command:

    proc cell_check {} { 
       puts "Executing DRC rule cell_check." 
       set mycell3 [lindex [get_cells] 3] 
       set mycell5 [lindex [get_cells] 5] 
       puts $mycell3 
       set vio_1 [create_violation -name CLCHK -msg "Rule 1: failed." \ 
          -severity ERROR $mycell3 $mycell5] 
       set vio_2 [create_violation -name CLCHK -msg "Rule 1: failed again." \ 
          -severity ERROR $mycell5 $mycell3] 
       set x [list $vio_1 $vio_2] 
       return -code error $x 
    }

See Also:

   *  create_violation
   *  manage_user_drc_rule
   *  report_drc
   *  reset_drc
