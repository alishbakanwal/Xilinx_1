
Description:

  Reads a design checkpoint file (DCP) that contains the netlist,
  constraints, and may optionally have the placement and routing information
  of an implemented design. You can save design checkpoints at any stage in
  the design using the write_checkpoint command.

  The read_checkpoint command simply reads the associated checkpoint file,
  without opening a design or project in-memory. To create a project from the
  imported checkpoint, use the open_checkpoint command instead of
  read_checkpoint, or use the link_design command after read_checkpoint to
  open the in-memory design from the checkpoint or checkpoint files currently
  read.

  Note: When multiple design checkpoints are open in the Vivado tool, you
  must use the current_project command to switch between the open designs.
  You can use current_design to check which checkpoint is the active design.

Arguments:

  -incremental <arg> - (Optional) Load a checkpoint file into an already open
  design to enable the incremental compilation design flow, where <arg>
  specifies the path and filename of the incremental design checkpoint (DCP)
  file. In the incremental compilation flow, the placement and routing from
  the incremental DCP is applied to matching netlist objects in the current
  design to reuse existing placement and routing. Refer to the Vivado Design
  Suite User Guide: Implementation (UG904) for more information on the
  Incremental Compile flow.

  Note: The -incremental switch is not intended to merge two DCP files into a
  single design. It applies the placement and routing of the incremental
  checkpoint to the netlist objects in the current design.

  After loading an incremental design checkpoint, you can use the
  report_incremental_reuse command to determine the percentage of physical
  data reused from the incremental checkpoint, in the current design. The
  place_design and route_design commands will run incremental place and
  route, preserving reused placement and routing information and
  incorporating it into the design solution.

  Reading a design checkpoint with -incremental, loads the physical data into
  the current in-memory design. To clear out the incremental design data, you
  must either reload the current design, using open_run, or read a new
  incremental checkpoint to overwrite the one previously loaded.

  -dont_reuse <arg> - (Optional) When -incremental is specified, don`t reuse
  the given list of cells from the incremental checkpoint.

  Note: -dont_reuse and -only_reuse cannot be used together, but either can
  be used with -fix_reuse.

  -only_reuse <arg> - (Optional) When -incremental is specified, reuse only
  the specified list of cells from the incremental checkpoint.

  -fix_reuse - (Optional) When -incremental is specified, mark the placement
  location of reused cells as fixed (IS_LOC_FIXED) to prevent changes by the
  place_design command. This is a boolean option that is true when specified.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

  <file> - (Required) The path and filename of the checkpoint file to read.

  Note: If the path is not specified as part of the file name, the tool will
  search for the specified file in the current working directory and then in
  the directory from which the tool was launched.

Examples:

  The following example imports the specified checkpoint file:

    read_checkpoint C:/Data/state1/checkpoint.dcp

See Also:

   *  current_design
   *  current_project
   *  open_checkpoint
   *  write_checkpoint
