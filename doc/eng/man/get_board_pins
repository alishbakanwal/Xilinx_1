
Description:

  Gets a list of board pin objects in the board in use by the current project.

  The current_board command returns the board in use by the current project.
  The get_boards command returns a list of boards available for use by the
  current project.

  The board file, board.xml located in the data/boards folder of the Vivado
  Design Suite installation area, stores information regarding board
  attributes. The board provides a representation of the overall system that
  the Xilinx device is a part of, and can help define key aspects of the FPGA
  design, such as clock constraints, I/O port assignments, and supported
  interfaces.

  The pins in use on the board are stored in the board_pinmap.xml file in the
  data/boards folder of the Vivado Design Suite installation area. The
  board_pinmap.xml file is referenced in the board.xml file.

  The board pin represents the pin on the physical board, system, or targeted
  reference design (TRD) in which the Xilinx FPGA package pin is connected.
  It consists of properties like LOC, IOSTANDARD, and SLEW. Board pins can be
  scalar or vector, so it is always represented as bitwise.

  The board_pins can be used to define and place PORTS in the FPGA design,
  using the create_port and set_property PACKAGE_PIN commands.

Arguments:

  -regexp - (Optional) Specifies that the search <patterns> are written as
  regular expressions. Both search <patterns> and -filter expressions must be
  written as regular expressions when this argument is used. Xilinx regular
  expression Tcl commands are always anchored to the start of the search
  string. You can add ".*" to the beginning or end of a search string to
  widen the search to include a substring. See
  http://perldoc.perl.org/perlre.html for help with regular expression
  syntax.

  Note: The Tcl built-in command regexp is not anchored, and works as a
  standard Tcl command. For more information refer to
  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.

  -nocase - (Optional) Perform case-insensitive matching when a pattern has
  been specified. This argument applies to the use of -regexp only.

  -filter <args> - (Optional) Filter the results list with the specified
  expression. The -filter argument filters the list of objects returned by
  get_board_pins based on property values on the board pins. You can find the
  properties on an object with the report_property or list_property commands.

  The filter search pattern should be quoted to avoid having to escape
  special characters that may be found in net, pin, or cell names, or other
  properties. String matching is case-sensitive and is always anchored to the
  start and to the end of the search string. The wildcard "*" character can
  be used at the beginning or at the end of a search string to widen the
  search to include a substring of the property value.

  Note: The filter returns an object if a specified property exists on the
  object, and the specified pattern matches the property value on the object.
  In the case of the "*" wildcard character, this will match a property with
  a defined value of "".

  For string comparison, the specific operators that can be used in filter
  expressions are "equal" (==), "not-equal" (!=), "match" (=~), and
  "not-match" (!~). Numeric comparison operators <, >, <=, and >= can also be
  used. Multiple filter expressions can be joined by AND and OR (&& and ||).
  The following gets input pins that do NOT contain the "RESET" substring
  within their name:

    get_pins * -filter {DIRECTION == IN && NAME !~ "*RESET*"}

  Boolean (bool) type properties can be directly evaluated in filter
  expressions as true or not true:

    -filter {IS_PRIMITIVE && !IS_LOC_FIXED}

  -of_objects <args> - (Optional) Get the board pins of the specified board
  interface objects.

  Note: The -of_objects option requires objects to be specified using the
  get_* commands, such as get_cells or get_pins, rather than specifying
  objects by name. In addition, -of_objects cannot be used with a search
  <pattern>.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example assigns the PACKAGE_PIN and IOSTANDARD properties on
  the specified port in the current design according to the properties on the
  dip_switch pins in the current board:

    set_property PACKAGE_PIN [get_property LOC \ 
    [get_board_pins dip_switches_tri_i[0]]] [get_ports {DIPS[0]}] 
    set_property IOSTANDARD [get_property IOSTANDARD \ 
    [get_board_pins dip_switches_tri_i[0]]] [get_ports {DIPS[0]}]

  The following example gets a list of board pins assigned to the LED_8Bits
  board interface, stores those pins in a Tcl variable, and then prints the
  LOC property for each of those pins:

    set boardPins [get_board_pins \ 
    -of_objects [get_board_interfaces -filter {NAME == LED_8Bits}]] 
    foreach pin $boardPins {puts "The location of $pin is: [get_property LOC $pin]"} 
    The location of LEDs_8Bits_TRI_O[0] is: AB8 
    The location of LEDs_8Bits_TRI_O[1] is: AA8 
    The location of LEDs_8Bits_TRI_O[2] is: AC9 
    The location of LEDs_8Bits_TRI_O[3] is: AB9 
    The location of LEDs_8Bits_TRI_O[4] is: AE26 
    The location of LEDs_8Bits_TRI_O[5] is: G19 
    The location of LEDs_8Bits_TRI_O[6] is: E18 
    The location of LEDs_8Bits_TRI_O[7] is: F16

See Also:

   *  create_bd_interface_port
   *  create_interface
   *  current_board
   *  current_project
   *  get_board_interfaces
   *  get_boards
