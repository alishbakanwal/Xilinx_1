CELL

Description: 
A cell is an instance of a netlist logic object, which can either be a leaf-cell or a hierarchical 
cell. A leaf-cell is a primitive, or a primitive macro, with no further logic detail in the netlist. 
A hierarchical cell is a module or block that contains one or more additional levels of logic, and 
eventually concludes at leaf-cells. 

There are different types of logic cells in the netlist, based on the PRIMITIVE_GROUP, 
PRIMITIVE_SUBGROUP, and PRIMITIVE_TYPE properties. All cells have a common set of properties, and 
each group may also have unique properties. The different groups, subgroups, and types of cells are 
enumerated below: 

Group           Subgroup        Type
BMEM            bram            RAMB18E1
                                RAMB36E1
                fifo            FIFO36E1
CARRY           others          CARRY
CLK             gclk            BUFG
                                MMCME2_ADV
DMEM            srl             SRL16E
FLOP_LATCH      flop            FDCE
                                FDPE
                                FDRE
                                FDSE
IO              gt              GTXE2_CHANNEL
                ibuf            IBUF
                                IBUFDS_GTE2
                obuf			OBUF
LUT             others          LUT1
                                LUT2
                                LUT3
                                LUT4
                                LUT5
                                LUT6
MULT            dsp             DSP48E1
MUXFX           others          MUXF7
                                MUXF8
OTHERS          others          GND
                                VCC
                                others
		
Related Objects: 
Cells can be hierarchical or leaf-cells, which are primitive. Leaf-cells have pins which are 
connected to nets to define the external netlist, and hierarchical cells contain ports that are 
associated with hierarchical pins, and which connect internally to nets to define the internal 
netlist. Cells are placed onto device resources on the target Xilinx FPGA. The cell can be placed 
onto a bel object in the case of basic logic such as flops, LUTs, and MUXes; or can be placed 
onto a site object in the case of larger logic cells such as BRAMs and DSPs. Bels are also collected 
into larger sites, called SLICEs, so a cell can be associated with a bel and a site object. In 
addition, sites are grouped into clock_regions, and so a cell can also be related to a clock_region. 
Cells are also associated with timing_paths in the design.

Properties: 
The following provides example Tcl commands you can use to report the properties associated with CELL 
objects of the different PRIMITIVE_GROUPS. You can copy and paste the example commands into the 
command line of the Tcl console to extract the properties from the desired PRIMITIVE_TYPE.

HIERARCHICAL CELL
	report_property -all [lindex [get_cells -hier -filter {!IS_PRIMITIVE}] 0]

BMEM
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == BMEM.bram.RAMB18E1}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == BMEM.bram.RAMB36E1}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == BMEM.fifo.FIFO36E1}] 0]

CARRY
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == CARRY.others.CARRY4}] 0]

CLK
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == CLK.gclk.BUFG}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == CLK.gclk.MMCME2_ADV}] 0]

DMEM
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == DMEM.srl.SRL16E}] 0]

FLOP_LATCH
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == FLOP_LATCH.flop.FDCE}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == FLOP_LATCH.flop.FDPE}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == FLOP_LATCH.flop.FDRE}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == FLOP_LATCH.flop.FDSE}] 0]

IO
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == IO.gt.GTXE2_CHANNEL}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == IO.ibuf.IBUF}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == IO.ibuf.IBUFDS_GTE2}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == IO.obuf.OBUF}] 0]

LUT
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == LUT.others.LUT1}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == LUT.others.LUT2}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == LUT.others.LUT3}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == LUT.others.LUT4}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == LUT.others.LUT5}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == LUT.others.LUT6}] 0]

MULT
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == MULT.dsp.DSP48E1}] 0]

MUXFX
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == MUXFX.others.MUXF7}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == MUXFX.others.MUXF8}] 0]

OTHERS
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == OTHERS.others.GND}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == OTHERS.others.VCC}] 0]
	report_property -all [lindex [get_cells -hier -filter {PRIMITIVE_TYPE == others.others.others}] 0]
