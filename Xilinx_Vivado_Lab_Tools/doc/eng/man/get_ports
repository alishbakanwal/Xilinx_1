
Description:

  Gets a list of port objects in the current design that match a specified
  search pattern. The default command gets a list of all ports in the design.

  Note: To improve memory and performance, the get_* commands return a
  container list of a single type of objects (e.g. cells, nets, pins, or
  ports). You can add new objects to the list (using lappend for instance),
  but you can only add the same type of object that is currently in the list.
  Adding a different type of object, or string, to the list is not permitted
  and will result in a Tcl error.

Arguments:

  -regexp - (Optional) Specifies that the search <patterns> are written as
  regular expressions. Both search <patterns> and -filter expressions must be
  written as regular expressions when this argument is used. Xilinx regular
  expression Tcl commands are always anchored to the start of the search
  string. You can add ".*" to the beginning or end of a search string to
  widen the search to include a substring. See
  http://perldoc.perl.org/perlre.html for help with regular expression
  syntax.

  Note: The Tcl built-in command regexp is not anchored, and works as a
  standard Tcl command. For more information refer to
  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.

  -nocase - (Optional) Perform case-insensitive matching when a pattern has
  been specified. This argument applies to the use of -regexp only.

  -filter <args> - (Optional) Filter the results list with the specified
  expression. The -filter argument filters the list of objects returned by
  get_ports based on property values on the ports. You can find the
  properties on an object with the report_property or list_property commands.
  In the case of the "ports" object, "PARENT" and "TYPE" are some of the
  properties that can be used to filter results.

  The filter search pattern should be quoted to avoid having to escape
  special characters that may be found in net, pin, or cell names, or other
  properties. String matching is case-sensitive and is always anchored to the
  start and to the end of the search string. The wildcard "*" character can
  be used at the beginning or at the end of a search string to widen the
  search to include a substring of the property value.

  Note: The filter returns an object if a specified property exists on the
  object, and the specified pattern matches the property value on the object.
  In the case of the "*" wildcard character, this will match a property with
  a defined value of "".

  For string comparison, the specific operators that can be used in filter
  expressions are "equal" (==), "not-equal" (!=), "match" (=~), and
  "not-match" (!~). Numeric comparison operators <, >, <=, and >= can also be
  used. Multiple filter expressions can be joined by AND and OR (&& and ||).
  The following gets input pins that do NOT contain the "RESET" substring
  within their name:

    get_pins * -filter {DIRECTION == IN && NAME !~ "*RESET*"}

  Boolean (bool) type properties can be directly evaluated in filter
  expressions as true or not true:

    -filter {IS_PRIMITIVE && !IS_LOC_FIXED}

  -of_objects <arg> - (Optional) Get the ports connected to the specified
  nets, bels, sites, clocks, timing paths, io_standards, iobanks, or
  package_pins; or ports associated with specified DRC violation objects.

  Note: The -of_objects option requires objects to be specified using the
  get_* commands, such as get_cells or get_pins, rather than specifying
  objects by name. In addition, -of_objects cannot be used with a search
  <pattern>.

  -match_style [sdc | ucf] - (Optional) Indicates that the search pattern
  matches UCF constraints or SDC constraints. The default is SDC.

  -scoped_to_current_instance - (Optional) This returns the top-level pins of
  the current instance. Applies the specified search <patterns> to find the
  instance pins on the current instance.

  -prop_thru_buffers - (Optional) This option returns the top-level ports
  connected to pins on the current instance. This option can be used with the
  -scoped_to_current_instance option to propagate the search from the pins of
  the current instance, through buffers, to the top-level ports of the
  design.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

  <patterns> - (Optional) Match ports against the specified patterns. The
  default pattern is the wildcard `*` which gets a list of all ports in the
  project. More than one pattern can be specified to find multiple ports
  based on different search criteria.

  Note: You must enclose multiple search patterns in braces, {}, or quotes,
  "", to present the list as a single element.

Examples:

  The following example gets a list of pins attached to the specified cell:

    get_ports -of_objects [lindex [get_cells] 1]

  Note: If there are no ports matching the pattern, the tool will return a
  warning.

  The following example runs the report_drc command on the current design,
  returns the list of violations in the specified DRC report, and then
  returns the ports associated with any violations of the unspecified I/O
  Standard rule (NSTD):

    report_drc -name drc_1 
    get_drc_violations -name drc_1 
    get_ports -of_objects [get_drc_violations -name drc_1 NSTD*]

  This example specifies a cell for the current instance, returns the pins
  scoped to the current instance, and returns the top-level ports connected
  to those pins:

    current_instance [get_cells dac_spi*] 
    get_ports -scoped_to_current_instance 
    get_ports -scoped_to_current_instance -prop_thru_buffers

See Also:

   *  current_instance
   *  get_cells
   *  get_clocks
   *  get_drc_violations
   *  get_nets
   *  get_timing_paths
   *  list_property
   *  report_drc
   *  report_property
