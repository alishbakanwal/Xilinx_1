
Description:

  Launches the ChipScope<tm tmtype="tm"></tm> Pro Analyzer tool for the
  active run, or a specified Implemented Design run. You can setup a Netlist
  Design for use with ChipScope prior to implementation, using the
  create_debug_core , create_debug_port, and connect_debug_port commands.

  The Implemented Design must also have a bitstream file generated by BitGen
  for launch_chipscope_analyzer to run. If BitGen has not been run, an error
  will be returned.

  Note: It is not enough to use the write_bitstream command to create a
  bitstream file. You must follow the steps outlined below in the second
  example.

Arguments:

  -run <arg> - The run name to use when launching the ChipScope Pro Analyzer.
  The specified run must be implemented and have a bitstream (.bit) file
  generated. ChipScope will use the bitstream file and the debug_nets.cdc
  file from the specified run.

  -csproject <arg> - The name of the project to open in ChipScope Pro
  Analyzer. If you do not specify the project name, the default project name
  of csdefaultproj.cpj will be used. When you specify the project name, you
  should also specify the .cpj extension.

  Note: The project is created in the project/project.data/sources_1/cs folder.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example launches ChipScope Pro Analyzer, specifying the
  implementation run to use and the name of the ChipScope project to create:

    
    launch_chipscope_analyzer -run impl_3 -csproject impl_3_cs_project

  The following example sets the add_step Bitgen property for the impl_4 run,
  launches the impl_4 run, and then launches the ChipScope Pro Analyzer on
  the specified run:

    set_property add_step Bitgen [get_runs impl_4] 
    launch_runs impl_4 -jobs 2 
    launch_chipscope_analyzer -run impl_4

  Note: In this example the ChipScope project will be called
  csdefaultproj.cpj .

See Also:

   *  connect_debug_port
   *  create_debug_core
   *  create_debug_port
   *  launch_runs
   *  set_property
   *  write_bitstream
