
Description:

  Get a list of hardware configuration memory (hw_cfgmem) objects created for
  the current hw_device.

  Xilinx FPGAs are configured by loading design-specific configuration data,
  in the form of a bitstream file, into the internal memory of the hw_device.
  The hw_cfgmem defines a flash memory device used for configuring and
  booting the Xilinx FPGA device. Once the hw_cfgmem object is created, and
  associated with the hw_device, the configuration memory can be programmed
  with the bitstream and other data using the program_hw_cfgmem command.

  The hw_cfgmem object is associated with the specified hw_device object
  through the PROGRAM.HW_CFGMEM property on the device object. The
  get_hw_cfgmems command lets you work with the hw_cfgmem object.

  This command returns a list of hw_cfgmem objects that match the specified
  search criteria, or returns an error if it fails.

Arguments:

  -regexp - (Optional) Specifies that the search <patterns> are written as
  regular expressions. Both search <patterns> and -filter expressions must be
  written as regular expressions when this argument is used. Xilinx regular
  expression Tcl commands are always anchored to the start of the search
  string. You can add ".*" to the beginning or end of a search string to
  widen the search to include a substring. See
  http://perldoc.perl.org/perlre.html for help with regular expression
  syntax.

  Note: The Tcl built-in command regexp is not anchored, and works as a
  standard Tcl command. For more information refer to
  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.

  -nocase - (Optional) Perform case-insensitive matching when a pattern has
  been specified. This argument applies to the use of -regexp only.

  -filter <args> - (Optional) Filter the results list with the specified
  expression. The -filter argument filters the list of objects returned by
  get_hw_cfgmems based on property values on the hw_cfgmem objects. You can
  find the properties on an object with the report_property or list_property
  commands.

  The filter search pattern should be quoted to avoid having to escape
  special characters that may be found in net, pin, or cell names, or other
  properties. String matching is case-sensitive and is always anchored to the
  start and to the end of the search string. The wildcard "*" character can
  be used at the beginning or at the end of a search string to widen the
  search to include a substring of the property value.

  Note: The filter returns an object if a specified property exists on the
  object, and the specified pattern matches the property value on the object.
  In the case of the "*" wildcard character, this will match a property with
  a defined value of "".

  For string comparison, the specific operators that can be used in filter
  expressions are "equal" (==), "not-equal" (!=), "match" (=~), and
  "not-match" (!~). Numeric comparison operators <, >, <=, and >= can also be
  used. Multiple filter expressions can be joined by AND and OR (&& and ||).
  The following gets input pins that do NOT contain the "RESET" substring
  within their name:

    get_pins * -filter {DIRECTION == IN && NAME !~ "*RESET*"}

  Boolean (bool) type properties can be directly evaluated in filter
  expressions as true or not true:

    -filter {IS_PRIMITIVE && !IS_LOC_FIXED}

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

  <patterns> - (Optional) Match hw_cfgmems against the specified patterns.
  The default pattern is the wildcard `*` which gets a list of all hw_cfgmems
  currently defined.

Example:

  The following example gets the hw_cfgmem objects associated with the
  current hw_device:

    get_hw_cfgmems

See Also:

   *  create_hw_cfgmem
   *  current_hw_device
   *  delete_hw_cfgmem
   *  get_hw_device
   *  get_parts
   *  get_property
   *  program_hw_cfgmem
   *  set_property
   *  write_cfgmem
