
Description:

  Note: You must use the open_hw command to open the Hardware Manager in the
  Vivado Design Suite before using this command.

  This command returns hardware server objects that are connected to the
  current instance of the Vivado Design Suite through the use of the
  connect_hw_server command.

  Hardware servers are instances of the Xilinx hardware server (hw_server)
  application running remotely, or on the local machine. The hardware server
  manages connections to a hardware target, for instance a hardware board
  containing a JTAG chain of one or more Xilinx devices to be used for
  programming and debugging your FPGA design.

  This command returns a list of connected hardware server objects.

Arguments:

  -regexp - (Optional) Specifies that the search <patterns> are written as
  regular expressions. Both search <patterns> and -filter expressions must be
  written as regular expressions when this argument is used. Xilinx regular
  expression Tcl commands are always anchored to the start of the search
  string. You can add ".*" to the beginning or end of a search string to
  widen the search to include a substring. See
  http://perldoc.perl.org/perlre.html for help with regular expression
  syntax.

  Note: The Tcl built-in command regexp is not anchored, and works as a
  standard Tcl command. For more information refer to
  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.

  -nocase - (Optional) Perform case-insensitive matching when a pattern has
  been specified. This argument applies to the use of -regexp only.

  -filter <args> - (Optional) Filter the results list with the specified
  expression. The -filter argument filters the list of objects returned by
  get_hw_servers based on property values on the hardware server objects. You
  can find the properties on an object with the report_property or
  list_property commands. In the case of the "hw_server" object, "HOST",
  "NAME" and "PORT" are some of the properties that can be used to filter
  results.

  The filter search pattern should be quoted to avoid having to escape
  special characters that may be found in net, pin, or cell names, or other
  properties. String matching is case-sensitive and is always anchored to the
  start and to the end of the search string. The wildcard "*" character can
  be used at the beginning or at the end of a search string to widen the
  search to include a substring of the property value.

  Note: The filter returns an object if a specified property exists on the
  object, and the specified pattern matches the property value on the object.
  In the case of the "*" wildcard character, this will match a property with
  a defined value of "".

  For string comparison, the specific operators that can be used in filter
  expressions are "equal" (==), "not-equal" (!=), "match" (=~), and
  "not-match" (!~). Numeric comparison operators <, >, <=, and >= can also be
  used. Multiple filter expressions can be joined by AND and OR (&& and ||).
  The following gets input pins that do NOT contain the "RESET" substring
  within their name:

    get_pins * -filter {DIRECTION == IN && NAME !~ "*RESET*"}

  Boolean (bool) type properties can be directly evaluated in filter
  expressions as true or not true:

    -filter {IS_PRIMITIVE && !IS_LOC_FIXED}

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

  <patterns> - (Optional) Match hw_servers against the specified patterns.
  The default pattern is the wildcard `*` which gets a list of all hw_servers
  currently connected.

Example:

  The following example returns a list of all hw_servers connected to the
  Vivado Design Suite:

    
    get_hw_servers

See Also:

   *  connect_hw_server
   *  current_hw_server
   *  disconnect_hw_server
   *  refresh_hw_server
