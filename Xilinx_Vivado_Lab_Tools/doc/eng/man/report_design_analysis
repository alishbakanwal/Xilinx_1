
Description:

  Provides timing data on critical path characteristics and complexity of the
  design to help identify and analyze problem areas that are subject to
  timing closure issues and routing congestion. For more information on this
  command refer to the Vivado Design Suite User Guide: Design Analysis and
  Closure Techniques (UG906).

  The report_design_analysis command currently has three modes of operation:

   *  Timing: reports timing and physical characteristics of timing paths.

   *  Complexity: analyzes the design for routing complexity and LUT
      distribution.

   *  Congestion: analyzes the design for routing congestion.

  In timing mode, the command calls the static timing engine to analyze
  critical path data and report the characteristics of each path. The path
  characteristics include important elements such as clock skew, placement
  obstacles such as crossing clock regions, and physical constraints such as
  Pblocks and LOCs. The list of paths can be extended to include a number of
  top critical paths or specific paths can be analyzed by providing timing
  path objects to the command. The reports can also be extended to show the
  paths preceding and following the critical path.

  The following are definitions of the characteristics of the paths reported
  in timing mode:

   *  PATH_TYPE: either SETUP or HOLD.

   *  REQUIREMENT: delay requirement from static timing analysis.

   *  PATH DELAY: data path delay from static timing analysis.

   *  LOGIC DELAY: the portion of the PATH DELAY attributed to logic on the
      path.

   *  NET DELAY: the portion of the PATH DELAY attributed to wires on the
      path. Note that the net delay is based on the estimated or actual
      routing delay as specified by the set_delay_model command.

   *  CLOCK SKEW: difference in delay between the source and destination
      clocks.

   *  SLACK: path timing slack from static timing analysis.

   *  CLOCK RELATIONSHIP: SAME_CLOCK or RELATED_CLOCK. Helps identify
      potentially missed inter-clock constraints.

   *  TIMING EXCEPTION: the timing exceptions, like set_false_path or
      set_multicycle_path, that are assigned to the path.

   *  LOGIC LEVELS: number of logic levels between the source and
      destination, reported when the -logic_level_distribution is specified.

   *  LOGICAL PATH: shorthand notation showing the ordered list of cells in
      the path including the start point and end point.

   *  START POINT CLOCK: the clock domain of the start point of the path.

   *  END POINT CLOCK: the clock domain of the end point of the path.

   *  START POINT PIN PRIMITIVE: the library cell and pin of the start point
      of the path.

   *  END POINT PIN PRIMITIVE: the library cell and pin of the end point of
      the path.

   *  START POINT PIN: the instance and pin name of the start point.

   *  END POINT PIN: the instance and pin name of the end point.

   *  COMB DSP: number of combinational DSP blocks in the path.

   *  DOA REG: the number of DOA registers on the path.

   *  DOB REG: the number of DOB registers on the path.

   *  MREG: the number of MREG registers on the path.

   *  PREG: the number of PREG registers on the path.

   *  BRAM CROSSINGS: number of block RAM columns traversed by the path.

   *  DSP CROSSINGS: number of DSP block columns traversed by the path.

   *  IO CROSSINGS: number of IO columns traversed by the path.

   *  CONFIG CROSSINGS: the number of CONFIG tile traversed by the path.

   *  SLR CROSSINGS: number of SLRs traversed by the path.

   *  BOUNDING BOX SIZE: the rectangular area covered by the critical path,
      measured in RPM GRID units which are based on the device RPM_X
      (horizontal) and RPM_Y (vertical) site coordinates. Since different
      sites (slices, DSP, block RAM, etc.) have different sizes, each site
      has unique RPM_X and RPM_Y properties to pinpoint its location within
      the device.

   *  CLOCK REGION DISTANCE: An ordered pair showing the number of clock
      regions traversed in the horizontal and vertical directions from path
      startpoint to endpoint. Minimizing clock region crossings can improve
      critical path delay and clock skew.

       -  Example 1: A critical path begins in clock region X1Y1 and ends in
          clock region X3Y3, resulting in a CLOCK_REGION_DISTANCE of (2, 2).

       -  Example 2: a critical path begins in clock region X2Y1 and ends in
          X0Y0, resulting in a CLOCK_REGION_DISTANCE of (-2, -1).

   *  PBLOCKS: number of Pblocks traversed by the path.

   *  HIGH FANOUT: the greatest fanout of a net in the path.

   *  CUMULATIVE FANOUT: the total fanout on the path.

   *  DONT TOUCH: number of cells in the path with DONT_TOUCH value of TRUE.
      A value of TRUE for DONT_TOUCH on a cell prevents it from being
      optimized, disabling potentially beneficial optimizations such as
      phys_opt_design replication.

   *  MARK DEBUG: number of cells in the path with a MARK_DEBUG value of
      TRUE. By default a net with MARK_DEBUG has DONT_TOUCH set to TRUE which
      disables optimization on that net. The DONT_TOUCH can be set to FALSE
      to enable optimization and potentially improve timing.

   *  FIXED LOC: number of placed cells in the path with an IS_LOC_FIXED
      value of TRUE. FIXED cells cannot be moved by either place_design or
      phys_opt_design.

   *  FIXED ROUTE: number of routed nets in the path with IS_ROUTE_FIXED
      value of TRUE. FIXED routes cannot be ripped up and rerouted by
      route_design.

   *  HOLD FIX DETOUR: the amount of routing detour provided to fix hold
      timing to post-route critical paths.

   *  COMBINED LUT PAIRS: number of LUT cells in the path that have been
      combined with other LUT cells into the same LUT BEL to use both the O6
      and O5 outputs. LUT cells that have been combined with LUTNM, HLUTNM,
      or SOFT_HLUTNM can be uncombined and re-placed by setting their HLUTNM
      properties to an empty string. This allows exploring LUT combining and
      un-combining effects on timing and congestion reduction.

  In complexity mode, the command performs complexity analysis of the current
  design and reports the Rent Exponent which is a measure of complexity, the
  Average Fanout, and a Primitive Histogram. The analysis can be performed on
  the top-level design or recursively on hierarchical levels of the design,
  with the ability to control the level of recursion.

  The following are definitions of the characteristics reported in complexity
  mode:

   *  Rent: The Rent exponent, as defined by Rent's rule, is a measure of
      interconnect complexity in a netlist. Higher Rent indicates higher
      complexity and greater difficulty to avoid routing congestion. Most
      designs have a Rent in the 0.5 to 0.6 range. A Rent value of 0.65 is
      considered high and 0.85 is considered very high.

   *  Average Fanout: This is the average fanout of a logic cell in the
      design, excluding global buffers. Higher average fanout may result in
      more difficulty for placement and routing. While absolute values may
      not predict difficultly, relative values between designs or between
      hierarchical levels may be more indicative.

   *  Primitive Histogram: This displays the totals of certain primitive
      types used in the design. A high Rent may be caused by a predominance
      of LUT6 cells. If there are many more LUT6 than other size LUTs, the
      Rent may be reduced by adopting a more area-focused synthesis strategy.

  Note: The complexity characteristics may not always predict routing
  congestion but can be used to pinpoint problem areas when congestion issues
  occur.

  In congestion mode the command analyzes the design and provides metrics to
  help you alleviate routing congestion. Using the results from the
  report_design_analysis command, you can change placement to avoid specific
  routing hot spots.

  The command returns the file created, or returns the analysis results to
  the Tcl console, or returns an error if it fails.

Arguments:

  -file <arg> - (Optional) Write the analysis results into the specified
  file. The specified file will be overwritten if one already exists unless
  -append is also specified.

  Note: If the path is not specified as part of the file name, the file will
  be written into the current working directory, or the directory from which
  the tool was launched.

  -append - (Optional) Append the output of the command to the specified file
  rather than overwriting it.

  Note: The -append option can only be used with the -file option.

  -return_string - (Optional) Directs the output to a Tcl string rather than
  to the standard output. The Tcl string can be captured by a variable
  definition and parsed or otherwise processed.

  Note: This argument cannot be used with the -file option.

  -complexity - (Optional) Perform complexity analysis of the design and
  report the Rent Exponent, Average Fanout, and Primitive Histogram.

  Note: The -complexity option can be specified with -cells and
  -hierarchical_depth to control the analysis of the design or cells.

  -cells <arg> - (Optional) Specify the cells to use when analyzing
  complexity. Requires the -complexity option. Cells should be hierarchical
  modules of the design. Use this option to specify a cell other than the top
  cell for analysis. Cells can be specified by name, or as objects returned
  by the get_cells command. Cannot be used with -hierarchical_depth.

  -bounding_boxes <args> - (Optional) Specify regions of the device to
  analyze for complexity. This limits the area and reduces the time required
  for analysis. The argument is specified as a pair of device tiles
  representing the "lower-left:upper-right" corners of the bounding box.
  Multiple windows can be specified as follows:

    -bounding_boxes { "CLE_M_X21Y239:CLEL_R_X28Y254" \ 
       "CLEL_R_X18Y171:CLE_M_X26Y186" }

  Note: A space is required between the `{` and the start of the bounding box
  as shown above.

  -hierarchical_depth <arg> - (Optional) Specify that the complexity analysis
  should be performed on the hierarchy of the design, rather than just the
  top-level of the design, or the specified cell. In this case, the hierarchy
  of the design or cell will be examined to the specified depth. The default
  setting is 1. Requires the -complexity option.

  -congestion - (Optional) Reports the vertical and horizontal routing
  congestion of the placed design on a per tile basis. This option can only
  be run after implementation, or after place_design . Congestion analysis is
  performed on the whole design, even if -cells is specified for complexity
  analysis.

  -timing - (Optional) Runs design analysis in timing mode, to report setup
  and hold characteristics of critical paths. This is the default analysis
  run by the report_design_analysis command when no other options are
  specified.

  Note: The -timing option can be specified with -setup , -hold,
  -of_timing_paths , -max_paths, and -extend , but can not be used with
  -cells or -hierarchical_depth.

  -setup - (Optional) Limit the reporting scope to only setup path
  characteristics. Requires the -timing option.

  -hold - (Optional) Limit the reporting scope to only hold path
  characteristics. Requires the -timing option.

  Note: When -hold is used with the -extend option this generates two
  side-by-side reports: the setup report showing the worst setup paths on the
  left, and the corresponding hold report for those paths on the right. This
  shows hold characteristics side-by-side with the setup characteristics of
  the same start and endpoints to make it easier to see if hold and setup
  fixing are affecting one another.

  -full_logical_pin - (Optional) Output the full hierarchical pin name in the
  design analysis report.

  -routed_vs_estimated - (Optional) Reports the estimated vs. actual routed
  delays side-by-side for the same path.

  Note: This requires the set_delay_model -interconnect to be set to actual
  in order to provide both the estimated and actual delays.

  -logic_level_distribution - (Optional) Reports logic-level distribution of
  the -timing report to help identify the longer paths in the design. The
  logic levels distribution can be very runtime intensive so it is not
  reported by default.

  Note: Remember that -logic_level_distribution is performed on critical
  timing paths identified by the -timing option. If the purpose of analysis
  is to identify all of the paths with the greatest number of logic levels in
  the design, you can use -of_timing_paths with the get_timing_paths command
  to define the timing paths of interest. In addition, you can use the
  LOGIC_LEVELS property on timing paths to obtain this information.

  -logic_level_dist_paths <arg> - (Optional) This option can be specified
  with -logic_level_distribution to specify the number of critical paths for
  analyzing logic level distribution. Specified as a value greater than or
  equal to 1. The default is 1000 paths.

  -return_timing_paths - (Optional) This must be used with the
  -end_point_clock and -logic_levels options. Directs the
  report_design_analysis command to return timing_path objects as well as the
  analysis report. The timing_path objects can be passed to other analysis
  commands that take timing paths such as report_timing, or even passed to
  the -of_timing_paths option of a second report_design_analysis command.

  Note: If -return_timing_paths is specified, -timing will be disabled so
  that no timing results are returned. If no timing paths match the specified
  options, the command will return the message "No timing paths returned".

  -of_timing_paths <args> - (Optional) Specify a list of timing path objects
  for analysis. Requires the -timing option. The command will report
  characteristics of the specified paths instead of the most critical paths.
  You can use the get_timing_paths command to provide the timing path objects
  for -of_timing_paths .

  -max_paths <arg> - Specify the number of paths to report for critical path
  analysis. The default number of critical paths analyzed is 1. Requires the
  -timing option.

  -extend - (Optional) Perform an extended setup analysis of the critical
  paths. The hold analysis is not performed. Requires the -timing option.
  Three paths are reported for an extended analysis:

   *  The path ending at critical path start point.

   *  The critical path.

   *  The path starting at critical path endpoint.

  -end_point_clock <arg> - (Optional) This must be used with the
  -return_timing_paths and -logic_levels options. This specifies the return
  of timing paths with the specified end point clock domain, and with the
  specified logic levels. The clock can be specified by name, or as an object
  returned by the get_clocks command.

  -logic_levels <arg> - (Optional) This must be used with the
  -return_timing_paths and -end_point_clock options. This specifies the
  return of timing paths with the specified end point clock domain, and with
  the specified logic levels. You can specify one logic level as it relates
  to the Logic Level bins reported by the -logic_level_distribution option:
  0, 1, 2, 3....{11-15}, {16-20}.

  -name <arg> - (Optional) The name of the Design Analysis Report view to
  display in the tool GUI mode. If the name has already been used in an open
  Report view, that view will be closed and a new report opened.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example performs complexity analysis of the two specified
  cells:

    
    report_design_analysis -complexity -cells {cpuEngine fftEngine}

  The following example performs complexity analysis of the specified
  bounding boxes:

    report_design_analysis -complexity \ 
       -bounding_boxes { "CLE_M_X21Y239:CLEL_R_X28Y254" \ 
       "CLEL_R_X18Y171:CLE_M_X26Y186" }

  The following example provides an extended analysis of the worst critical
  path from the Block RAMs in the design:

    report_design_analysis -timing -of_timing_paths \ 
       [get_timing_paths -from [all_rams]]

  The following example performs complexity analysis for the specified cell,
  to a depth of two hierarchical levels, and performs timing and congestion
  analysis on the design:

    report_design_analysis -complexity -hierarchical_depth 2  
       -timing -setup -hold -max_paths 10 -logic_level_distribution \ 
       -logic_level_dist_paths 20 -congestion

  The following example uses the report_design_analysis command to return the
  timing paths with the specified end point clock and logic levels, and
  passes those paths to the report_timing command for analysis:

    report_timing -of_objects [report_design_analysis  
       -end_point_clock clk_rx_clk_core -logic_levels 11-15 \ 
       -timing -return_timing_paths]

See Also:

   *  config_design_analysis
   *  get_cells
   *  get_timing_paths
   *  place_design
   *  report_timing
   *  report_timing_summary
   *  set_delay_model
   *  set_false_path
   *  set_multicycle_path
