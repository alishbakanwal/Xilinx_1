
Description:

  This command compares the bitstream assigned to the PROGRAM.FILE property
  on the specified hw_device with the bitstream programmed into the device
  with the program_hw_devices command.

  Filtered through a required mask file, associated with the hw_device, the
  verify_hw_device command uses both the bitstream and mask file to compare
  only the bits that are marked as important in the mask file. A mask file
  can be created along with the bitstream using the write_bitstream command,
  and is associated with the hw_device using the create_hw_bitstream command.

  Note: Verification cannot be performed on devices programmed with encrypted
  bitstreams, other than to verify that the -key has been programmed.

  The verify_hw_device command reports that the readback data matches the
  programmed bitstream if successful, or returns an error if it fails.

Arguments:

  -key [ efuse | bbr ] - (Optional) Verify the encryption key is programmed
  on the specified hw_device in eFUSE registers, or in battery-backed RAM
  (bbr).

  -user_efuse <arg> - (Optional) Verify the provided HEX value is programmed
  into the FUSE_USER register on the hw_device.

  -control_efuse <arg> - (Optional) Verify the provided HEX value is
  programmed into the FUSE_CNTL register on the hw_device.

  -security_efuse <arg> - (Optional) Verify the provided HEX value is
  programmed into the FUSE_SEC register on the hw_device.

  -verbose - (Optional) Report eFUSE register values when verifying the device.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  <hw_device> - (Optional) Specify one or more hw_device objects to verify.
  The hw_device must be specified as an object as returned by the
  get_hw_devices command. If the device is not specified, the
  current_hw_device will be verified.

Example:

  The following example verifies the bitstream on current hardware device:

    verify_hw_device [current_hw_device]

See Also:

   *  connect_hw_server
   *  create_hw_device
   *  create_hw_target
   *  current_hw_device
   *  current_hw_target
   *  get_hw_devices
   *  get_hw_targets
   *  open_hw_target
   *  program_hw_devices
   *  write_bitstream
   *  write_hw_svf
