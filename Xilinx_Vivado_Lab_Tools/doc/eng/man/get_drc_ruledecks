
Description:

  Gets a list of currently defined rule decks for use with the report_drc
  command.

  A rule deck is a collection of design rule checks grouped for convenience,
  to be run at different stages of the FPGA design flow, such as during I/O
  planning or placement. The tool comes with a set of factory defined rule
  decks, but you can also create new user-defined rule decks with the
  create_drc_ruledeck command, and add checks to the rule deck using the
  add_drc_checks command.

  Note: To improve memory and performance, the get_* commands return a
  container list of a single type of objects (e.g. cells, nets, pins, or
  ports). You can add new objects to the list (using lappend for instance),
  but you can only add the same type of object that is currently in the list.
  Adding a different type of object, or string, to the list is not permitted
  and will result in a Tcl error.

Arguments:

  -of_objects <args> - (Optional) Get the DRC ruledeck object of the
  associated rule check objects.

  -regexp - (Optional) Specifies that the search <patterns> are written as
  regular expressions. Both search <patterns> and -filter expressions must be
  written as regular expressions when this argument is used. Xilinx regular
  expression Tcl commands are always anchored to the start of the search
  string. You can add ".*" to the beginning or end of a search string to
  widen the search to include a substring. See
  http://perldoc.perl.org/perlre.html for help with regular expression
  syntax.

  Note: The Tcl built-in command regexp is not anchored, and works as a
  standard Tcl command. For more information refer to
  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.

  -nocase - (Optional) Perform case-insensitive matching when a pattern has
  been specified. This argument applies to the use of -regexp only.

  -filter <args> - (Optional) Filter the results list with the specified
  expression. The -filter argument filters the list of objects returned by
  get_drc_ruledecks based on property values on the rule decks. You can find
  the properties on an object with the report_property or list_property
  commands.

  The filter search pattern should be quoted to avoid having to escape
  special characters that may be found in net, pin, or cell names, or other
  properties. String matching is case-sensitive and is always anchored to the
  start and to the end of the search string. The wildcard "*" character can
  be used at the beginning or at the end of a search string to widen the
  search to include a substring of the property value.

  Note: The filter returns an object if a specified property exists on the
  object, and the specified pattern matches the property value on the object.
  In the case of the "*" wildcard character, this will match a property with
  a defined value of "".

  For string comparison, the specific operators that can be used in filter
  expressions are "equal" (==), "not-equal" (!=), "match" (=~), and
  "not-match" (!~). Numeric comparison operators <, >, <=, and >= can also be
  used. Multiple filter expressions can be joined by AND and OR (&& and ||).
  The following gets input pins that do NOT contain the "RESET" substring
  within their name:

    get_pins * -filter {DIRECTION == IN && NAME !~ "*RESET*"}

  Boolean (bool) type properties can be directly evaluated in filter
  expressions as true or not true:

    -filter {IS_PRIMITIVE && !IS_LOC_FIXED}

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

  <patterns> - (Optional) Match rule decks against the specified patterns.
  The default pattern is the wildcard `*` which gets all rule decks. More
  than one pattern can be specified to find multiple rule decks based on
  different search criteria.

  Note: You must enclose multiple search patterns in braces, {}, or quotes,
  "", to present the list as a single element.

Examples:

  The following example gets a list of rule decks defined in the current
  project:

    
    get_drc_ruledecks

  The following example lists each of the checks associated with the
  placer_checks rule deck on a separate line:

    foreach rule [get_drc_checks -of_objects \ 
       [get_drc_ruledecks placer_checks]] {puts $rule}

See Also:

   *  add_drc_checks
   *  create_drc_ruledeck
   *  list_property
   *  report_drc
   *  report_property
