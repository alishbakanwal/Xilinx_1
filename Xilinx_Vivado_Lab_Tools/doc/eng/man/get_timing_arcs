
Description:

  Gets a list of timing arcs for the specified objects. You can filter the
  timing arcs according to specified properties.

  Timing arcs are a part of a timing path. A timing arc can be a wire between
  two pins, or can be the internal path of a logic instance between an input
  pin and output pin, or clock input and data output pins.

  Note: To improve memory and performance, the get_* commands return a
  container list of a single type of objects (e.g. cells, nets, pins, or
  ports). You can add new objects to the list (using lappend for instance),
  but you can only add the same type of object that is currently in the list.
  Adding a different type of object, or string, to the list is not permitted
  and will result in a Tcl error.

Arguments:

  -from <args> - (Optional) The starting points of the timing arcs to be
  returned. Ports, pins, or nets can be specified as startpoints.

  -to <args> - (Optional) The endpoints or destination objects of timing arcs
  to be returned. Ports, pins, or nets can be specified as endpoints.

  -filter <args> - (Optional) Filter the results list with the specified
  expression. The -filter argument filters the list of objects returned by
  get_timing_arcs based on property values on the timing arcs. You can find
  the properties on an object with the report_property or list_property
  commands. In the case of the "timing arc" object, "FROM_PIN", "TO_PIN" and
  "LIB_CELL" are some of the properties that can be used to filter results.

  The filter search pattern should be quoted to avoid having to escape
  special characters that may be found in net, pin, or cell names, or other
  properties. String matching is case-sensitive and is always anchored to the
  start and to the end of the search string. The wildcard "*" character can
  be used at the beginning or at the end of a search string to widen the
  search to include a substring of the property value.

  Note: The filter returns an object if a specified property exists on the
  object, and the specified pattern matches the property value on the object.
  In the case of the "*" wildcard character, this will match a property with
  a defined value of "".

  For string comparison, the specific operators that can be used in filter
  expressions are "equal" (==), "not-equal" (!=), "match" (=~), and
  "not-match" (!~). Numeric comparison operators <, >, <=, and >= can also be
  used. Multiple filter expressions can be joined by AND and OR (&& and ||).
  The following gets input pins that do NOT contain the "RESET" substring
  within their name:

    get_pins * -filter {DIRECTION == IN && NAME !~ "*RESET*"}

  Boolean (bool) type properties can be directly evaluated in filter
  expressions as true or not true:

    -filter {IS_PRIMITIVE && !IS_LOC_FIXED}

  -of_objects <args> - (Optional) Get timing arcs from the Specified cell
  objects. If a cell is specified, all cell_arcs of that cell are returned.

  Note: The -of_objects option requires objects to be specified using the
  get_* commands, such as get_cells or get_pins, rather than specifying
  objects by name. In addition, -of_objects cannot be used with a search
  <pattern>.

  -quiet - (Optional) Execute the command quietly, returning no messages from
  the command. The command also returns TCL_OK regardless of any errors
  encountered during execution.

  Note: Any errors encountered on the command-line, while launching the
  command, will be returned. Only errors occurring inside the command will be
  trapped.

  -verbose - (Optional) Temporarily override any message limits and return
  all messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

Examples:

  The following example returns the timing arc from the output pin of the
  specified buffer:

    
    report_property -all [get_timing_arcs -of_objects [get_cells go_IBUF_inst]]

  The following example returns the timing arcs of the specified cell:

    get_timing_arcs -of_objects [get_cells count_reg[6]] 
    {count_reg[6]/C --> count_reg[6]/Q [Reg Clk to Q] }  
    {count_reg[6]/C --> count_reg[6]/D [setup] }  
    {count_reg[6]/C --> count_reg[6]/D [hold] }  
    {count_reg[6]/C --> count_reg[6]/CLR [recovery] }  
    {count_reg[6]/C --> count_reg[6]/CE [hold] }  
    {count_reg[6]/C --> count_reg[6]/CLR [removal] }  
    {count_reg[6]/C --> count_reg[6]/CE [setup] }  
    {count_reg[6]/CLR --> count_reg[6]/Q [Reg Set/Clr] }

See Also:

   *  get_timing_path
   *  report_timing
   *  set_msg_limit
