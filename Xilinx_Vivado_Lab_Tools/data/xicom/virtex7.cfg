###############################################################################
# impact.acd: virtex7 device specific data file.
#
# $Header: /devl/xcs/repo/env/Jobs/Cse/XilConfig/data/virtex7.acd,v 1.20 2012/10/22 23:34:24 junf Exp $
#
###############################################################################

###############################
# Properties                  #
###############################
PROPERTY = {
  WAITCLOCKCYCLES = 100; 
  ISC_STYLE_PROGRAM = TRUE; 
  ISC_REGISTER_SIZE = 32; 
  REC_SIZE = 32; 
  KEY_REC_SIZE = 32; 
  PAD_SIZE = 64; 
  SUPPORTED = TRUE; 
  DEVICE_TYPE = "FPGA"; 
  IDCODE = TRUE; 
  VERIFY_PROGRESS_COUNT = "DYNAMIC_CALCULATION"; 
  CHECKSUM_PROGRESS_COUNT = "DYNAMIC_CALCULATION"; 
  BLANKCHECK_PROGRESS_COUNT = "DYNAMIC_CALCULATION"; 
  PROGRAM_PROGRESS_COUNT = "DYNAMIC_CALCULATION"; 
  READBACK_PROGRESS_COUNT = "DYNAMIC_CALCULATION"; 
  ERASE_PROGRESS_COUNT = "DYNAMIC_CALCULATION"; 
  READBACK_OFFSET = 0; 
  ISC_FUSE = "XSC_DNA"; 
  ISC_ENABLE = "ISC_ENABLE"; 
  ISC_DISABLE = "ISC_DISABLE"; 
  ISC_ADV_FPGA_OPTIMIZATION = TRUE; 
  SMAP_ADVANCED_READBACK = TRUE; 
  SPI_SUPPORTED = "TRUE"; 
  BPI_SUPPORTED = "TRUE"; 
  DONE_BIT = 5; 
  INIT_BIT = 4; 
  CONCURRENT_CLASS = "CCChain"; 
  USERCODE = TRUE; 
  NUM_PROCESSOR = 0; 
  FRAME_SIZE = 3232;
  STATUS_LOCATION_31 = "[31] RESERVED"; 
  STATUS_LOCATION_30 = "[30] CFGBVS PIN"; 
  STATUS_LOCATION_29 = "[29] BAD PACKET ERROR"; 
  STATUS_LOCATION_28 = "[28] PUDC_B PIN"; 
  STATUS_LOCATION_27 = "[27] HMAC ERROR"; 
  STATUS_LOCATION_26 = "[26] CFG BUS WIDTH DETECTION"; 
  STATUS_LOCATION_25 = "[25] CFG BUS WIDTH DETECTION"; 
  STATUS_LOCATION_24 = "[24] RESERVED"; 
  STATUS_LOCATION_23 = "[23] RESERVED"; 
  STATUS_LOCATION_22 = "[22] RESERVED"; 
  STATUS_LOCATION_21 = "[21] RESERVED"; 
  STATUS_LOCATION_20 = "[20] CFG STARTUP STATE MACHINE PHASE"; 
  STATUS_LOCATION_19 = "[19] CFG STARTUP STATE MACHINE PHASE"; 
  STATUS_LOCATION_18 = "[18] CFG STARTUP STATE MACHINE PHASE"; 
  STATUS_LOCATION_17 = "[17] SYSTEM MONITOR OVER-TEMP ALARM STATUS"; 
  STATUS_LOCATION_16 = "[16] SECURITY ERROR"; 
  STATUS_LOCATION_15 = "[15] IDCODE ERROR"; 
  STATUS_LOCATION_14 = "[14] DONE PIN"; 
  STATUS_LOCATION_13 = "[13] DONE INTERNAL SIGNAL STATUS"; 
  STATUS_LOCATION_12 = "[12] INIT_B PIN"; 
  STATUS_LOCATION_11 = "[11] INIT_B INTERNAL SIGNAL STATUS"; 
  STATUS_LOCATION_10 = "[10] MODE PIN M[2]"; 
  STATUS_LOCATION_9 = "[9] MODE PIN M[1]"; 
  STATUS_LOCATION_8 = "[8] MODE PIN M[0]"; 
  STATUS_LOCATION_7 = "[7] GHIGH STATUS"; 
  STATUS_LOCATION_6 = "[6] GWE STATUS"; 
  STATUS_LOCATION_5 = "[5] GTS_CFG_B STATUS"; 
  STATUS_LOCATION_4 = "[4] END OF STARTUP (EOS) STATUS"; 
  STATUS_LOCATION_3 = "[3] DCI MATCH STATUS"; 
  STATUS_LOCATION_2 = "[2] PLL LOCK STATUS"; 
  STATUS_LOCATION_1 = "[1] DECRYPTOR ENABLE"; 
  STATUS_LOCATION_0 = "[0] CRC ERROR"; 
  BOOTSTS_15 = "[15] HMAC_ERROR_1 - HMAC ERROR"; 
  BOOTSTS_14 = "[14] WRAP_ERROR_1 - BPI FLASH ADDRESS COUNTER WRAP AROUND ERROR"; 
  BOOTSTS_13 = "[13] CRC_ERROR_1 - CYCLIC REDUNDANCY CHECK (CRC) ERROR"; 
  BOOTSTS_12 = "[12] ID_ERROR_1 - FPGA DEVICE IDCODE ERROR"; 
  BOOTSTS_11 = "[11] WTO_ERROR_1 - WATCHDOG TIME OUT ERROR"; 
  BOOTSTS_10 = "[10] IPROG_1 - INTERNAL WARMBOOT (IPROG) TRIGGERED RECONFIGURATION"; 
  BOOTSTS_9 = "[9] FALLBACK_1 - FALLBACK TRIGGERED RECONFIGURATION"; 
  BOOTSTS_8 = "[8] VALID_1 - ERROR OR END OF STARTUP (EOS) DETECTED"; 
  BOOTSTS_7 = "[7] HMAC_ERROR_0 - HMAC ERROR"; 
  BOOTSTS_6 = "[6] WRAP_ERROR_0 - BPI FLASH ADDRESS COUNTER WRAP AROUND ERROR"; 
  BOOTSTS_5 = "[5] CRC_ERROR_0 - CYCLIC REDUNDANCY CHECK (CRC) ERROR"; 
  BOOTSTS_4 = "[4] ID_ERROR_0 - FPGA DEVICE IDCODE ERROR"; 
  BOOTSTS_3 = "[3] WTO_ERROR_0 - WATCHDOG TIME OUT ERROR"; 
  BOOTSTS_2 = "[2] IPROG_0 - INTERNAL WARMBOOT (IPROG) TRIGGERED RECONFIGURATION"; 
  BOOTSTS_1 = "[1] FALLBACK_0 - FALLBACK TRIGGERED RECONFIGURATION"; 
  BOOTSTS_0 = "[0] VALID_0 - ERROR OR END OF STARTUP (EOS) DETECTED"; 
  EFUSE_SUPPORTED = TRUE; 
  EFUSE_AES_ONLY_BIT = 0; 
  EFUSE_AES_EXCLUSIVE_BIT = 1; 
  EFUSE_KEY_AND_USER_WRITE_ENABLE_BIT = 2; 
  EFUSE_KEY_READ_ENABLE_BIT = 3; 
  EFUSE_USER_READ_ENABLE_BIT = 4; 
  EFUSE_CNTL_WRITE_ENABLE_BIT = 5; 
  EFUSE_PROGRAM_WAIT_TIME = 9; 
  EFUSE_NO_CDR_BIT_INDEX = 4; 
  EFUSE_TPREF_SEL_BIT_INDEX = 13; 
  EFUSE_TPREF_SEL_BIT_LENGTH = 2; 
  EFUSE_PROGRAM_VPP_SEL = 9; # in decimal
  EFUSE_PROGRAM_VPP_SEL_BIT_LENGTH = 5; 
  EFUSE_PROGRAM_VPP_SEL_BIT_INDEX = 19; 
  EFUSE_PROGRAM_PROGRESS_COUNT = 0; 
  EFUSE_MAX_PROGRAM_RETRY_COUNT = 2; 
  EFUSE_KEY_REG_BIT_LENGTH = 256; 
  EFUSE_ID_REG_BIT_LENGTH = 64; 
  EFUSE_USER_REG_BIT_LENGTH = 32; 
  EFUSE_LO_USER_REG_BIT_LENGTH = 8; 
  EFUSE_HI_USER_REG_BIT_LENGTH = 24; 
  EFUSE_CNTL_REG_BIT_LENGTH = 14; 
  EFUSE_CNTL_REGISTER_BIT_31 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_30 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_29 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_28 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_27 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_26 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_25 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_24 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_23 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_22 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_21 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_20 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_19 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_18 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_17 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_16 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_15 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_14 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_13 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_12 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_11 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_10 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_9 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_8 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_7 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_6 = "NOT_VALID"; 
  EFUSE_CNTL_REGISTER_BIT_5 = "Disable Control Register Write"; 
  EFUSE_CNTL_REGISTER_BIT_4 = "Disable User Register Read"; 
  EFUSE_CNTL_REGISTER_BIT_3 = "Disable Key Register Read"; 
  EFUSE_CNTL_REGISTER_BIT_2 = "Disable Key / User Register Write"; 
  EFUSE_CNTL_REGISTER_BIT_1 = "Configure After Power Cycle Only"; 
  EFUSE_CNTL_REGISTER_BIT_0 = "Use AES eFUSE Key Only"; 
  NUMBER_OF_SLRS = 1; 
  TYPE_VH_DEVICE = FALSE; 
  INIT_WAIT_TIME = 9532; 
};

## The following data for the devices are updated. June 14, 2004

#The PROGRAM_PROGRESS_COUNT is FRAME_COUNT/16 because each data size is FRAME_SIZE*16 =VERIFY_PROGRESS_COUNT
#non bram-word count is FDRI wordCount in the xl spreadsheet.

#7v285t::PROPERTY=  FRAME_COUNT,    26446:
#                   CLB_FRAMES,     16632:
#                   NON_BRAM_WC,    2128070:
#                   FPGA_ISC_PROGRAM_PROGRESS_COUNT, 2671046:
#                   FPGA_PROGRAM_PROGRESS_COUNT, 1653:
#                   PROGRAM_PROGRESS_COUNT, 1653;;

#7v450t::PROPERTY=  FRAME_COUNT,    39760:
#                   CLB_FRAMES,     25956:
#                   NON_BRAM_WC,    3201296:
#                   FPGA_ISC_PROGRAM_PROGRESS_COUNT, 4015760:
#                   FPGA_PROGRAM_PROGRESS_COUNT, 2485:
#                   PROGRAM_PROGRESS_COUNT, 2485;;

xc7v585t = {
  PROPERTY = {
    FRAME_COUNT = 51138; 
    CLB_FRAMES = 33372; 
    NON_BRAM_WC = 4117770; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 5164938; 
    FPGA_PROGRAM_PROGRESS_COUNT = 3196; 
    PROGRAM_PROGRESS_COUNT = 3196; 
  };
};

#bali die
xc7v500t = {
  PROPERTY = {
    FRAME_COUNT = 35475; 
    CLB_FRAMES = 27972; 
    NON_BRAM_WC = 3156351; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 3582975; 
    FPGA_PROGRAM_PROGRESS_COUNT = 2217; 
    PROGRAM_PROGRESS_COUNT = 2217; 
  };
};

# Check data before uncommenting
#7v1500t::PROPERTY=  FRAME_COUNT,    0:
#                   CLB_FRAMES,     0:
#                   NON_BRAM_WC,    0:
#                   WAITCLOCKCYCLES, 2000:
#                   NUMBER_OF_SLRS, 3:
#                   SLR0, xc7v500t:
#                   SLR1, xc7v500t:
#                   SLR2, xc7v500t:
#These values are calculated by adding the slr data, for future enhancements, we can calculate these automatically
#                   FPGA_ISC_PROGRAM_PROGRESS_COUNT, 10748925:
#                   FPGA_PROGRAM_PROGRESS_COUNT, 6651:
#                   PROGRAM_PROGRESS_COUNT, 6651;;

xc7v2000t_ies = {
  PROPERTY = #These values are calculated by adding the slr data, for future enhancements, we can calculate these automatically
{
    FRAME_COUNT = 0; 
    CLB_FRAMES = 0; 
    NON_BRAM_WC = 0; 
    WAITCLOCKCYCLES = 2000; 
    NUMBER_OF_SLRS = "4"; 
    SLR0 = "xc7v500t"; 
    SLR1 = "xc7v500t"; 
    SLR2 = "xc7v500t"; 
    SLR3 = "xc7v500t"; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 14331900; 
    FPGA_PROGRAM_PROGRESS_COUNT = 8868; 
    PROGRAM_PROGRESS_COUNT = 8868; 
  };
};

xc7v2000t = {
  PROPERTY = #These values are calculated by adding the slr data, for future enhancements, we can calculate these automatically
{
    FRAME_COUNT = 0; 
    CLB_FRAMES = 0; 
    NON_BRAM_WC = 0; 
    WAITCLOCKCYCLES = 2000; 
    NUMBER_OF_SLRS = "4"; 
    SLR0 = "xc7v500t"; 
    SLR1 = "xc7v500t"; 
    SLR2 = "xc7v500t"; 
    SLR3 = "xc7v500t"; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 14331900; 
    FPGA_PROGRAM_PROGRESS_COUNT = 8868; 
    PROGRAM_PROGRESS_COUNT = 8868; 
  };
};

#7v855t::PROPERTY=  FRAME_COUNT,    73233:
#                   CLB_FRAMES,     48600:
#                   NON_BRAM_WC,    5883987:
#                   FPGA_ISC_PROGRAM_PROGRESS_COUNT, 7396533:
#                   FPGA_PROGRAM_PROGRESS_COUNT, 4577:
#                   PROGRAM_PROGRESS_COUNT, 4577;;

xc7vx330t = {
  PROPERTY = {
    FRAME_COUNT = 35182; 
    CLB_FRAMES = 19152; 
    NON_BRAM_WC = 2557926; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 3553382; 
    FPGA_PROGRAM_PROGRESS_COUNT = 2199; 
    PROGRAM_PROGRESS_COUNT = 2199; 
  };
};

xc7vx415t = {
  PROPERTY = {
    FRAME_COUNT = 43650; 
    CLB_FRAMES = 23976; 
    NON_BRAM_WC = 3245130; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 4408650; 
    FPGA_PROGRAM_PROGRESS_COUNT = 2728; 
    PROGRAM_PROGRESS_COUNT = 2728; 
  };
};

xc7vx485t = {
  PROPERTY = {
    FRAME_COUNT = 51331; 
    CLB_FRAMES = 27972; 
    NON_BRAM_WC = 3826991; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 5184431; 
    FPGA_PROGRAM_PROGRESS_COUNT = 3208; 
    PROGRAM_PROGRESS_COUNT = 3208; 
  };
};

xc7vx550t = {
  PROPERTY = {
    FRAME_COUNT = 58200; 
    CLB_FRAMES = 31968; 
    NON_BRAM_WC = 4326840; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 5878200; 
    FPGA_PROGRAM_PROGRESS_COUNT = 3638; 
    PROGRAM_PROGRESS_COUNT = 3638; 
  };
};

xc7vx690t = {
  PROPERTY = {
    FRAME_COUNT = 72750; 
    CLB_FRAMES = 39960; 
    NON_BRAM_WC = 5408550; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 7347750; 
    FPGA_PROGRAM_PROGRESS_COUNT = 4547; 
    PROGRAM_PROGRESS_COUNT = 4547; 
  };
};

xc7vx980t = {
  PROPERTY = {
    FRAME_COUNT = 89487; 
    CLB_FRAMES = 56052; 
    NON_BRAM_WC = 7060203; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 9038187; 
    FPGA_PROGRAM_PROGRESS_COUNT = 5593; 
    PROGRAM_PROGRESS_COUNT = 5593; 
  };
};

# Check data before uncommenting
#bali die
xc7vx350t = {
  PROPERTY = {
    FRAME_COUNT = 30510; 
    CLB_FRAMES = 20304; 
    NON_BRAM_WC = 2460966; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 3081510; 
    FPGA_PROGRAM_PROGRESS_COUNT = 1907; 
    PROGRAM_PROGRESS_COUNT = 1907; 
  };
};

# Check data before uncommenting
xc7vx1140t = {
  PROPERTY = #These values are calculated by adding the slr data, for future enhancements, we can calculate these automatically
{
    FRAME_COUNT = 0; 
    CLB_FRAMES = 0; 
    NON_BRAM_WC = 0; 
    WAITCLOCKCYCLES = 2000; 
    EFUSE_SUPPORTED = FALSE; 
    NUMBER_OF_SLRS = "4"; 
    SLR0 = "7vx350t"; 
    SLR1 = "7vx350t"; 
    SLR2 = "7vx350t"; 
    SLR3 = "7vx350t"; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 12326040; 
    FPGA_PROGRAM_PROGRESS_COUNT = 7628; 
    PROGRAM_PROGRESS_COUNT = 7628; 
  };
};

## 7vh290t::PROPERTY= FRAME_COUNT,    0:
##                   CLB_FRAMES,     0:
##                   NON_BRAM_WC,    0:
##                   TYPE_VH_DEVICE, "TRUE": #set to true to make it look like a bali device since slr is 1.
##                   EFUSE_SUPPORTED, "FALSE":
##                   WAITCLOCKCYCLES, 2000:
##                   NUMBER_OF_SLRS, 1:
##                   SLR0, 7vx350t:
#These values are calculated by adding the slr data, for future enhancements, we can calculate these automatically
##                   FPGA_ISC_PROGRAM_PROGRESS_COUNT, 3081510:
##                   FPGA_PROGRAM_PROGRESS_COUNT, 1907:
##                   PROGRAM_PROGRESS_COUNT, 1907;;

xc7vh580t = {
  PROPERTY = #These values are calculated by adding the slr data, for future enhancements, we can calculate these automatically
{
    FRAME_COUNT = 0; 
    CLB_FRAMES = 0; 
    NON_BRAM_WC = 0; 
    TYPE_VH_DEVICE = TRUE; #set to true to make it look like a bali device since slr is 1.
    EFUSE_SUPPORTED = FALSE; 
    WAITCLOCKCYCLES = 2000; 
    NUMBER_OF_SLRS = "2";
    NUMBER_OF_YOSEMITES = "1";
    SLR0 = "7vx350t"; 
    SLR1 = "7vx350t"; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 6163020; 
    FPGA_PROGRAM_PROGRESS_COUNT = 3814; 
    PROGRAM_PROGRESS_COUNT = 3814; 
  };
};

xc7vh870t = {
  PROPERTY = #These values are calculated by adding the slr data, for future enhancements, we can calculate these automatically
{
    FRAME_COUNT = 0; 
    CLB_FRAMES = 0; 
    NON_BRAM_WC = 0; 
    TYPE_VH_DEVICE = TRUE; #set to true to make it look like a bali device since slr is 1.
    EFUSE_SUPPORTED = FALSE; 
    WAITCLOCKCYCLES = 2000; 
    NUMBER_OF_SLRS = "3";
    NUMBER_OF_YOSEMITES = "2";
    SLR0 = "7vx350t"; 
    SLR1 = "7vx350t"; 
    SLR2 = "7vx350t"; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 9244530; 
    FPGA_PROGRAM_PROGRESS_COUNT = 5721; 
    PROGRAM_PROGRESS_COUNT = 5721; 
  };
};

xc7vs001t = {
  PROPERTY = #These values are calculated by adding the slr data, for future enhancements, we can calculate these automatically
{
    FRAME_COUNT = 0; 
    CLB_FRAMES = 0; 
    NON_BRAM_WC = 0; 
    EFUSE_SUPPORTED = FALSE; 
    WAITCLOCKCYCLES = 2000; 
    NUMBER_OF_SLRS = "2"; 
    SLR0 = "7vx350t"; 
    SLR1 = "7vx350t"; 
    FPGA_ISC_PROGRAM_PROGRESS_COUNT = 6163020; 
    FPGA_PROGRAM_PROGRESS_COUNT = 3814; 
    PROGRAM_PROGRESS_COUNT = 3814; 
  };
};

###############################
# Operations Table            #
###############################
OPERATION = {
  PROGRAM = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","EXPRESSSVF","EXPRESSXSVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL"), 
    ("SS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN"), 
    ("SM","PARALLEL","MULTILINX")
  );
  VERIFY = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN"), 
    ("HW140","PARALLEL"), 
    ("SM","PARALLEL","MULTILINX")
  );
  READIDCODE = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  CHECKIDCODE = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  READSTATUSREGISTER = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  READUSERCODE = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  BYPASS = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","PARALLEL","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  HIGHZ = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  DOPRELOAD = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  ISPENABLE = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  CONLD = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  EXPRESSSVF =     ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN"); 
  EXPRESSXSVF =     ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN"); 
};




PROGRAM_OPTION = {
  VERIFY = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN"), 
    ("HW140","PARALLEL"), 
    ("SM","PARALLEL","MULTILINX")
  );
  PROGRAMKEY = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
  SECUREMODE = (
    ("BS","PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"), 
    ("BSFILE","SVF","STAPL"), 
    ("HW140","PARALLEL")
  );
};

BSDL_OPERATION = {
  READIDCODE =     ("PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"); 
  READSTATUSREGISTER =     ("PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"); 
  CHECKIDCODE =     ("PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"); 
  READUSERCODE =     ("PARALLEL","USB2","BASEPLUGIN","ADVPLUGIN","SVF","STAPL"); 
};


###############################
# Slave Serial Virtex Devices #
###############################
# Use base class SSDevice.

###############################
# Select Map Devices    #
###############################
VENTRY_CREATE_SM_DEVICE  =   ("create_virtex_sm_device(const char *part)","ImpactDevice"); 

###############################
# Boundary Scan Devices       #
###############################
VENTRY_CREATE_BS_DEVICE  =   ("create_cse_adapter_bs_device(const char *part)","ImpactCseAdapterDevice"); 
VENTRY_CREATE_BSFILE_DEVICE  =   ("create_cse_adapter_bs_device(const char *part)","ImpactCseAdapterDevice"); 

V2000T_IES_BSDL_INSTRUCTION_OPCODE  = {
  IDCODE            = "001001001001001001001001"; # -- DEVICE_ID
  VERSION           = "100101100101100101100101"; # -- VERSION
  BYPASS            = "111111111111111111111111"; # -- BYPASS
  EXTEST            = "100110100110100110100110"; # -- BOUNDARY
  SAMPLE            = "000001000001000001000001"; # -- BOUNDARY
  PRELOAD           = "000001000001000001000001"; # -- BOUNDARY
  USERCODE          = "001000100100100100100100"; # -- DEVICE_ID
  HIGHZ             = "001010001010001010001010"; # -- BYPASS
  EXTEST_PULSE      = "111100111100111100111100"; # -- BOUNDARY
  EXTEST_TRAIN      = "111101111101111101111101"; # -- BOUNDARY
  ISC_ENABLE        = "010000010000010000010000"; # -- ISC_CONFIG
  ISC_PROGRAM       = "010001010001010001010001"; # -- ISC_PDATA
  XSC_PROGRAM_SLR0  = "010001100100100100100100"; # -- XSC_PDATA_SLR
  XSC_PROGRAM_SLR1  = "100100010001100100100100"; # -- XSC_PDATA_SLR
  XSC_PROGRAM_SLR2  = "100100100100010001100100"; # -- XSC_PDATA_SLR
  XSC_PROGRAM_SLR3  = "100100100100100100010001"; # -- XSC_PDATA_SLR
  ISC_NOOP          = "010100010100010100010100"; # -- ISC_DEFAULT
  XSC_READ_RSVD     = "010101010101010101010101"; # -- PRIVATE
  XSC_READ_RSVD_SLR0  = "010101001001001001001001"; # -- PRIVATE
  XSC_READ_RSVD_SLR1  = "001001010101001001001001"; # -- PRIVATE
  XSC_READ_RSVD_SLR2  = "001001001001010101001001"; # -- PRIVATE
  XSC_READ_RSVD_SLR3  = "001001001001001001010101"; # -- PRIVATE
  ISC_DISABLE       = "010110010110010110010110"; # -- ISC_CONFIG
  XSC_PROGRAM_KEY   = "010010010010010010010010"; # -- XSC_KEY_DATA
  XSC_DNA           = "010111010111010111010111"; # -- DNA
  CFG_OUT_SLR0      = "000100100100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR0       = "000101100100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR1      = "100100000100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR1       = "100100000101100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR2      = "100100100100000100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR2       = "100100100100000101100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR3      = "100100100100100100000100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR3       = "100100100100100100000101"; # -- PRIVATE, Not available during configuration with another mode.
  JPROGRAM          = "001011001011001011001011"; # -- PRIVATE, Not available during configuration with another mode.
  JSTART            = "001100001100001100001100"; # -- PRIVATE, Not available during configuration with another mode.
  JSHUTDOWN         = "001101001101001101001101"; # -- PRIVATE, Not available during configuration with another mode.
  FUSE_CTS_SLR0     = "110000100100100100100100"; # -- PRIVATE
  FUSE_KEY_SLR0     = "110001100100100100100100"; # -- PRIVATE
  FUSE_DNA_SLR0     = "110010100100100100100100"; # -- PRIVATE
  FUSE_USER_SLR0    = "110011100100100100100100"; # -- PRIVATE
  FUSE_CNTL_SLR0    = "110100100100100100100100"; # -- PRIVATE
  FUSE_CTS_SLR1     = "100100110000100100100100"; # -- PRIVATE
  FUSE_KEY_SLR1     = "100100110001100100100100"; # -- PRIVATE
  FUSE_DNA_SLR1     = "100100110010100100100100"; # -- PRIVATE
  FUSE_USER_SLR1    = "100100110011100100100100"; # -- PRIVATE
  FUSE_CNTL_SLR1    = "100100110100100100100100"; # -- PRIVATE
  FUSE_CTS_SLR2     = "100100100100110000100100"; # -- PRIVATE
  FUSE_KEY_SLR2     = "100100100100110001100100"; # -- PRIVATE
  FUSE_DNA_SLR2     = "100100100100110010100100"; # -- PRIVATE
  FUSE_USER_SLR2    = "100100100100110011100100"; # -- PRIVATE
  FUSE_CNTL_SLR2    = "100100100100110100100100"; # -- PRIVATE
  FUSE_CTS_SLR3     = "100100100100100100110000"; # -- PRIVATE
  FUSE_KEY_SLR3     = "100100100100100100110001"; # -- PRIVATE
  FUSE_DNA_SLR3     = "100100100100100100110010"; # -- PRIVATE
  FUSE_USER_SLR3    = "100100100100100100110011"; # -- PRIVATE
  FUSE_CNTL_SLR3    = "100100100100100100110100"; # -- PRIVATE
  USER1             = "000010100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER2             = "000011100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER3             = "100010100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER4             = "100011100100100100100100"; # -- PRIVATE, Not available until after configuration
  XADC_DRP          = "110111100100100100100100"; # -- PRIVATE
  INTEST_RSVD       = "000111000111000111000111"; # -- PRIVATE
};

V2000T_BSDL_INSTRUCTION_OPCODE  = {
  IDCODE            = "001001001001001001001001"; # -- DEVICE_ID
  VERSION           = "100101100101100101100101"; # -- VERSION
  BYPASS            = "111111111111111111111111"; # -- BYPASS
  EXTEST            = "100110100110100110100110"; # -- BOUNDARY
  SAMPLE            = "000001000001000001000001"; # -- BOUNDARY
  PRELOAD           = "000001000001000001000001"; # -- BOUNDARY
  USERCODE          = "001000100100100100100100"; # -- DEVICE_ID
  HIGHZ             = "001010001010001010001010"; # -- BYPASS
  EXTEST_PULSE      = "111100111100111100111100"; # -- BOUNDARY
  EXTEST_TRAIN      = "111101111101111101111101"; # -- BOUNDARY
  ISC_ENABLE        = "010000010000010000010000"; # -- ISC_CONFIG
  ISC_PROGRAM       = "010001010001010001010001"; # -- ISC_PDATA
  XSC_PROGRAM_SLR0  = "010001100100100100100100"; # -- XSC_PDATA_SLR
  XSC_PROGRAM_SLR1  = "100100010001100100100100"; # -- XSC_PDATA_SLR
  XSC_PROGRAM_SLR2  = "100100100100010001100100"; # -- XSC_PDATA_SLR
  XSC_PROGRAM_SLR3  = "100100100100100100010001"; # -- XSC_PDATA_SLR
  ISC_NOOP          = "010100010100010100010100"; # -- ISC_DEFAULT
  XSC_READ_RSVD     = "010101010101010101010101"; # -- PRIVATE
  XSC_READ_RSVD_SLR0  = "010101001001001001001001"; # -- PRIVATE
  XSC_READ_RSVD_SLR1  = "001001010101001001001001"; # -- PRIVATE
  XSC_READ_RSVD_SLR2  = "001001001001010101001001"; # -- PRIVATE
  XSC_READ_RSVD_SLR3  = "001001001001001001010101"; # -- PRIVATE
  ISC_DISABLE       = "010110010110010110010110"; # -- ISC_CONFIG
  XSC_PROGRAM_KEY   = "010010010010010010010010"; # -- XSC_KEY_DATA
  XSC_DNA           = "010111010111010111010111"; # -- DNA
  CFG_OUT_SLR0      = "000100100100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR0       = "000101100100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR1      = "100100000100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR1       = "100100000101100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR2      = "100100100100000100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR2       = "100100100100000101100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR3      = "100100100100100100000100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR3       = "100100100100100100000101"; # -- PRIVATE, Not available during configuration with another mode.
  JPROGRAM          = "001011001011001011001011"; # -- PRIVATE, Not available during configuration with another mode.
  JSTART            = "001100001100001100001100"; # -- PRIVATE, Not available during configuration with another mode.
  JSHUTDOWN         = "001101001101001101001101"; # -- PRIVATE, Not available during configuration with another mode.
  FUSE_CTS_SLR0     = "110000100100100100100100"; # -- PRIVATE
  FUSE_KEY_SLR0     = "110001100100100100100100"; # -- PRIVATE
  FUSE_DNA_SLR0     = "110010100100100100100100"; # -- PRIVATE
  FUSE_USER_SLR0    = "110011100100100100100100"; # -- PRIVATE
  FUSE_CNTL_SLR0    = "110100100100100100100100"; # -- PRIVATE
  FUSE_CTS_SLR1     = "100100110000100100100100"; # -- PRIVATE
  FUSE_KEY_SLR1     = "100100110001100100100100"; # -- PRIVATE
  FUSE_DNA_SLR1     = "100100110010100100100100"; # -- PRIVATE
  FUSE_USER_SLR1    = "100100110011100100100100"; # -- PRIVATE
  FUSE_CNTL_SLR1    = "100100110100100100100100"; # -- PRIVATE
  FUSE_CTS_SLR2     = "100100100100110000100100"; # -- PRIVATE
  FUSE_KEY_SLR2     = "100100100100110001100100"; # -- PRIVATE
  FUSE_DNA_SLR2     = "100100100100110010100100"; # -- PRIVATE
  FUSE_USER_SLR2    = "100100100100110011100100"; # -- PRIVATE
  FUSE_CNTL_SLR2    = "100100100100110100100100"; # -- PRIVATE
  FUSE_CTS_SLR3     = "100100100100100100110000"; # -- PRIVATE
  FUSE_KEY_SLR3     = "100100100100100100110001"; # -- PRIVATE
  FUSE_DNA_SLR3     = "100100100100100100110010"; # -- PRIVATE
  FUSE_USER_SLR3    = "100100100100100100110011"; # -- PRIVATE
  FUSE_CNTL_SLR3    = "100100100100100100110100"; # -- PRIVATE
  USER1             = "000010100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER2             = "000011100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER3             = "100010100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER4             = "100011100100100100100100"; # -- PRIVATE, Not available until after configuration
  XADC_DRP          = "110111100100100100100100"; # -- PRIVATE
  INTEST_RSVD       = "000111000111000111000111"; # -- PRIVATE
};

VX1140T_BSDL_INSTRUCTION_OPCODE  = {
  IDCODE            = "001001001001001001001001"; # -- DEVICE_ID
  VERSION           = "100101100101100101100101"; # -- VERSION
  BYPASS            = "111111111111111111111111"; # -- BYPASS
  EXTEST            = "100110100110100110100110"; # -- BOUNDARY
  SAMPLE            = "000001000001000001000001"; # -- BOUNDARY
  PRELOAD           = "000001000001000001000001"; # -- BOUNDARY
  USERCODE          = "001000100100100100100100"; # -- DEVICE_ID
  HIGHZ             = "001010001010001010001010"; # -- BYPASS
  EXTEST_PULSE      = "111100111100111100111100"; # -- BOUNDARY
  EXTEST_TRAIN      = "111101111101111101111101"; # -- BOUNDARY
  ISC_ENABLE        = "010000010000010000010000"; # -- ISC_CONFIG
  ISC_PROGRAM       = "010001010001010001010001"; # -- ISC_PDATA
  XSC_PROGRAM_SLR0  = "010001100100100100100100"; # -- XSC_PDATA_SLR0
  XSC_PROGRAM_SLR1  = "100100010001100100100100"; # -- XSC_PDATA_SLR1
  XSC_PROGRAM_SLR2  = "100100100100010001100100"; # -- XSC_PDATA_SLR2
  XSC_PROGRAM_SLR3  = "100100100100100100010001"; # -- XSC_PDATA_SLR3
  ISC_NOOP          = "010100010100010100010100"; # -- ISC_DEFAULT
  XSC_READ_RSVD     = "010101010101010101010101"; # -- PRIVATE
  ISC_DISABLE       = "010110010110010110010110"; # -- ISC_CONFIG
  XSC_PROGRAM_KEY   = "010010010010010010010010"; # -- XSC_KEY_DATA
  XSC_DNA           = "010111010111010111010111"; # -- DNA
  CFG_OUT_SLR0      = "000100100100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR0       = "000101100100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR1      = "100100000100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR1       = "100100000101100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR2      = "100100100100000100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR2       = "100100100100000101100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR3      = "100100100100100100000100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR3       = "100100100100100100000101"; # -- PRIVATE, Not available during configuration with another mode.
  JPROGRAM          = "001011001011001011001011"; # -- PRIVATE, Not available during configuration with another mode.
  JSTART            = "001100001100001100001100"; # -- PRIVATE, Not available during configuration with another mode.
  JSHUTDOWN         = "001101001101001101001101"; # -- PRIVATE, Not available during configuration with another mode.
  FUSE_CTS_SLR0     = "110000100100100100100100"; # -- PRIVATE
  FUSE_KEY_SLR0     = "110001100100100100100100"; # -- PRIVATE
  FUSE_DNA_SLR0     = "110010100100100100100100"; # -- PRIVATE
  FUSE_USER_SLR0    = "110011100100100100100100"; # -- PRIVATE
  FUSE_CNTL_SLR0    = "110100100100100100100100"; # -- PRIVATE
  FUSE_CTS_SLR1     = "100100110000100100100100"; # -- PRIVATE
  FUSE_KEY_SLR1     = "100100110001100100100100"; # -- PRIVATE
  FUSE_DNA_SLR1     = "100100110010100100100100"; # -- PRIVATE
  FUSE_USER_SLR1    = "100100110011100100100100"; # -- PRIVATE
  FUSE_CNTL_SLR1    = "100100110100100100100100"; # -- PRIVATE
  FUSE_CTS_SLR2     = "100100100100110000100100"; # -- PRIVATE
  FUSE_KEY_SLR2     = "100100100100110001100100"; # -- PRIVATE
  FUSE_DNA_SLR2     = "100100100100110010100100"; # -- PRIVATE
  FUSE_USER_SLR2    = "100100100100110011100100"; # -- PRIVATE
  FUSE_CNTL_SLR2    = "100100100100110100100100"; # -- PRIVATE
  FUSE_CTS_SLR3     = "100100100100100100110000"; # -- PRIVATE
  FUSE_KEY_SLR3     = "100100100100100100110001"; # -- PRIVATE
  FUSE_DNA_SLR3     = "100100100100100100110010"; # -- PRIVATE
  FUSE_USER_SLR3    = "100100100100100100110011"; # -- PRIVATE
  FUSE_CNTL_SLR3    = "100100100100100100110100"; # -- PRIVATE
  USER1             = "000010100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER2             = "000011100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER3             = "100010100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER4             = "100011100100100100100100"; # -- PRIVATE, Not available until after configuration
  XADC_DRP          = "110111100100100100100100"; # -- PRIVATE
  INTEST_RSVD       = "000111000111000111000111"; # -- PRIVATE
};

VH290T_BSDL_INSTRUCTION_OPCODE  = {
  IDCODE            = "0010011010100000"; # -- DEVICE_ID
  VERSION           = "1001011010110110"; # -- VERSION
  BYPASS            = "1111111111111111"; # -- BYPASS
  EXTEST            = "1001100000000001"; # -- BOUNDARY
  SAMPLE            = 0000010000000010; # -- BOUNDARY
  PRELOAD           = 0000010000000010; # -- BOUNDARY
  USERCODE          = "0010001010100000"; # -- DEVICE_ID
  HIGHZ             = "0010100000001000"; # -- HIGHZ
  EXTEST_PULSE      = "1111001010111001"; # -- BOUNDARY
  EXTEST_TRAIN      = "1111011010111000"; # -- BOUNDARY
  ISC_ENABLE        = "0100001010100000"; # -- ISC_CONFIG
  ISC_PROGRAM       = "0100011010100000"; # -- ISC_PDATA
  ISC_NOOP          = "0101001010100000"; # -- ISC_DEFAULT
  XSC_READ_RSVD     = "0101011010100000"; # -- PRIVATE
  ISC_DISABLE       = "0101101010100000"; # -- ISC_CONFIG
  XSC_PROGRAM_KEY   = "0100101010100000"; # -- XSC_KEY_DATA
  XSC_DNA           = "0101111010100000"; # -- DNA
  CFG_OUT_SLR0      = "0001001010100000"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR0       = "0001011010100001"; # -- PRIVATE, Not available during configuration with another mode.
  JPROGRAM          = "0010111010100000"; # -- PRIVATE, Not available during configuration with another mode.
  JSTART            = "0011001010100000"; # -- PRIVATE, Not available during configuration with another mode.
  JSHUTDOWN         = "0011011010100000"; # -- PRIVATE, Not available during configuration with another mode.
  FUSE_CTS_SLR0     = "1100001010100000"; # -- PRIVATE
  FUSE_KEY_SLR0     = "1100011010100000"; # -- PRIVATE
  FUSE_DNA_SLR0     = "1100101010100000"; # -- PRIVATE
  FUSE_USER_SLR0    = "1100111010100000"; # -- PRIVATE
  FUSE_CNTL_SLR0    = "1101001010100000"; # -- PRIVATE
  USER1             = "0000101010100000"; # -- PRIVATE, Not available until after configuration
  USER2             = "0000111010100000"; # -- PRIVATE, Not available until after configuration
  USER3             = "1000101010100000"; # -- PRIVATE, Not available until after configuration
  USER4             = "1000111010100000"; # -- PRIVATE, Not available until after configuration
  XADC_DRP          = "1101111010100000"; # -- PRIVATE
  INTEST_RSVD       = "0001111010100000"; # -- PRIVATE
};

VH580T_BSDL_INSTRUCTION_OPCODE  = {
  IDCODE            = "0010011001001010100000"; # -- DEVICE_ID
  VERSION           = "1001011001011010110110"; # -- VERSION
  BYPASS            = "1111111111111111111111"; # -- BYPASS
  EXTEST            = "1001101001100000000001"; # -- BOUNDARY
  SAMPLE            = "0000010000010000000010"; # -- BOUNDARY
  PRELOAD           = "0000010000010000000010"; # -- Same as SAMPLE
  USERCODE          = "0010001001001010100000"; # -- DEVICE_ID
  HIGHZ             = "0010100010100000001000"; # -- HIGHZ
  EXTEST_PULSE      = "1111001111001010111001"; # -- BOUNDARY
  EXTEST_TRAIN      = "1111011111011010111000"; # -- BOUNDARY
  ISC_ENABLE        = "0100000100001010100000"; # -- ISC_CONFIG
  ISC_PROGRAM       = "0100010100011010100000"; # -- ISC_PDATA
  XSC_PROGRAM_SLR0  = "0100011001001010100000"; # -- XSC_PDATA_SLR0
  XSC_PROGRAM_SLR1  = "1001000100011010100000"; # -- XSC_PDATA_SLR1
  ISC_NOOP          = "0101000101001010110110"; # -- ISC_DEFAULT
  XSC_READ_RSVD     = "0101010101011010100000"; # -- PRIVATE
  ISC_DISABLE       = "0101100101101010100000"; # -- ISC_CONFIG
  XSC_PROGRAM_KEY   = "0100100100101010100000"; # -- XSC_KEY_DATA
  XSC_DNA           = "0101110101111010100000"; # -- DNA
  CFG_OUT_SLR0      = "0001001001001010100000"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR0       = "0001011001001010100001"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR1      = "1001000001001010100000"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR1       = "1001000001011010100001"; # -- PRIVATE, Not available during configuration with another mode.
  JPROGRAM          = "0010110010111010100000"; # -- PRIVATE, Not available during configuration with another mode.
  JSTART            = "0011000011001010100000"; # -- PRIVATE, Not available during configuration with another mode.
  JSHUTDOWN         = "0011010011011010100000"; # -- PRIVATE, Not available during configuration with another mode.
  FUSE_CTS_SLR0     = "1100001001001010100000"; # -- PRIVATE
  FUSE_KEY_SLR0     = "1100011001001010100000"; # -- PRIVATE
  FUSE_DNA_SLR0     = "1100101001001010100000"; # -- PRIVATE
  FUSE_USER_SLR0    = "1100111001001010100000"; # -- PRIVATE
  FUSE_CNTL_SLR0    = "1101001001001010100000"; # -- PRIVATE
  FUSE_CTS_SLR1     = "1001001100001010100000"; # -- PRIVATE
  FUSE_KEY_SLR1     = "1001001100011010100000"; # -- PRIVATE
  FUSE_DNA_SLR1     = "1001001100101010100000"; # -- PRIVATE
  FUSE_USER_SLR1    = "1001001100111010100000"; # -- PRIVATE
  FUSE_CNTL_SLR1    = "1001001101001010100000"; # -- PRIVATE
  USER1             = "0000101001001010100000"; # -- PRIVATE, Not available until after configuration
  USER2             = "0000111001001010100000"; # -- PRIVATE, Not available until after configuration
  USER3             = "1000101001001010100000"; # -- PRIVATE, Not available until after configuration
  USER4             = "1000111001001010100000"; # -- PRIVATE, Not available until after configuration
  XADC_DRP          = "1101111001001010100000"; # -- PRIVATE
  INTEST_RSVD       = "0001110001111010100000"; # -- PRIVATE
};

VH870T_BSDL_INSTRUCTION_OPCODE  = {
  IDCODE				 = "00100100100110101000000010011010100000"; # -- DEVICE_ID
  VERSION				 = "10010110010110101101101001011010110110"; # -- VERSION
  BYPASS				 = "11111111111111111111111111111111111111"; # -- BYPASS
  EXTEST				 = "10011010011000000000011001100000000001"; # -- BOUNDARY
  SAMPLE				 = "00000100000100000000100000010000000010"; # -- BOUNDARY
  PRELOAD				 = "00000100000100000000100000010000000010"; # -- Same as SAMPLE
  USERCODE			 = "00100010010010101000001001001010100000"; # -- DEVICE_ID
  HIGHZ				 = "00101000101000000010000010100000001000"; # -- HIGHZ
  EXTEST_PULSE		 = "11110011110010101110011111001010111001"; # -- BOUNDARY
  EXTEST_TRAIN		 = "11110111110110101110001111011010111000"; # -- BOUNDARY
  ISC_ENABLE			 = "01000001000010101000000100001010100000"; # -- ISC_CONFIG
  ISC_PROGRAM			 = "01000101000110101000000100011010100000"; # -- ISC_PDATA
  XSC_PROGRAM_SLR0	 = "01000110010010101000001001001010100000"; # -- XSC_PDATA_SLR0
  XSC_PROGRAM_SLR1	 = "10010001000110101000001001001010100000"; # -- XSC_PDATA_SLR1
  XSC_PROGRAM_SLR2	 = "10010010010010101000000100011010100000"; # -- XSC_PDATA_SLR2
  ISC_NOOP			 = "01010001010010101000000101001010100000"; # -- ISC_DEFAULT
  XSC_READ_RSVD		 = "01010101010110101000000101011010100000"; # -- PRIVATE
  ISC_DISABLE			 = "01011001011010101000000101101010100000"; # -- ISC_CONFIG
  XSC_PROGRAM_KEY		 = "01001001001010101000000100101010100000"; # -- XSC_KEY_DATA
  XSC_DNA				 = "01011101011110101000000101111010100000"; # -- DNA
  CFG_OUT_SLR0		 = "00010010010010101000001001001010100000"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR0			 = "00010110010010101000011001001010100001"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR1		 = "10010000010010101000001001001010100000"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR1			 = "10010000010110101000011001001010100001"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR2		 = "10010010010010101000000001001010100000"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR2			 = "10010010010010101000010001011010100001"; # -- PRIVATE, Not available during configuration with another mode.
  JPROGRAM			 = "00101100101110101000000010111010100000"; # -- PRIVATE, Not available during configuration with another mode.
  JSTART				 = "00110000110010101000000011001010100000"; # -- PRIVATE, Not available during configuration with another mode.
  JSHUTDOWN			 = "00110100110110101000000011011010100000"; # -- PRIVATE, Not available during configuration with another mode.
  FUSE_CTS_SLR0		 = "11000010010010101000001001001010100000"; # -- PRIVATE
  FUSE_KEY_SLR0		 = "11000110010010101000001001001010100000"; # -- PRIVATE
  FUSE_DNA_SLR0		 = "11001010010010101000001001001010100000"; # -- PRIVATE
  FUSE_USER_SLR0		 = "11001110010010101000001001001010100000"; # -- PRIVATE
  FUSE_CNTL_SLR0		 = "11010010010010101000001001001010100000"; # -- PRIVATE
  FUSE_CTS_SLR1		 = "10010011000010101000001001001010100000"; # -- PRIVATE
  FUSE_KEY_SLR1		 = "10010011000110101000001001001010100000"; # -- PRIVATE
  FUSE_DNA_SLR1		 = "10010011001010101000001001001010100000"; # -- PRIVATE
  FUSE_USER_SLR1		 = "10010011001110101000001001001010100000"; # -- PRIVATE
  FUSE_CNTL_SLR1		 = "10010011010010101000001001001010100000"; # -- PRIVATE
  FUSE_CTS_SLR2		 = "10010010010010101000001100001010100000"; # -- PRIVATE
  FUSE_KEY_SLR2		 = "10010010010010101000001100011010100000"; # -- PRIVATE
  FUSE_DNA_SLR2		 = "10010010010010101000001100101010100000"; # -- PRIVATE
  FUSE_USER_SLR2		 = "10010010010010101000001100111010100000"; # -- PRIVATE
  FUSE_CNTL_SLR2		 = "10010010010010101000001101001010100000"; # -- PRIVATE
  USER1				 = "00001010010010101000001001001010100000"; # -- PRIVATE, Not available until after configuration
  USER2				 = "00001110010010101000001001001010100000"; # -- PRIVATE, Not available until after configuration
  USER3				 = "10001010010010101000001001001010100000"; # -- PRIVATE, Not available until after configuration
  USER4				 = "10001110010010101000001001001010100000"; # -- PRIVATE, Not available until after configuration
  XADC_DRP			 = "11011110010010101000001001001010100000"; # -- PRIVATE
  INTEST_RSVD			 = "00011100011110101000000001111010100000"; # -- PRIVATE
};

VS001T_BSDL_INSTRUCTION_OPCODE  = {
  IDCODE					 = "001001001001001001001001"; # -- DEVICE_ID
  VERSION					 = "100101100101100101100101"; # -- VERSION
  BYPASS					 = "111111111111111111111111"; # -- BYPASS
  EXTEST					 = "100110100110100100100100"; # -- BOUNDARY
  SAMPLE					 = "000001000001100100100100"; # -- BOUNDARY
  PRELOAD					 = "000001000001100100100100"; # -- Same as SAMPLE
  USERCODE				 = "001000100100100100100100"; # -- DEVICE_ID
  HIGHZ					 = "001010001010001010001010"; # -- HIGHZ
  EXTEST_PULSE			 = "111100111100100100100100"; # -- BOUNDARY
  EXTEST_TRAIN			 = "111101111101100100100100"; # -- BOUNDARY
  ISC_ENABLE				 = "010000010000100100100100"; # -- ISC_CONFIG
  ISC_PROGRAM				 = "010001010001100100100100"; # -- ISC_PDATA
  XSC_PROGRAM_SLR0		 = "010001100100100100100100"; # -- XSC_PDATA_SLR0
  XSC_PROGRAM_SLR1		 = "100100010001100100100100"; # -- XSC_PDATA_SLR1
  ISC_NOOP				 = "010100010100100100100100"; # -- ISC_DEFAULT
  XSC_READ_RSVD			 = "010101010101100100100100"; # -- PRIVATE
  ISC_DISABLE				 = "010110010110100100100100"; # -- ISC_CONFIG
  XSC_PROGRAM_KEY			 = "010010010010100100100100"; # -- XSC_KEY_DATA
  XSC_DNA					 = "010111100100100100100100"; # -- DNA
  XSC_DNA_ALL				 = "010111010111100100100100"; # -- DNA
  CFG_OUT_SLR0			 = "000100100100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR0				 = "000101100100100011100011"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_OUT_SLR1			 = "100100000100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  CFG_IN_SLR1				 = "100100000101100011100011"; # -- PRIVATE, Not available during configuration with another mode.
  JPROGRAM				 = "001011001011100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  JSTART					 = "001100001100100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  JSHUTDOWN				 = "001101001101100100100100"; # -- PRIVATE, Not available during configuration with another mode.
  FUSE_CTS_SLR0			 = "110000100100100100100100"; # -- PRIVATE
  FUSE_KEY_SLR0			 = "110001100100100100100100"; # -- PRIVATE
  FUSE_DNA_SLR0			 = "110010100100100100100100"; # -- PRIVATE
  FUSE_USER_SLR0			 = "110011100100100100100100"; # -- PRIVATE
  FUSE_CNTL_SLR0			 = "110100100100100100100100"; # -- PRIVATE
  FUSE_CTS_SLR1			 = "100100110000100100100100"; # -- PRIVATE
  FUSE_KEY_SLR1			 = "100100110001100100100100"; # -- PRIVATE
  FUSE_DNA_SLR1			 = "100100110010100100100100"; # -- PRIVATE
  FUSE_USER_SLR1			 = "100100110011100100100100"; # -- PRIVATE
  FUSE_CNTL_SLR1			 = "100100110100100100100100"; # -- PRIVATE
  USER1					 = "000010100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER2					 = "000011100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER3					 = "100010100100100100100100"; # -- PRIVATE, Not available until after configuration
  USER4					 = "100011100100100100100100"; # -- PRIVATE, Not available until after configuration
  XADC_DRP				 = "110111100100100100100100"; # -- PRIVATE
  XADC_DRP_ALL			 = "110111110111100100100100"; # -- PRIVATE
  SHANNON_ADC_JTAG_DRP	 = "100100100100110110100100"; # -- PRIVATE
  SHANNON_DAC_JTAG_DRP	 = "100100100100100100110110"; # -- PRIVATE
  SHANNON_ALL_JTAG_DRP	 = "100100100100110110110110"; # -- PRIVATE
};

BSDL_INSTRUCTION_OPCODE  = {
  IDCODE = "001001"; 
  BYPASS = "111111"; 
  EXTEST = "100110"; 
  SAMPLE = "000001"; 
  PRELOAD = "000001"; 
  USERCODE = "001000"; 
  HIGHZ = "001010"; 
  EXTEST_PULSE = "111100"; 
  EXTEST_TRAIN = "111101"; 
  ISC_ENABLE = "010000"; 
  ISC_PROGRAM = "010001"; 
  ISC_NOOP = "010100"; 
  XSC_READ_RSVD = "010101"; 
  ISC_DISABLE = "010110"; 
  XSC_PROGRAM_KEY = "010010"; 
  XSC_DNA = "010111"; 
  CFG_OUT = "000100"; 
  CFG_IN = "000101"; 
  JPROGRAM = "001011"; 
  JSTART = "001100"; 
  JSHUTDOWN = "001101"; 
  FUSE_CTS = "110000"; 
  FUSE_KEY = "110001"; 
  FUSE_DNA = "110010"; 
  FUSE_USER = "110011"; 
  FUSE_CNTL = "110100"; 
  USER1 = "000010"; 
  USER2 = "000011"; 
  USER3 = "100010"; 
  USER4 = "100011"; 
  XADC_DRP = "110111"; 
  INTEST_RSVD = "000111"; 
};

V2000T_IES_BSDL_INSTRUCTION_CAPTURE  = "XXXXXXXXXXXXXXXXXXXXXX01"; 

V2000T_BSDL_INSTRUCTION_CAPTURE  = "XXXXXXXXXXXXXXXXXXXXXX01"; 

VX1140T_BSDL_INSTRUCTION_CAPTURE  = "XXXXXXXXXXXXXXXXXXXXXX01"; 

VH290T_BSDL_INSTRUCTION_CAPTURE  = "XXXXXXXXXXXXXX01"; 

VH580T_BSDL_INSTRUCTION_CAPTURE  = "XXXXXXXXXXXXXXXXXXXX01"; 

VH870T_BSDL_INSTRUCTION_CAPTURE  = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01"; 

VS001T_BSDL_INSTRUCTION_CAPTURE  = "XXXXXXXXXXXXXXXXXXXXXX01"; 

V2000T_IES_BSDL_REGISTER_ACCESS  =   ("DNA",228,"XSC_DNA"); 

V2000T_BSDL_REGISTER_ACCESS  =   ("DNA",228,"XSC_DNA"); 

VX1140T_BSDL_REGISTER_ACCESS  =   ("DNA",228,"XSC_DNA"); 

VH290T_BSDL_REGISTER_ACCESS  =   ("DNA",57,"XSC_DNA"); 

VH580T_BSDL_REGISTER_ACCESS  =   ("DNA",114,"XSC_DNA"); 

VH870T_BSDL_REGISTER_ACCESS  =   ("DNA",171,"XSC_DNA"); 

VS001T_BSDL_REGISTER_ACCESS  =   ("DNA",114,"XSC_DNA"); 

BSDL_INSTRUCTION_CAPTURE  = "XXXX01"; 

BSDL_REGISTER_ACCESS  =   ("DATAREG",57,"XSC_DNA"); 

