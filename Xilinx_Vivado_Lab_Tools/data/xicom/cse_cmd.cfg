##############################################################################
# Command format strings
# After adding a format string, please make sure this file is not corrupted
# by running util_test in iMPACT/Utility
# command_name, batch_command, format_string
# assignFile,   "TRUE",  "assignFile [-p|-position <pos>] [-file <filename>]"
##############################################################################
COMMAND_FORMAT = {
  program =     ("TRUE","program [-e|-erase] [-v|-verify] [-w|-writeProtect] [-r|-readProtect] [-u|-usercode|-ues <codeString>] [-t|-functest] [-c|-bit2mcs] {-ver <versionOptions> {<versionOptions>}} [-smoke] [-spi[<spiPartName>]] [-spionly] [-bpi [<bpiPartName>]] [-bpionly] [-turbo] [-inSystemUpdate] [-revisionSelectionOnly] [-word][-parallel] [-cascadeLowPower] [-noncascadeLowPower] [-skipua] [-useD4] [-loadfpga] [-selectMap8] [-internalClk] [-clkFreq <freq>] [-master] [-defaultVersion <verNum>] [-externalSelect] [-compressed] [-prog] [-noprog][-s|-secureMode] [-keyonly] [-key {<keyfile>}][-enableEncryptedReconfig]  [-p|-position <pos1> {<pos2>}] [-target] [-otf] [-noshutdown] [-nojprog] [-corefile <coreFileName>] [-isc][-fuse <type> {<arg>}] [-sectorprotect] [-sectorlockdown] [-otpsecurity] [-nobscanreg] [-onlyFpga] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-buffered] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  expresssvf =     ("TRUE","expresssvf [-p|-position <pos> {<pos2>} ] [-target] [-e|-erase] [-v|-verify] [-program] [-file <svfFileName>]"); 
  expressxsvf =     ("TRUE","expressxsvf [-p|-position <pos> {<pos2>} ][-target]  [-e|-erase] [-v|-verify] [-program] [-file <svfFileName>]"); 
  expressstapl =     ("TRUE","expressstapl [-p|-position <pos> {<pos2>} ] [-target] [-e|-erase] [-v|-verify] [-program] [-file <svfFileName>]"); 
  addbsdldevice =     ("TRUE","addBsdlDevice [-p|-position <pos>] [-part <partname>] [-irlength <num>]"); 
  adddevice =     ("TRUE","addDevice [-p|-position <pos>] [-sprom xc18v256|xc18v512|xc18v01|xc18v02|xc18v04|xcf01s|xcf02s|xcf04s|xcf32p|xcf16p|xcf08p] [-mpm xccacem16|xccacem32|xccacem64|xccacem128|xccacem16sc|xccacem32sc|xccacem64sc|xccacem16sc_v2|xccacem32sc_v2|xccacem64sc_v2] [-spi <spiPartName>] [-fpga xc3s50an|xc3s200an|xc3s400an|xc3s700an|xc3s1400an][-cs 0|1|2] [-file <filename>] [-part <partName>] [-bmm <bmmfile>] {-elf <elfname> {<tag_addrname>}} {-core <corePosition> <bitFile>}"); 
  attachflash =     ("TRUE","attachFlash [-p|-position <pos>] [-spi <spiPartName>] [ -bpi [<bpiPartName>]]"); 
  assignfiletoattachedflash =     ("TRUE","assignfiletoattachedflash [-p|-position <pos>] [-file <fileName>]"); 
  addadditionalconfigfile =     ("TRUE","addAdditionalConfigFile [-p|-position <pos>] {-elf|-file <elfname> {<tag_addrname>}} {-core <corePosition> <bitFile>}"); 
  clearadditionalconfigfiles =     ("TRUE","clearAdditionalConfigFiles [-p|-position <pos>] [-core <corePosition>]"); 
  addpromdevice =     ("TRUE","addPromDevice [-p|-position <pos>] [-size <sizeKBytes>] [-name <name>]"); 
  addconfigdevice =     ("TRUE","addConfigDevice [-mode cf|mpm|pff] [-size <size>] [-name <name>] [-path <path>]"); 
  addcollection =     ("TRUE","addCollection [-name <name>]"); 
  adddesign =     ("TRUE","addDesign [-version <versionNumber>] [-name|-designName|-startaddress <name>] [-rs <pin>] [-collection|-c <collectionName>] [-d|-down] [-data]"); 
  adddevicechain =     ("TRUE","addDeviceChain [-index|-csPin <chainNo>] [-d|-design|-startaddress <name>] [-c|-collection <collectionName>]"); 
  assignfile =     ("TRUE","assignFile [-p|-position <pos>] [-file <filename>]"); 
  deletedevice =     ("TRUE","deleteDevice [-p|-position <pos>] [-all] [-index <chainNo>] [-version <versionNo>] [-collection <collectionName>]"); 
  deletepromdevice =     ("TRUE","deletePromDevice [-p|-position <pos>]"); 
  deleteconfigdevice =     ("TRUE","deleteConfigDevice"); 
  deletecollection =     ("TRUE","deleteCollection [-name <name>]"); 
  deletedesign =     ("TRUE","deleteDesign [-version <versionNumber>] [-collection|-c <collectionName>]"); 
  deletedevicechain =     ("TRUE","deleteDeviceChain [-index|-csPin <chainNo>] [-version <versionNo>] [-collection <collectionaName>]"); 
  definedevice =     ("TRUE","defineDevice [-p|-position <pos>] [-ireg <length>] [-name <deviceName>]"); 
  cleancablelock =     ("TRUE","cleanCableLock"); 
  renamecollection =     ("TRUE","renameCollection [-name <oldname> <newName>]"); 
  renamebatchcmdfile =     ("TRUE","renameBatchCmdFile [-file <filename>]"); 
  renamePromFile =     ("TRUE","renamepromfile [-file <filename>]"); 
  renameMPMFile =     ("TRUE","renamempmfile [-file <filename>]"); 
  verify =     ("TRUE","verify  [-p|-position <pos1> {<pos2>}] [-target] [-otf|-sram] {-ver <version>} [-smoke] [-noshutdown] [-spi [<spiPartName>]] [-spionly] [-bpi [<bpiPartName>]] [-bpionly] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-word] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  functiontest =     ("TRUE","functionTest  [-p|-position <pos1> {<pos2>}][-target]"); 
  erase =     ("TRUE","erase [-o|-override] [-p|-position <pos1> {<pos2>}] [-target] [-otf] [-x] {-ver <version>} [-spi [<spiPartName>]] [-spionly] [-bpi [<bpiPartName>]] [-bpionly] [-turbo] [-revisionSelection] [-qebit] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-word] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-po2] [-zynq_fsbl <fsblFileName>]"); 
  setactiverevision =     ("TRUE","setActiveRevision [-p|-position <pos1> {<pos2>}] [-revision <index> ]"); 
  loadconfigurationrevision =     ("TRUE","loadConfigurationRevision [-p|-position <pos> {<pos2>}] [-ver <index> ]"); 
  blankcheck =     ("TRUE","blankCheck [-p|-position <pos1> {<pos2>}] [-target] [-otf] {-ver <version>} [-smoke] [-bpi [<bpiPartName>]] [-bpionly] [-spi [<spiPartName>]] [-spionly] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-o] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  readidcode =     ("TRUE","readIdcode [-p|-position <pos1> {<pos2>}] [-target] [-loop <loopCount>]"); 
  readdna =     ("TRUE","readDNA [-p|-position <pos1> {<pos2>}] [-target] [-dna <dna>]"); 
  readstatusregister =     ("TRUE","readStatusRegister [-p|-position <pos1> {<pos2>}][-target] [-fpga] [-flash] [-spi [<spiPartName>]] [-spionly] [-bpi [<bpiPartName>]] [-bpionly] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V]"); 
  readtemperatureandvoltage =     ("TRUE","readTemperatureAndVoltage [-p|-position <pos1> {<pos2>}][-target]"); 
  readefuse =     ("TRUE","readefuse [-p|-position <pos1>] [-target] [-aeskey|-uniqueid|-scratchpad|-control|-user|-dna] [-all_margins] [-testrow <value>] [-testctsdata <hexvalue>]"); 
  programefuse =     ("TRUE","programefuse [-p|-position <pos1>] [-aeskey|-uniqueid|-scratchpad|-control|-user|-aeskey_and_low_user|-high_user] [-low_value <hexvalue>] [-no_low_value] [-value <hexvalue> {<hexvalue2>}] [-no_value] [-key {<keyfile>}] [-no_key] [-high_value <hexvalue>]  [-skip_revisioning] [-skip_buffered_mode_change] [-program_control_reg_only] [-program_revision_only] [-program_revision_stop_bit] [-testrow <value>] [-testbit <value>] [-testctsdata <hexvalue>]"); 
  readefusecontrolreg =     ("TRUE","readefusecontrolreg [-p|-position <pos1>] [-target] [-all_margins]"); 
  setefusecontrolreg =     ("TRUE","setefusecontrolreg [-p|-position <pos1>] [-target] [-disableread <aeskey> {<uniqueid>} {<scratchpad>} {<control>} {<dna>} {<user>}] [-disablewrite <aeskey> {<uniqueid>} {<scratchpad>} {<control>} {<user>}] [-aesexclusive] [-useaesandefusekey] [-useaeskey] [-disablereadwrite <aeskey> {<control>}] [-zynq_efusesecureboot] [-zynq_jtagchaindisable] [-zynq_bbramkeydisable]"); 
  checkidcode =     ("TRUE","checkIdcode [-p|-position <pos1> {<pos2>}][-target]"); 
  checkintegrity =     ("TRUE","checkIntegrity [-p|-position <pos1>]"); 
  readusercode =     ("TRUE","readUsercode [-p|-position <pos1> {<pos2>}] [-target] [-u|-usercode <usercode>]"); 
  programusercode =     ("TRUE","programUsercode [-p|-position <pos1> {<pos2>}] [-u|-usercode <usercode>]"); 
  readmfgcode =     ("TRUE","readMfgcode [-p|-position <pos1> {<pos2>}][-target]"); 
  readsecurityregister =     ("TRUE","readsecurityregister [-p|-position <pos1> {<pos2>}] [-target] [-reg|-register oneTimeUserProgrammable|factoryId] [-file <filename>]"); 
  programsecurityregister =     ("TRUE","programsecurityregister [-p|-position <pos1> {<pos2>}] [-target] [-reg|-register oneTimeUserProgrammable] [-file <filename>]"); 
  readues =     ("TRUE","readUES [-p|-position <pos1> {<pos2>}] [-target] [-u|-ues <ues>]"); 
  programues =     ("TRUE","programUES [-p|-position <pos1> {<pos2>}] [-target] [-u|-ues <ues>]"); 
  readbacktofile =     ("TRUE","readbackToFile  [-p|-position <pos1> {<pos2>}] [-target] [-file <file>][-otf|-sram] [-smoke] [-spi <spiPartName>] [-bpi [<bpiPartName>]] [-bpionly] [-spionly] [-partial <startaddress> <numofbytes>] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-x] [-dualbpi] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-numberOfBytes <value>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  checksum =     ("TRUE","checksum [-p|-position <pos1> {<pos2>}] [-target] [-autoSignature] [-spi [<spiPartName>]] [-bpi [<bpiPartName>]] [-spionly] [-bpionly] [-dataWidth <value>] [-rs1 <pin1>] [-rs0 <pin0>] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V] [-image <imageFileName>] [-qspi [single|dual_stacked|dual_parallel]] [-startAddress <hexValue>] [-nand [8|16]] [-nor] [-zynq_fsbl <fsblFileName>]"); 
  reconfigureotf =     ("TRUE","reconfigureOTF [-p|-position <pos1> {<pos2>}]"); 
  readcustomercode =     ("TRUE","readCustomercode [-p|-position <pos1> {<pos2>}][-target]  {-ver <version>}"); 
  programcustomercode =     ("TRUE","programCustomercode [-position|-p <pos1> {<pos2>}] {-ver <versionOptions> {<versionOptions>}}"); 
  readpromoptions =     ("TRUE","readPromOptions [-p|-position <pos1> {<pos2>}][-target]"); 
  readcfi =     ("TRUE","readCFI [-p|-position <pos1>] [-bpionly] [-spionly] [-configbankvoltage CFGBVS|2.5V_or_higher|1.8V]"); 
  bypass =     ("TRUE","bypass [-p|-position <pos1> {<pos2>}][-target]"); 
  highz =     ("TRUE","highz [-p|-position <pos1> {<pos2>}][-target]"); 
  clamp =     ("TRUE","clamp [-p|-position <pos1> {<pos2>}][-target]"); 
  dopreload =     ("TRUE","doPreload [-p|-position <pos1> {<pos2>}][-target]"); 
  bsdebug =     ("TRUE","bsdebug [-start] [-reset] [-stop] [-tms 0|1] [-tdi 0|1][-tck <number>] [-loop <number>][-scanir <scandata>] [-irlength <number>] [-scandr <scandata>] [-drlength <number>]"); 
  setcable =     ("TRUE","setCable [-p|-port lpt1|lpt2|lpt3|com1|com2|com3|com4|usb0|usb1|usb2|usb21|usb22|usb23|usb24|usb25|usb26|usb27|usb28|usb29|usb210|parport0|parport1|parport2|parport3|ttya|ttyb|tty00|tty01|ttyS0|ttyS1|ttyS2|ttyS3|xsvf|svf|stapl|auto|null][-b|-baud 9600|19200|38400|57600|5000000|2500000|1250000|625000|200000|24000000|12000000|6000000|3000000|1500000|750000|-1|auto] [-file <filename>][-target <target_parameters>][-esn <electronic_sn>][-server <serverAddress>]"); 
  setcablespeed =     ("TRUE","setCableSpeed [-speed <value>]"); 
  setcableoption =     ("TRUE","setCableOption [-option <option>] [-value <value>]"); 
  setenv =     ("TRUE","setEnv [-env <value>] [-value <value>]"); 
  unsetenv =     ("TRUE","unsetEnv [-env <value>]"); 
  closecable =     ("TRUE","closeCable"); 
  listusbcables =     ("TRUE","listUsbCables [-host <hostname>]"); 
  setmode =     ("TRUE","setMode [-ss|-sserial|-sm|-smap|-bs|-bscan|-mpm|-acempm|-cf|-acecf|-compactflash|-pff|-promfile|-bsfile|-hw140|-dtconfig|-spi]"); 
  setsubmode =     ("TRUE","setsubMode [-mpmss|-mpmsm|-pffserial|-pffparallel][-pffversion][-pffspi][-pffbpi][-pffmbspi][-pffmbbpi]"); 
  setpreference =     ("TRUE","setPreference [-pref <name_value>]"); 
  setattribute =     ("FALSE","setAttribute [-configdevice|-collection|-design] [-position <pos>] [-attr <attrName>] [-value [<attrValue>]] [-attached]"); 
  setmbbpitype =     ("TRUE","setMbBpiType [-type <typeString>]"); 
  setmbbpidevice =     ("TRUE","setMbBpiDevice [-device <deviceName>]"); 
  setmbbpichain =     ("TRUE","setMbBpiChain [-parallel|-serial]"); 
  setbpiwidth =     ("TRUE","setMbBpiChain [-datawidth <dataWidth>]"); 
  runcablediagnostics =     ("TRUE","runCableDiagnostics"); 
  play =     ("TRUE","play [-retry <number>] [-cont_on_fail] [-showalltdo]"); 
  info =     ("TRUE","info"); 
  quit =     ("TRUE","quit"); 
  exit =     ("TRUE","exit"); 
  lockcable =     ("TRUE","lockcable"); 
  unlockcable =     ("TRUE","unlockcable"); 
  identify =     ("TRUE","identify [-manufacturer atmel|st] [-inferir]"); 
  identifympm =     ("TRUE","identifyMPM"); 
  savecdf =     ("TRUE","saveCdf [-file <fileName>]"); 
  saveprojectfile =     ("TRUE","saveprojectfile [-file <fileName>]"); 
  savearchive =     ("TRUE","saveArchive [-file <fileName>] [-dir <dirName>]"); 
  loadarchive =     ("TRUE","loadArchive [-file <fileName>] [-dir <dirName>]"); 
  loadcdf =     ("TRUE","loadCdf [-file <fileName>]"); 
  loadprojectfile =     ("TRUE","loadProjectFile [-file <fileName>]"); 
  writeprojectfile =     ("TRUE","writeProjectFile [-file <fileName>]"); 
  loadpdr =     ("TRUE","loadPdr [-file <fileName>]"); 
  savecmd =     ("TRUE","saveCmd [-file <fileName>]"); 
  setlog =     ("TRUE","setLog [-file <fileName>]"); 
  clearcmd =     ("TRUE","clearCmd"); 
  setprotection =     ("FALSE","setProtection [-p|-position <pos1> {<pos2>}]"); 
  setreadprotect =     ("FALSE","setReadProtect [-p|-position <pos1> {<pos2>}] [-otpsecurity] [-nobscanreg]"); 
  setwriteprotect =     ("FALSE","setWriteProtect [-p|-position <pos1> {<pos2>}]"); 
  setsignatureusercode =     ("FALSE","setSignatureUsercode [-p|-position <pos1> {<pos2>}]"); 
  validateinstance =     ("FALSE","validateInstance [-p|-position <pos1> {<pos2>}]"); 
  validateusercode =     ("FALSE","validateUsercode [-p|-position <pos1> {<pos2>}]"); 
  setiscdone =     ("FALSE","setISCDone [-p|-position <pos1> {<pos2>}][-target]"); 
  setpromoptionbits =     ("FALSE","setPromOptionBits [-p|-position <pos1> {<pos2>}] [-u|-usercode <usercode>][-target][-parallel] [-cascadeLowPower] [-noncascadeLowPower] [-useD4] [-loadfpga] [-r|-readProtect]"); 
  pffgenerate =     ("FALSE","pffgenerate [-setName <fileName>]"); 
  generate =     ("TRUE","generate [-active <collectionName>]  [-path <pathString>] [-output <outputFile>] [-compressed] [-format mcs|hex|tek|isc|ufp|bin] [-fillvalue <hexByte>] [-disableswap] [-generic] [-multiboot] [-spi] [-bpi_serial] [-bpi_parallel] [-data_width <width>]"); 
  setcurrentdevicechain =     ("TRUE","setCurrentDeviceChain [-index <chainnNo>]"); 
  setcurrentdesign =     ("TRUE","setCurrentDesign [-version <versionNo>]"); 
  setcurrentcollection =     ("TRUE","setCurrentCollection [-collection <collectionName>]"); 
  help =     ("TRUE","help [-all] [-head <num>] [-tail <num>] [-m <command>] [-c <command>]"); 
  settargetdevice =     ("TRUE","setTargetDevice [-position|-p <position>] [-attached]"); 
  repeatstart =     ("TRUE","repeatStart [-loop <num>]"); 
  repeatend =     ("TRUE","repeatEnd"); 
};