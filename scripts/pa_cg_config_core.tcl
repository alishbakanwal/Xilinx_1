# COPYRIGHT NOTICE
# Copyright 1986-1999, 2001-2009 Xilinx, Inc. All Rights Reserved.
#
# FILE: pa_cg_config_core.tcl
#
# This script configures a coregen core
#

source "$tclUtilsPath"

########################################
# Customize CORE Generator 2.0 IP core #
########################################

set result 1

set logPath [file dirname $cgProjectPath]
set xmsgLogFile [$iIPEngine SetXmsgsLog "$logPath/_xmsgs/cg.xmsgs"]
if { [ catch { set coregenLogFile [$iIPEngine SetLog "$logPath/coregen.log"] } ] } {
   puts "Error writing coregen.log"
}

;# create new project
if { [string trim $repoPaths] ne "" } {  
  $iRepositoryManager SetRepositoryList [toStringContainer $repoPaths]
}

#  Reload the repositories unless there is an explicit discovery of a
# flag-set-to-false from PlanAhead. This "fails safe" into previous
# "always reload everything" CoreGen behaviour if the flag either
# isn't detected or isn't set (the two cases below).
if { ![info exists reloadAllCoreGenRepositories] } {
  $iRepositoryManager RefreshAllRepositories
} elseif { $reloadAllCoreGenRepositories } {
  $iRepositoryManager RefreshAllRepositories
}

# Ensure that any old CGC file is deleted. Note that non-existence doesn't trigger an error.
file delete $cgProjectPath

# create a new project
set designID [$iProjectManager NewProject "$cgProjectPath" "xilinx.com:projects:${ipName}:${productVersion}"]

if { $designID eq "" } {
   puts "ERROR: Unable to open a CoreGen project for ${ipName}"
} else {

   # set project options
   $iTGIHelper setDesignPart     $designID "$cgPartSpec"
   $iTGIHelper setDesignLanguage $designID "$hdlType"

   ;# create new component instance in project
   set componentInstanceID [$iTGI addComponentInstance            $designID "$vlnv" "$ipName" "" "Generated by PlanAhead/Vivado"]
   set componentID         [$iTGI getComponentInstanceComponentID $componentInstanceID]

   if { $componentInstanceID eq "" } {
      puts "ERROR: Unable to create component instance ${ipName} within project"
   } elseif { $componentID eq "" } {
      puts "ERROR: Unable to find component $vlnv within repository"
   } else {

      set generatorChainIDs [$iTGIHelper getGeneratorChainIDs  $componentID]

      # chain groups specified at: 
      #  http://ipwiki/twiki/bin/view/Software/CoreGen2Design#Generator_Chain_Groups

      # $iStringContainer Clear
      set group "COREGEN"
      $iStringContainer Add group
      set generatorChainIDs [$iGenerationManager FilterChainIDsByGroup $generatorChainIDs $iStringContainer "AND"]

      $iStringContainer Clear
      foreach chain $chains { 
         set group $chain
         $iStringContainer Add group
      }

      set generatorChainIDs [$iGenerationManager FilterChainIDsByGroup $generatorChainIDs $iStringContainer "OR"]
      set result            [$iGenerationManager Generate $componentInstanceID $generatorChainIDs]

      if { $result == 0 } {
         if { [catch { GenerateBOMFile "$bomFilePath" $componentInstanceID $generatorChainIDs } results ] } {
            puts "ERROR processing BOM - $results"
            set result 1
         } else {
            puts "Generated BOM file '$bomFilePath'."
         }
      }
      $iProjectManager SaveProject $designID
   }
   $iProjectManager CloseProject $designID
}

return $result

# XSIP watermark, do not delete 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
